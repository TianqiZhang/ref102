<Type Name="IAdapterIntegration" FullName="Microsoft.Bot.Builder.Integration.IAdapterIntegration">
  <TypeSignature Language="C#" Value="public interface IAdapterIntegration" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAdapterIntegration" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Bot.Builder.Integration.IAdapterIntegration" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAdapterIntegration" />
  <TypeSignature Language="F#" Value="type IAdapterIntegration = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
    <AssemblyVersion>4.9.4.0</AssemblyVersion>
    <AssemblyVersion>4.10.3.0</AssemblyVersion>
    <AssemblyVersion>4.14.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            An interface that defines the contract between web service integration pieces and the bot adapter.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ContinueConversationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueConversationAsync (string botId, Microsoft.Bot.Schema.ConversationReference reference, Microsoft.Bot.Builder.BotCallbackHandler callback, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ContinueConversationAsync(string botId, class Microsoft.Bot.Schema.ConversationReference reference, class Microsoft.Bot.Builder.BotCallbackHandler callback, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Integration.IAdapterIntegration.ContinueConversationAsync(System.String,Microsoft.Bot.Schema.ConversationReference,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueConversationAsync (botId As String, reference As ConversationReference, callback As BotCallbackHandler, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member ContinueConversationAsync : string * Microsoft.Bot.Schema.ConversationReference * Microsoft.Bot.Builder.BotCallbackHandler * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iAdapterIntegration.ContinueConversationAsync (botId, reference, callback, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.14.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="botId" Type="System.String" />
        <Parameter Name="reference" Type="Microsoft.Bot.Schema.ConversationReference" />
        <Parameter Name="callback" Type="Microsoft.Bot.Builder.BotCallbackHandler" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="botId">The application ID of the bot. This parameter is ignored in
            single tenant the Adapters (Console, Test, etc) but is critical to the BotFrameworkAdapter
            which is multi-tenant aware. </param>
        <param name="reference">A reference to the conversation to continue.</param>
        <param name="callback">The method to call for the resulting bot turn.</param>
        <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
        <summary>
            Sends a proactive message to a conversation.
            </summary>
        <returns>A task that represents the work queued to execute.</returns>
        <remarks>Call this method to proactively send a message to a conversation.
            Most _channels require a user to initiate a conversation with a bot
            before the bot can send activities to the user.</remarks>
        <altmember cref="M:Microsoft.Bot.Builder.BotAdapter.ContinueConversationAsync(System.String,Microsoft.Bot.Schema.ConversationReference,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessActivityAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.InvokeResponse&gt; ProcessActivityAsync (string authHeader, Microsoft.Bot.Schema.Activity activity, Microsoft.Bot.Builder.BotCallbackHandler callback, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Builder.InvokeResponse&gt; ProcessActivityAsync(string authHeader, class Microsoft.Bot.Schema.Activity activity, class Microsoft.Bot.Builder.BotCallbackHandler callback, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Integration.IAdapterIntegration.ProcessActivityAsync(System.String,Microsoft.Bot.Schema.Activity,Microsoft.Bot.Builder.BotCallbackHandler,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ProcessActivityAsync (authHeader As String, activity As Activity, callback As BotCallbackHandler, cancellationToken As CancellationToken) As Task(Of InvokeResponse)" />
      <MemberSignature Language="F#" Value="abstract member ProcessActivityAsync : string * Microsoft.Bot.Schema.Activity * Microsoft.Bot.Builder.BotCallbackHandler * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.InvokeResponse&gt;" Usage="iAdapterIntegration.ProcessActivityAsync (authHeader, activity, callback, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.14.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.InvokeResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authHeader" Type="System.String" />
        <Parameter Name="activity" Type="Microsoft.Bot.Schema.Activity" />
        <Parameter Name="callback" Type="Microsoft.Bot.Builder.BotCallbackHandler" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="authHeader">The HTTP authentication header of the request.</param>
        <param name="activity">The incoming activity.</param>
        <param name="callback">The code to run at the end of the adapter's middleware pipeline.</param>
        <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
        <summary>
            Creates a turn context and runs the middleware pipeline for an incoming activity.
            </summary>
        <returns>A task that represents the work queued to execute. If the activity type
            was 'Invoke' and the corresponding key (channelId + activityId) was found
            then an InvokeResponse is returned, otherwise null is returned.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
