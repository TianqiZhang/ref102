<Type Name="ICredentialProvider" FullName="Microsoft.Bot.Connector.Authentication.ICredentialProvider">
  <TypeSignature Language="C#" Value="public interface ICredentialProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICredentialProvider" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Bot.Connector.Authentication.ICredentialProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICredentialProvider" />
  <TypeSignature Language="F#" Value="type ICredentialProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
    <AssemblyVersion>4.9.4.0</AssemblyVersion>
    <AssemblyVersion>4.10.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
             CredentialProvider interface. This interface allows Bots to provide their own
             implementation of what is, and what is not, a valid appId and password. This is
             useful in the case of multi-tenant bots, where the bot may need to call
             out to a service to determine if a particular appid/password pair
             is valid.
            
             For Single Tenant bots (the vast majority) the simple static providers
             are sufficient.
             </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetAppPasswordAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetAppPasswordAsync (string appId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GetAppPasswordAsync(string appId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Authentication.ICredentialProvider.GetAppPasswordAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAppPasswordAsync (appId As String) As Task(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetAppPasswordAsync : string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="iCredentialProvider.GetAppPasswordAsync appId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="appId">The ID of the app to get the password for.</param>
        <summary>
            Gets the app password for a given bot app ID.
            </summary>
        <returns>A task that represents the work queued to execute.</returns>
        <remarks>If the task is successful and the app ID is valid, the result
            contains the password; otherwise, null.
            <para>
            This method is async to enable custom implementations
            that may need to call out to serviced to validate the appId / password pair.
            </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAuthenticationDisabledAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; IsAuthenticationDisabledAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; IsAuthenticationDisabledAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Authentication.ICredentialProvider.IsAuthenticationDisabledAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAuthenticationDisabledAsync () As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member IsAuthenticationDisabledAsync : unit -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="iCredentialProvider.IsAuthenticationDisabledAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Checks whether bot authentication is disabled.
            </summary>
        <returns>A task that represents the work queued to execute.</returns>
        <remarks>If the task is successful and bot authentication is disabled, the result
            is true; otherwise, false.
            <para>
            This method is async to enable custom implementations
            that may need to call out to serviced to validate the appId / password pair.
            </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidAppIdAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; IsValidAppIdAsync (string appId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; IsValidAppIdAsync(string appId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Authentication.ICredentialProvider.IsValidAppIdAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidAppIdAsync (appId As String) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member IsValidAppIdAsync : string -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="iCredentialProvider.IsValidAppIdAsync appId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="appId">The app ID to validate.</param>
        <summary>
            Validates an app ID.
            </summary>
        <returns>A task that represents the work queued to execute.</returns>
        <remarks>If the task is successful, the result is true if <paramref name="appId" />
            is valid for the controller; otherwise, false.
            <para>
            This method is async to enable custom implementations
            that may need to call out to serviced to validate the appId / password pair.
            </para></remarks>
      </Docs>
    </Member>
  </Members>
</Type>
