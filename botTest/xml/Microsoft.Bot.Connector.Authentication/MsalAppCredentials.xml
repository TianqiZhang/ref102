<Type Name="MsalAppCredentials" FullName="Microsoft.Bot.Connector.Authentication.MsalAppCredentials">
  <TypeSignature Language="C#" Value="public class MsalAppCredentials : Microsoft.Bot.Connector.Authentication.AppCredentials, Microsoft.Bot.Connector.Authentication.IAuthenticator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MsalAppCredentials extends Microsoft.Bot.Connector.Authentication.AppCredentials implements class Microsoft.Bot.Connector.Authentication.IAuthenticator" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Bot.Connector.Authentication.MsalAppCredentials" />
  <TypeSignature Language="VB.NET" Value="Public Class MsalAppCredentials&#xA;Inherits AppCredentials&#xA;Implements IAuthenticator" />
  <TypeSignature Language="F#" Value="type MsalAppCredentials = class&#xA;    inherit AppCredentials&#xA;    interface IAuthenticator" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
    <AssemblyVersion>4.14.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Bot.Connector.Authentication.AppCredentials</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Bot.Connector.Authentication.IAuthenticator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            An authentication class that implements <see cref="T:Microsoft.Bot.Connector.Authentication.IAuthenticator" />, used to acquire tokens for outgoing messages to the channels.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MsalAppCredentials (Microsoft.Identity.Client.IConfidentialClientApplication clientApplication, string appId, string authority = default, string scope = default, bool validateAuthority = true, Microsoft.Extensions.Logging.ILogger logger = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Identity.Client.IConfidentialClientApplication clientApplication, string appId, string authority, string scope, bool validateAuthority, class Microsoft.Extensions.Logging.ILogger logger) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Authentication.MsalAppCredentials.#ctor(Microsoft.Identity.Client.IConfidentialClientApplication,System.String,System.String,System.String,System.Boolean,Microsoft.Extensions.Logging.ILogger)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (clientApplication As IConfidentialClientApplication, appId As String, Optional authority As String = Nothing, Optional scope As String = Nothing, Optional validateAuthority As Boolean = true, Optional logger As ILogger = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.Bot.Connector.Authentication.MsalAppCredentials : Microsoft.Identity.Client.IConfidentialClientApplication * string * string * string * bool * Microsoft.Extensions.Logging.ILogger -&gt; Microsoft.Bot.Connector.Authentication.MsalAppCredentials" Usage="new Microsoft.Bot.Connector.Authentication.MsalAppCredentials (clientApplication, appId, authority, scope, validateAuthority, logger)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.14.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="clientApplication" Type="Microsoft.Identity.Client.IConfidentialClientApplication" />
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="authority" Type="System.String" />
        <Parameter Name="scope" Type="System.String" />
        <Parameter Name="validateAuthority" Type="System.Boolean" />
        <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" />
      </Parameters>
      <Docs>
        <param name="clientApplication">The client application to use to acquire tokens.</param>
        <param name="appId">The Microsoft application Id.</param>
        <param name="logger">Optional <see cref="T:Microsoft.Extensions.Logging.ILogger" />.</param>
        <param name="authority">Optional authority.</param>
        <param name="validateAuthority">Whether to validate the authority.</param>
        <param name="scope">Optional custom scope.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.MsalAppCredentials" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MsalAppCredentials (string appId, System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, string authority = default, string scope = default, bool validateAuthority = true, Microsoft.Extensions.Logging.ILogger logger = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string appId, class System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, string authority, string scope, bool validateAuthority, class Microsoft.Extensions.Logging.ILogger logger) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Authentication.MsalAppCredentials.#ctor(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String,System.Boolean,Microsoft.Extensions.Logging.ILogger)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (appId As String, certificate As X509Certificate2, Optional authority As String = Nothing, Optional scope As String = Nothing, Optional validateAuthority As Boolean = true, Optional logger As ILogger = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.Bot.Connector.Authentication.MsalAppCredentials : string * System.Security.Cryptography.X509Certificates.X509Certificate2 * string * string * bool * Microsoft.Extensions.Logging.ILogger -&gt; Microsoft.Bot.Connector.Authentication.MsalAppCredentials" Usage="new Microsoft.Bot.Connector.Authentication.MsalAppCredentials (appId, certificate, authority, scope, validateAuthority, logger)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.14.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
        <Parameter Name="authority" Type="System.String" />
        <Parameter Name="scope" Type="System.String" />
        <Parameter Name="validateAuthority" Type="System.Boolean" />
        <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" />
      </Parameters>
      <Docs>
        <param name="appId">The Microsoft application id.</param>
        <param name="certificate">The certificate to use for authentication.</param>
        <param name="validateAuthority">Optional switch for whether to validate the authority.</param>
        <param name="authority">Optional authority.</param>
        <param name="scope">Optional custom scope.</param>
        <param name="logger">Optional <see cref="T:Microsoft.Extensions.Logging.ILogger" />.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.MsalAppCredentials" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MsalAppCredentials (string appId, string appPassword, string authority = default, string scope = default, bool validateAuthority = true, Microsoft.Extensions.Logging.ILogger logger = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string appId, string appPassword, string authority, string scope, bool validateAuthority, class Microsoft.Extensions.Logging.ILogger logger) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Authentication.MsalAppCredentials.#ctor(System.String,System.String,System.String,System.String,System.Boolean,Microsoft.Extensions.Logging.ILogger)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (appId As String, appPassword As String, Optional authority As String = Nothing, Optional scope As String = Nothing, Optional validateAuthority As Boolean = true, Optional logger As ILogger = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.Bot.Connector.Authentication.MsalAppCredentials : string * string * string * string * bool * Microsoft.Extensions.Logging.ILogger -&gt; Microsoft.Bot.Connector.Authentication.MsalAppCredentials" Usage="new Microsoft.Bot.Connector.Authentication.MsalAppCredentials (appId, appPassword, authority, scope, validateAuthority, logger)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.14.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="appPassword" Type="System.String" />
        <Parameter Name="authority" Type="System.String" />
        <Parameter Name="scope" Type="System.String" />
        <Parameter Name="validateAuthority" Type="System.Boolean" />
        <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" />
      </Parameters>
      <Docs>
        <param name="appId">The Microsoft application id.</param>
        <param name="appPassword">The Microsoft application password.</param>
        <param name="authority">Optional authority.</param>
        <param name="validateAuthority">Whether to validate the authority.</param>
        <param name="scope">Optional custom scope.</param>
        <param name="logger">Optional <see cref="T:Microsoft.Extensions.Logging.ILogger" />.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.MsalAppCredentials" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildAuthenticator">
      <MemberSignature Language="C#" Value="protected override Lazy&lt;Microsoft.Bot.Connector.Authentication.AdalAuthenticator&gt; BuildAuthenticator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Lazy`1&lt;class Microsoft.Bot.Connector.Authentication.AdalAuthenticator&gt; BuildAuthenticator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Authentication.MsalAppCredentials.BuildAuthenticator" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function BuildAuthenticator () As Lazy(Of AdalAuthenticator)" />
      <MemberSignature Language="F#" Value="override this.BuildAuthenticator : unit -&gt; Lazy&lt;Microsoft.Bot.Connector.Authentication.AdalAuthenticator&gt;" Usage="msalAppCredentials.BuildAuthenticator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.14.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;Microsoft.Bot.Connector.Authentication.AdalAuthenticator&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="BuildIAuthenticator">
      <MemberSignature Language="C#" Value="protected override Lazy&lt;Microsoft.Bot.Connector.Authentication.IAuthenticator&gt; BuildIAuthenticator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Lazy`1&lt;class Microsoft.Bot.Connector.Authentication.IAuthenticator&gt; BuildIAuthenticator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Authentication.MsalAppCredentials.BuildIAuthenticator" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function BuildIAuthenticator () As Lazy(Of IAuthenticator)" />
      <MemberSignature Language="F#" Value="override this.BuildIAuthenticator : unit -&gt; Lazy&lt;Microsoft.Bot.Connector.Authentication.IAuthenticator&gt;" Usage="msalAppCredentials.BuildIAuthenticator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.14.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;Microsoft.Bot.Connector.Authentication.IAuthenticator&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static readonly Microsoft.Bot.Connector.Authentication.MsalAppCredentials Empty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Microsoft.Bot.Connector.Authentication.MsalAppCredentials Empty" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Bot.Connector.Authentication.MsalAppCredentials.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Empty As MsalAppCredentials " />
      <MemberSignature Language="F#" Value=" staticval mutable Empty : Microsoft.Bot.Connector.Authentication.MsalAppCredentials" Usage="Microsoft.Bot.Connector.Authentication.MsalAppCredentials.Empty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.14.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Connector.Authentication.MsalAppCredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            An empty set of credentials.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Bot.Connector.Authentication.IAuthenticator.GetTokenAsync">
      <MemberSignature Language="C#" Value="System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.Authentication.AuthenticatorResult&gt; IAuthenticator.GetTokenAsync (bool forceRefresh);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Connector.Authentication.AuthenticatorResult&gt; Microsoft.Bot.Connector.Authentication.IAuthenticator.GetTokenAsync(bool forceRefresh) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Authentication.MsalAppCredentials.Microsoft#Bot#Connector#Authentication#IAuthenticator#GetTokenAsync(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function GetTokenAsync (forceRefresh As Boolean) As Task(Of AuthenticatorResult) Implements IAuthenticator.GetTokenAsync" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.Bot.Connector.Authentication.IAuthenticator.GetTokenAsync : bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.Authentication.AuthenticatorResult&gt;&#xA;override this.Microsoft.Bot.Connector.Authentication.IAuthenticator.GetTokenAsync : bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.Authentication.AuthenticatorResult&gt;" Usage="msalAppCredentials.Microsoft.Bot.Connector.Authentication.IAuthenticator.GetTokenAsync forceRefresh" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Bot.Connector.Authentication.IAuthenticator.GetTokenAsync(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.14.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.Authentication.AuthenticatorResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forceRefresh" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="forceRefresh">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
