<Type Name="AppCredentials" FullName="Microsoft.Bot.Connector.Authentication.AppCredentials">
  <TypeSignature Language="C#" Value="public abstract class AppCredentials : Microsoft.Rest.ServiceClientCredentials" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit AppCredentials extends Microsoft.Rest.ServiceClientCredentials" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Bot.Connector.Authentication.AppCredentials" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class AppCredentials&#xA;Inherits ServiceClientCredentials" />
  <TypeSignature Language="F#" Value="type AppCredentials = class&#xA;    inherit ServiceClientCredentials" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
    <AssemblyVersion>4.9.4.0</AssemblyVersion>
    <AssemblyVersion>4.10.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Rest.ServiceClientCredentials</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Base abstraction for AAD credentials for auth and caching.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AppCredentials (string channelAuthTenant = default, System.Net.Http.HttpClient customHttpClient = default, Microsoft.Extensions.Logging.ILogger logger = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string channelAuthTenant, class System.Net.Http.HttpClient customHttpClient, class Microsoft.Extensions.Logging.ILogger logger) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Authentication.AppCredentials.#ctor(System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional channelAuthTenant As String = Nothing, Optional customHttpClient As HttpClient = Nothing, Optional logger As ILogger = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.Bot.Connector.Authentication.AppCredentials : string * System.Net.Http.HttpClient * Microsoft.Extensions.Logging.ILogger -&gt; Microsoft.Bot.Connector.Authentication.AppCredentials" Usage="new Microsoft.Bot.Connector.Authentication.AppCredentials (channelAuthTenant, customHttpClient, logger)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="channelAuthTenant" Type="System.String" />
        <Parameter Name="customHttpClient" Type="System.Net.Http.HttpClient" />
        <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" />
      </Parameters>
      <Docs>
        <param name="channelAuthTenant">Optional. The oauth token tenant.</param>
        <param name="customHttpClient">Optional <see cref="T:System.Net.Http.HttpClient" /> to be used when acquiring tokens.</param>
        <param name="logger">Optional <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to gather telemetry data while acquiring and managing credentials.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.AppCredentials" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AppCredentials (string channelAuthTenant = default, System.Net.Http.HttpClient customHttpClient = default, Microsoft.Extensions.Logging.ILogger logger = default, string oAuthScope = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string channelAuthTenant, class System.Net.Http.HttpClient customHttpClient, class Microsoft.Extensions.Logging.ILogger logger, string oAuthScope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Authentication.AppCredentials.#ctor(System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional channelAuthTenant As String = Nothing, Optional customHttpClient As HttpClient = Nothing, Optional logger As ILogger = Nothing, Optional oAuthScope As String = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.Bot.Connector.Authentication.AppCredentials : string * System.Net.Http.HttpClient * Microsoft.Extensions.Logging.ILogger * string -&gt; Microsoft.Bot.Connector.Authentication.AppCredentials" Usage="new Microsoft.Bot.Connector.Authentication.AppCredentials (channelAuthTenant, customHttpClient, logger, oAuthScope)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="channelAuthTenant" Type="System.String" />
        <Parameter Name="customHttpClient" Type="System.Net.Http.HttpClient" />
        <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" />
        <Parameter Name="oAuthScope" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="channelAuthTenant">Optional. The oauth token tenant.</param>
        <param name="customHttpClient">Optional <see cref="T:System.Net.Http.HttpClient" /> to be used when acquiring tokens.</param>
        <param name="logger">Optional <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to gather telemetry data while acquiring and managing credentials.</param>
        <param name="oAuthScope">The scope for the token.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.AppCredentials" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthTenant">
      <MemberSignature Language="C#" Value="protected string AuthTenant { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AuthTenant" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Bot.Connector.Authentication.AppCredentials.AuthTenant" />
      <MemberSignature Language="VB.NET" Value="Protected Property AuthTenant As String" />
      <MemberSignature Language="F#" Value="member this.AuthTenant : string with get, set" Usage="Microsoft.Bot.Connector.Authentication.AppCredentials.AuthTenant" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the channel auth token tenant for this credential.
            </summary>
        <value>
            The channel auth token tenant for this credential.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildAuthenticator">
      <MemberSignature Language="C#" Value="protected abstract Lazy&lt;Microsoft.Bot.Connector.Authentication.AdalAuthenticator&gt; BuildAuthenticator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Lazy`1&lt;class Microsoft.Bot.Connector.Authentication.AdalAuthenticator&gt; BuildAuthenticator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Authentication.AppCredentials.BuildAuthenticator" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function BuildAuthenticator () As Lazy(Of AdalAuthenticator)" />
      <MemberSignature Language="F#" Value="abstract member BuildAuthenticator : unit -&gt; Lazy&lt;Microsoft.Bot.Connector.Authentication.AdalAuthenticator&gt;" Usage="appCredentials.BuildAuthenticator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;Microsoft.Bot.Connector.Authentication.AdalAuthenticator&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Builds the lazy <see cref="T:Microsoft.Bot.Connector.Authentication.AdalAuthenticator" /> to be used for token acquisition.
            </summary>
        <returns>A lazy <see cref="T:Microsoft.Bot.Connector.Authentication.AdalAuthenticator" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildIAuthenticator">
      <MemberSignature Language="C#" Value="protected virtual Lazy&lt;Microsoft.Bot.Connector.Authentication.IAuthenticator&gt; BuildIAuthenticator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Lazy`1&lt;class Microsoft.Bot.Connector.Authentication.IAuthenticator&gt; BuildIAuthenticator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Authentication.AppCredentials.BuildIAuthenticator" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function BuildIAuthenticator () As Lazy(Of IAuthenticator)" />
      <MemberSignature Language="F#" Value="abstract member BuildIAuthenticator : unit -&gt; Lazy&lt;Microsoft.Bot.Connector.Authentication.IAuthenticator&gt;&#xA;override this.BuildIAuthenticator : unit -&gt; Lazy&lt;Microsoft.Bot.Connector.Authentication.IAuthenticator&gt;" Usage="appCredentials.BuildIAuthenticator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;Microsoft.Bot.Connector.Authentication.IAuthenticator&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Builds the lazy <see cref="T:Microsoft.Bot.Connector.Authentication.IAuthenticator" /> to be used for token acquisition.
            </summary>
        <returns>A lazy <see cref="T:Microsoft.Bot.Connector.Authentication.IAuthenticator" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChannelAuthTenant">
      <MemberSignature Language="C#" Value="public string ChannelAuthTenant { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ChannelAuthTenant" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Bot.Connector.Authentication.AppCredentials.ChannelAuthTenant" />
      <MemberSignature Language="VB.NET" Value="Public Property ChannelAuthTenant As String" />
      <MemberSignature Language="F#" Value="member this.ChannelAuthTenant : string with get, set" Usage="Microsoft.Bot.Connector.Authentication.AppCredentials.ChannelAuthTenant" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets tenant to be used for channel authentication.
            </summary>
        <value>
            Tenant to be used for channel authentication.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomHttpClient">
      <MemberSignature Language="C#" Value="protected System.Net.Http.HttpClient CustomHttpClient { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Http.HttpClient CustomHttpClient" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Bot.Connector.Authentication.AppCredentials.CustomHttpClient" />
      <MemberSignature Language="VB.NET" Value="Protected Property CustomHttpClient As HttpClient" />
      <MemberSignature Language="F#" Value="member this.CustomHttpClient : System.Net.Http.HttpClient with get, set" Usage="Microsoft.Bot.Connector.Authentication.AppCredentials.CustomHttpClient" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.HttpClient</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the channel auth token tenant for this credential.
            </summary>
        <value>
            The channel auth token tenant for this credential.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetTokenAsync (bool forceRefresh = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetTokenAsync(bool forceRefresh) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Authentication.AppCredentials.GetTokenAsync(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenAsync (Optional forceRefresh As Boolean = false) As Task(Of String)" />
      <MemberSignature Language="F#" Value="member this.GetTokenAsync : bool -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="appCredentials.GetTokenAsync forceRefresh" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forceRefresh" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="forceRefresh">True to force a refresh of the token; or false to get
            a cached token if it exists.</param>
        <summary>
            Gets an OAuth access token.
            </summary>
        <returns>A task that represents the work queued to execute.</returns>
        <remarks>If the task is successful, the result contains the access token string.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTrustedServiceUrl">
      <MemberSignature Language="C#" Value="public static bool IsTrustedServiceUrl (string serviceUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsTrustedServiceUrl(string serviceUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Authentication.AppCredentials.IsTrustedServiceUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsTrustedServiceUrl (serviceUrl As String) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsTrustedServiceUrl : string -&gt; bool" Usage="Microsoft.Bot.Connector.Authentication.AppCredentials.IsTrustedServiceUrl serviceUrl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceUrl" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="serviceUrl">The service url.</param>
        <summary>
            Checks if the service url is for a trusted host or not.
            </summary>
        <returns>True if the host of the service url is trusted; False otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Logger">
      <MemberSignature Language="C#" Value="protected Microsoft.Extensions.Logging.ILogger Logger { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.Logging.ILogger Logger" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Bot.Connector.Authentication.AppCredentials.Logger" />
      <MemberSignature Language="VB.NET" Value="Protected Property Logger As ILogger" />
      <MemberSignature Language="F#" Value="member this.Logger : Microsoft.Extensions.Logging.ILogger with get, set" Usage="Microsoft.Bot.Connector.Authentication.AppCredentials.Logger" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILogger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the channel auth token tenant for this credential.
            </summary>
        <value>
            The channel auth token tenant for this credential.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MicrosoftAppId">
      <MemberSignature Language="C#" Value="public string MicrosoftAppId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MicrosoftAppId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Bot.Connector.Authentication.AppCredentials.MicrosoftAppId" />
      <MemberSignature Language="VB.NET" Value="Public Property MicrosoftAppId As String" />
      <MemberSignature Language="F#" Value="member this.MicrosoftAppId : string with get, set" Usage="Microsoft.Bot.Connector.Authentication.AppCredentials.MicrosoftAppId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the Microsoft app ID for this credential.
            </summary>
        <value>
            The Microsoft app ID for this credential.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OAuthEndpoint">
      <MemberSignature Language="C#" Value="public virtual string OAuthEndpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OAuthEndpoint" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Bot.Connector.Authentication.AppCredentials.OAuthEndpoint" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OAuthEndpoint As String" />
      <MemberSignature Language="F#" Value="member this.OAuthEndpoint : string" Usage="Microsoft.Bot.Connector.Authentication.AppCredentials.OAuthEndpoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the OAuth endpoint to use.
            </summary>
        <value>
            The OAuth endpoint to use.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OAuthScope">
      <MemberSignature Language="C#" Value="public virtual string OAuthScope { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OAuthScope" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Bot.Connector.Authentication.AppCredentials.OAuthScope" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OAuthScope As String" />
      <MemberSignature Language="F#" Value="member this.OAuthScope : string" Usage="Microsoft.Bot.Connector.Authentication.AppCredentials.OAuthScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the OAuth scope to use.
            </summary>
        <value>
            The OAuth scope to use.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessHttpRequestAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task ProcessHttpRequestAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task ProcessHttpRequestAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Authentication.AppCredentials.ProcessHttpRequestAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ProcessHttpRequestAsync (request As HttpRequestMessage, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="override this.ProcessHttpRequestAsync : System.Net.Http.HttpRequestMessage * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="appCredentials.ProcessHttpRequestAsync (request, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request">The HTTP request.</param>
        <param name="cancellationToken">Cancellation token.</param>
        <summary>
            Apply the credentials to the HTTP request.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrustServiceUrl">
      <MemberSignature Language="C#" Value="public static void TrustServiceUrl (string serviceUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TrustServiceUrl(string serviceUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Authentication.AppCredentials.TrustServiceUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TrustServiceUrl (serviceUrl As String)" />
      <MemberSignature Language="F#" Value="static member TrustServiceUrl : string -&gt; unit" Usage="Microsoft.Bot.Connector.Authentication.AppCredentials.TrustServiceUrl serviceUrl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceUrl" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="serviceUrl">The service URL.</param>
        <summary>
            Adds the host of service url to <see cref="T:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials" /> trusted hosts.
            </summary>
        <remarks>If expiration time is not provided, the expiration time will DateTime.UtcNow.AddDays(1).</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrustServiceUrl">
      <MemberSignature Language="C#" Value="public static void TrustServiceUrl (string serviceUrl, DateTime expirationTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TrustServiceUrl(string serviceUrl, valuetype System.DateTime expirationTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Authentication.AppCredentials.TrustServiceUrl(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TrustServiceUrl (serviceUrl As String, expirationTime As DateTime)" />
      <MemberSignature Language="F#" Value="static member TrustServiceUrl : string * DateTime -&gt; unit" Usage="Microsoft.Bot.Connector.Authentication.AppCredentials.TrustServiceUrl (serviceUrl, expirationTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceUrl" Type="System.String" />
        <Parameter Name="expirationTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="serviceUrl">The service URL.</param>
        <param name="expirationTime">The expiration time after which this service url is not trusted anymore.</param>
        <summary>
            Adds the host of service url to <see cref="T:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials" /> trusted hosts.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
