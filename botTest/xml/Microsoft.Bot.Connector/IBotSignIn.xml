<Type Name="IBotSignIn" FullName="Microsoft.Bot.Connector.IBotSignIn">
  <TypeSignature Language="C#" Value="public interface IBotSignIn" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBotSignIn" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Bot.Connector.IBotSignIn" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBotSignIn" />
  <TypeSignature Language="F#" Value="type IBotSignIn = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
    <AssemblyVersion>4.9.4.0</AssemblyVersion>
    <AssemblyVersion>4.10.3.0</AssemblyVersion>
    <AssemblyVersion>4.14.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            BotSignIn operations.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetSignInUrlWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;string&gt;&gt; GetSignInUrlWithHttpMessagesAsync (string state, string codeChallenge = default, string emulatorUrl = default, string finalRedirect = default, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.HttpOperationResponse`1&lt;string&gt;&gt; GetSignInUrlWithHttpMessagesAsync(string state, string codeChallenge, string emulatorUrl, string finalRedirect, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.IBotSignIn.GetSignInUrlWithHttpMessagesAsync(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSignInUrlWithHttpMessagesAsync (state As String, Optional codeChallenge As String = Nothing, Optional emulatorUrl As String = Nothing, Optional finalRedirect As String = Nothing, Optional customHeaders As Dictionary(Of String, List(Of String)) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of HttpOperationResponse(Of String))" />
      <MemberSignature Language="F#" Value="abstract member GetSignInUrlWithHttpMessagesAsync : string * string * string * string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;string&gt;&gt;" Usage="iBotSignIn.GetSignInUrlWithHttpMessagesAsync (state, codeChallenge, emulatorUrl, finalRedirect, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Connector</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
        <AssemblyVersion>4.14.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;System.String&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.String" />
        <Parameter Name="codeChallenge" Type="System.String" />
        <Parameter Name="emulatorUrl" Type="System.String" />
        <Parameter Name="finalRedirect" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="state">State.</param>
        <param name="codeChallenge">Code challenge.</param>
        <param name="emulatorUrl">Emulator URL.</param>
        <param name="finalRedirect">Final redirect.</param>
        <param name="customHeaders">The headers that will be added to request.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>Get sign-in URL with HTTP Message.</summary>
        <returns>A task that represents the work queued to execute.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Rest.HttpOperationException">Thrown when the operation returned an invalid status code.</exception>
        <exception cref="T:Microsoft.Rest.SerializationException">Thrown when unable to deserialize the response.</exception>
        <exception cref="T:Microsoft.Rest.ValidationException">Thrown when a required parameter is null.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
