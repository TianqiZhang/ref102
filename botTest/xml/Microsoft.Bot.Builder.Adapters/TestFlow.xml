<Type Name="TestFlow" FullName="Microsoft.Bot.Builder.Adapters.TestFlow">
  <TypeSignature Language="C#" Value="public class TestFlow" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TestFlow extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Bot.Builder.Adapters.TestFlow" />
  <TypeSignature Language="VB.NET" Value="Public Class TestFlow" />
  <TypeSignature Language="F#" Value="type TestFlow = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
    <AssemblyVersion>4.9.4.0</AssemblyVersion>
    <AssemblyVersion>4.10.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A mock channel that can be used for unit testing of bot logic.
            </summary>
    <remarks>You can use this class to mimic input from a a user or a channel to validate
            that the bot or adapter responds as expected.</remarks>
    <altmember cref="T:Microsoft.Bot.Builder.Adapters.TestAdapter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TestFlow (Microsoft.Bot.Builder.Adapters.TestAdapter adapter, Microsoft.Bot.Builder.BotCallbackHandler callback = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Bot.Builder.Adapters.TestAdapter adapter, class Microsoft.Bot.Builder.BotCallbackHandler callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Adapters.TestFlow.#ctor(Microsoft.Bot.Builder.Adapters.TestAdapter,Microsoft.Bot.Builder.BotCallbackHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (adapter As TestAdapter, Optional callback As BotCallbackHandler = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.Bot.Builder.Adapters.TestFlow : Microsoft.Bot.Builder.Adapters.TestAdapter * Microsoft.Bot.Builder.BotCallbackHandler -&gt; Microsoft.Bot.Builder.Adapters.TestFlow" Usage="new Microsoft.Bot.Builder.Adapters.TestFlow (adapter, callback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="adapter" Type="Microsoft.Bot.Builder.Adapters.TestAdapter" />
        <Parameter Name="callback" Type="Microsoft.Bot.Builder.BotCallbackHandler" />
      </Parameters>
      <Docs>
        <param name="adapter">The test adapter to use.</param>
        <param name="callback">The bot turn processing logic to test.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TestFlow (Microsoft.Bot.Builder.Adapters.TestAdapter adapter, Microsoft.Bot.Builder.IBot bot);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Bot.Builder.Adapters.TestAdapter adapter, class Microsoft.Bot.Builder.IBot bot) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Adapters.TestFlow.#ctor(Microsoft.Bot.Builder.Adapters.TestAdapter,Microsoft.Bot.Builder.IBot)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (adapter As TestAdapter, bot As IBot)" />
      <MemberSignature Language="F#" Value="new Microsoft.Bot.Builder.Adapters.TestFlow : Microsoft.Bot.Builder.Adapters.TestAdapter * Microsoft.Bot.Builder.IBot -&gt; Microsoft.Bot.Builder.Adapters.TestFlow" Usage="new Microsoft.Bot.Builder.Adapters.TestFlow (adapter, bot)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="adapter" Type="Microsoft.Bot.Builder.Adapters.TestAdapter" />
        <Parameter Name="bot" Type="Microsoft.Bot.Builder.IBot" />
      </Parameters>
      <Docs>
        <param name="adapter">The test adapter to use.</param>
        <param name="bot">The bot containing the turn processing logic to test.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TestFlow (Func&lt;System.Threading.Tasks.Task&gt; getTask, Microsoft.Bot.Builder.Adapters.TestFlow flow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; getTask, class Microsoft.Bot.Builder.Adapters.TestFlow flow) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Adapters.TestFlow.#ctor(System.Func{System.Threading.Tasks.Task},Microsoft.Bot.Builder.Adapters.TestFlow)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (getTask As Func(Of Task), flow As TestFlow)" />
      <MemberSignature Language="F#" Value="new Microsoft.Bot.Builder.Adapters.TestFlow : Func&lt;System.Threading.Tasks.Task&gt; * Microsoft.Bot.Builder.Adapters.TestFlow -&gt; Microsoft.Bot.Builder.Adapters.TestFlow" Usage="new Microsoft.Bot.Builder.Adapters.TestFlow (getTask, flow)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="getTask" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="flow" Type="Microsoft.Bot.Builder.Adapters.TestFlow" />
      </Parameters>
      <Docs>
        <param name="getTask">The exchange to add to the exchanges in the existing flow.</param>
        <param name="flow">The flow to build up from. This provides the test adapter to use,
            the bot turn processing logic to test, and a set of exchanges to model and test.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> class from an existing flow.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TestFlow (System.Threading.Tasks.Task task, Microsoft.Bot.Builder.Adapters.TestFlow flow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.Tasks.Task task, class Microsoft.Bot.Builder.Adapters.TestFlow flow) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Adapters.TestFlow.#ctor(System.Threading.Tasks.Task,Microsoft.Bot.Builder.Adapters.TestFlow)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (task As Task, flow As TestFlow)" />
      <MemberSignature Language="F#" Value="new Microsoft.Bot.Builder.Adapters.TestFlow : System.Threading.Tasks.Task * Microsoft.Bot.Builder.Adapters.TestFlow -&gt; Microsoft.Bot.Builder.Adapters.TestFlow" Usage="new Microsoft.Bot.Builder.Adapters.TestFlow (task, flow)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task" />
        <Parameter Name="flow" Type="Microsoft.Bot.Builder.Adapters.TestFlow" />
      </Parameters>
      <Docs>
        <param name="task">The exchange to add to the exchanges in the existing flow.</param>
        <param name="flow">The flow to build up from. This provides the test adapter to use,
            the bot turn processing logic to test, and a set of exchanges to model and test.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> class from an existing flow.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertNoReply">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.Adapters.TestFlow AssertNoReply (string description = default, uint timeout = 3000);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Bot.Builder.Adapters.TestFlow AssertNoReply(string description, unsigned int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertNoReply(System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AssertNoReply (Optional description As String = Nothing, Optional timeout As UInteger = 3000) As TestFlow" />
      <MemberSignature Language="F#" Value="member this.AssertNoReply : string * uint32 -&gt; Microsoft.Bot.Builder.Adapters.TestFlow" Usage="testFlow.AssertNoReply (description, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.Adapters.TestFlow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.CallerMemberName]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.CallerMemberName&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="timeout" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="description">A message to send if the turn still responds.</param>
        <param name="timeout">The amount of time in milliseconds within which no response is expected.</param>
        <summary>
            Adds an assertion that the turn processing logic finishes responding as expected.
            </summary>
        <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object that appends this assertion to the modeled exchange.</returns>
        <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertReply">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.Adapters.TestFlow AssertReply (Microsoft.Bot.Schema.IActivity expected, string description = default, uint timeout = 3000);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Bot.Builder.Adapters.TestFlow AssertReply(class Microsoft.Bot.Schema.IActivity expected, string description, unsigned int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReply(Microsoft.Bot.Schema.IActivity,System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AssertReply (expected As IActivity, Optional description As String = Nothing, Optional timeout As UInteger = 3000) As TestFlow" />
      <MemberSignature Language="F#" Value="member this.AssertReply : Microsoft.Bot.Schema.IActivity * string * uint32 -&gt; Microsoft.Bot.Builder.Adapters.TestFlow" Usage="testFlow.AssertReply (expected, description, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.Adapters.TestFlow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="Microsoft.Bot.Schema.IActivity" />
        <Parameter Name="description" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.CallerMemberName]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.CallerMemberName&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="timeout" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="expected">The expected activity from the bot.</param>
        <param name="description">A message to send if the actual response is not as expected.</param>
        <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
        <summary>
            Adds an assertion that the turn processing logic responds as expected.
            </summary>
        <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object that appends this assertion to the modeled exchange.</returns>
        <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object.</remarks>
        <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
      </Docs>
    </Member>
    <Member MemberName="AssertReply">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.Adapters.TestFlow AssertReply (Action&lt;Microsoft.Bot.Schema.IActivity&gt; validateActivity, string description = default, uint timeout = 3000);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Bot.Builder.Adapters.TestFlow AssertReply(class System.Action`1&lt;class Microsoft.Bot.Schema.IActivity&gt; validateActivity, string description, unsigned int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReply(System.Action{Microsoft.Bot.Schema.IActivity},System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AssertReply (validateActivity As Action(Of IActivity), Optional description As String = Nothing, Optional timeout As UInteger = 3000) As TestFlow" />
      <MemberSignature Language="F#" Value="member this.AssertReply : Action&lt;Microsoft.Bot.Schema.IActivity&gt; * string * uint32 -&gt; Microsoft.Bot.Builder.Adapters.TestFlow" Usage="testFlow.AssertReply (validateActivity, description, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.Adapters.TestFlow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="validateActivity" Type="System.Action&lt;Microsoft.Bot.Schema.IActivity&gt;" />
        <Parameter Name="description" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.CallerMemberName]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.CallerMemberName&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="timeout" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="validateActivity">A validation method to apply to an activity from the bot.
            This activity should throw an exception if validation fails.</param>
        <param name="description">A message to send if the actual response is not as expected.</param>
        <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
        <summary>
            Adds an assertion that the turn processing logic responds as expected.
            </summary>
        <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object that appends this assertion to the modeled exchange.</returns>
        <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertReply">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.Adapters.TestFlow AssertReply (string expected, string description = default, uint timeout = 3000);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Bot.Builder.Adapters.TestFlow AssertReply(string expected, string description, unsigned int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReply(System.String,System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AssertReply (expected As String, Optional description As String = Nothing, Optional timeout As UInteger = 3000) As TestFlow" />
      <MemberSignature Language="F#" Value="member this.AssertReply : string * string * uint32 -&gt; Microsoft.Bot.Builder.Adapters.TestFlow" Usage="testFlow.AssertReply (expected, description, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.Adapters.TestFlow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="timeout" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="expected">The expected text of a message from the bot.</param>
        <param name="description">A message to send if the actual response is not as expected.</param>
        <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
        <summary>
            Adds an assertion that the turn processing logic responds as expected.
            </summary>
        <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object that appends this assertion to the modeled exchange.</returns>
        <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object.</remarks>
        <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
      </Docs>
    </Member>
    <Member MemberName="AssertReply">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.Adapters.TestFlow AssertReply (Microsoft.Bot.Schema.IActivity expected, System.Collections.Generic.IEqualityComparer&lt;Microsoft.Bot.Schema.IActivity&gt; equalityComparer, string description = default, uint timeout = 3000);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Bot.Builder.Adapters.TestFlow AssertReply(class Microsoft.Bot.Schema.IActivity expected, class System.Collections.Generic.IEqualityComparer`1&lt;class Microsoft.Bot.Schema.IActivity&gt; equalityComparer, string description, unsigned int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReply(Microsoft.Bot.Schema.IActivity,System.Collections.Generic.IEqualityComparer{Microsoft.Bot.Schema.IActivity},System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AssertReply (expected As IActivity, equalityComparer As IEqualityComparer(Of IActivity), Optional description As String = Nothing, Optional timeout As UInteger = 3000) As TestFlow" />
      <MemberSignature Language="F#" Value="member this.AssertReply : Microsoft.Bot.Schema.IActivity * System.Collections.Generic.IEqualityComparer&lt;Microsoft.Bot.Schema.IActivity&gt; * string * uint32 -&gt; Microsoft.Bot.Builder.Adapters.TestFlow" Usage="testFlow.AssertReply (expected, equalityComparer, description, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.Adapters.TestFlow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="Microsoft.Bot.Schema.IActivity" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;Microsoft.Bot.Schema.IActivity&gt;" />
        <Parameter Name="description" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.CallerMemberName]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.CallerMemberName&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="timeout" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="expected">The expected activity from the bot.</param>
        <param name="equalityComparer">The equality parameter which compares two activities.</param>
        <param name="description">A message to send if the actual response is not as expected.</param>
        <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
        <summary>
            Adds an assertion that the turn processing logic responds as expected.
            </summary>
        <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object that appends this assertion to the modeled exchange.</returns>
        <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object.</remarks>
        <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
      </Docs>
    </Member>
    <Member MemberName="AssertReplyContains">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.Adapters.TestFlow AssertReplyContains (string expected, string description = default, uint timeout = 3000);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Bot.Builder.Adapters.TestFlow AssertReplyContains(string expected, string description, unsigned int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReplyContains(System.String,System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AssertReplyContains (expected As String, Optional description As String = Nothing, Optional timeout As UInteger = 3000) As TestFlow" />
      <MemberSignature Language="F#" Value="member this.AssertReplyContains : string * string * uint32 -&gt; Microsoft.Bot.Builder.Adapters.TestFlow" Usage="testFlow.AssertReplyContains (expected, description, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.Adapters.TestFlow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="timeout" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="expected">The part of the expected text of a message from the bot.</param>
        <param name="description">A message to send if the actual response is not as expected.</param>
        <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
        <summary>
            Adds an assertion that the turn processing logic responds as expected.
            </summary>
        <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object that appends this assertion to the modeled exchange.</returns>
        <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object.</remarks>
        <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
      </Docs>
    </Member>
    <Member MemberName="AssertReplyOneOf">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.Adapters.TestFlow AssertReplyOneOf (string[] candidates, string description = default, uint timeout = 3000);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Bot.Builder.Adapters.TestFlow AssertReplyOneOf(string[] candidates, string description, unsigned int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReplyOneOf(System.String[],System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AssertReplyOneOf (candidates As String(), Optional description As String = Nothing, Optional timeout As UInteger = 3000) As TestFlow" />
      <MemberSignature Language="F#" Value="member this.AssertReplyOneOf : string[] * string * uint32 -&gt; Microsoft.Bot.Builder.Adapters.TestFlow" Usage="testFlow.AssertReplyOneOf (candidates, description, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.Adapters.TestFlow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="candidates" Type="System.String[]" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="timeout" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="candidates">The set of acceptable messages.</param>
        <param name="description">A message to send if the actual response is not as expected.</param>
        <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
        <summary>
            Adds an assertion that the bot's response is contained within a set of acceptable responses.
            </summary>
        <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object that appends this assertion to the modeled exchange.</returns>
        <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object.</remarks>
        <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.Adapters.TestFlow Delay (TimeSpan timespan);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Bot.Builder.Adapters.TestFlow Delay(valuetype System.TimeSpan timespan) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Adapters.TestFlow.Delay(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delay (timespan As TimeSpan) As TestFlow" />
      <MemberSignature Language="F#" Value="member this.Delay : TimeSpan -&gt; Microsoft.Bot.Builder.Adapters.TestFlow" Usage="testFlow.Delay timespan" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.Adapters.TestFlow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timespan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timespan">The delay length in TimeSpan.</param>
        <summary>
            Adds a delay in the conversation.
            </summary>
        <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object that appends a delay to the modeled exchange.</returns>
        <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.Adapters.TestFlow Delay (uint ms);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Bot.Builder.Adapters.TestFlow Delay(unsigned int32 ms) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Adapters.TestFlow.Delay(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delay (ms As UInteger) As TestFlow" />
      <MemberSignature Language="F#" Value="member this.Delay : uint32 -&gt; Microsoft.Bot.Builder.Adapters.TestFlow" Usage="testFlow.Delay ms" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.Adapters.TestFlow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ms" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="ms">The delay length in milliseconds.</param>
        <summary>
            Adds a delay in the conversation.
            </summary>
        <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object that appends a delay to the modeled exchange.</returns>
        <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.Adapters.TestFlow Send (Microsoft.Bot.Schema.IActivity userActivity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Bot.Builder.Adapters.TestFlow Send(class Microsoft.Bot.Schema.IActivity userActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Adapters.TestFlow.Send(Microsoft.Bot.Schema.IActivity)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (userActivity As IActivity) As TestFlow" />
      <MemberSignature Language="F#" Value="member this.Send : Microsoft.Bot.Schema.IActivity -&gt; Microsoft.Bot.Builder.Adapters.TestFlow" Usage="testFlow.Send userActivity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.Adapters.TestFlow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userActivity" Type="Microsoft.Bot.Schema.IActivity" />
      </Parameters>
      <Docs>
        <param name="userActivity">The activity to send.</param>
        <summary>
            Adds an activity from the user to the bot.
            </summary>
        <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object that appends a new activity from the user to the modeled exchange.</returns>
        <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.Adapters.TestFlow Send (string userSays);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Bot.Builder.Adapters.TestFlow Send(string userSays) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Adapters.TestFlow.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (userSays As String) As TestFlow" />
      <MemberSignature Language="F#" Value="member this.Send : string -&gt; Microsoft.Bot.Builder.Adapters.TestFlow" Usage="testFlow.Send userSays" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.Adapters.TestFlow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSays" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="userSays">The text of the message to send.</param>
        <summary>
            Adds a message activity from the user to the bot.
            </summary>
        <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object that appends a new message activity from the user to the modeled exchange.</returns>
        <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendConversationUpdate">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.Adapters.TestFlow SendConversationUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Bot.Builder.Adapters.TestFlow SendConversationUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Adapters.TestFlow.SendConversationUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Function SendConversationUpdate () As TestFlow" />
      <MemberSignature Language="F#" Value="member this.SendConversationUpdate : unit -&gt; Microsoft.Bot.Builder.Adapters.TestFlow" Usage="testFlow.SendConversationUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.Adapters.TestFlow</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Creates a conversation update activity and process it the activity.
            </summary>
        <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartTestAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartTestAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartTestAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Adapters.TestFlow.StartTestAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function StartTestAsync () As Task" />
      <MemberSignature Language="F#" Value="member this.StartTestAsync : unit -&gt; System.Threading.Tasks.Task" Usage="testFlow.StartTestAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Starts the execution of the test flow.
            </summary>
        <returns>Runs the exchange between the user and the bot.</returns>
        <remarks>This methods sends the activities from the user to the bot and
            checks the responses from the bot based on the activities described in the
            current test flow.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Test">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.Adapters.TestFlow Test (System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Schema.IActivity&gt; activities, string description = default, uint timeout = 3000);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Bot.Builder.Adapters.TestFlow Test(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Bot.Schema.IActivity&gt; activities, string description, unsigned int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Adapters.TestFlow.Test(System.Collections.Generic.IEnumerable{Microsoft.Bot.Schema.IActivity},System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Test (activities As IEnumerable(Of IActivity), Optional description As String = Nothing, Optional timeout As UInteger = 3000) As TestFlow" />
      <MemberSignature Language="F#" Value="member this.Test : seq&lt;Microsoft.Bot.Schema.IActivity&gt; * string * uint32 -&gt; Microsoft.Bot.Builder.Adapters.TestFlow" Usage="testFlow.Test (activities, description, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.Adapters.TestFlow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activities" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Schema.IActivity&gt;" />
        <Parameter Name="description" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.CallerMemberName]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.CallerMemberName&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="timeout" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="activities">The list of activities to test.</param>
        <param name="description">A message to send if the actual response is not as expected.</param>
        <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
        <summary>
            Shortcut for adding an arbitrary exchange between the user and bot.
            Each activity with a <see cref="P:Microsoft.Bot.Schema.IActivity.From" />.<see cref="P:Microsoft.Bot.Schema.ChannelAccount.Role" /> equals to "bot"
            will be processed with the <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReply(Microsoft.Bot.Schema.IActivity,System.String,System.UInt32)" /> method.
            Every other activity will be processed as user's message via the <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.Send(Microsoft.Bot.Schema.IActivity)" /> method.
            </summary>
        <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object that appends this exchange to the modeled exchange.</returns>
        <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object.</remarks>
        <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
      </Docs>
    </Member>
    <Member MemberName="Test">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.Adapters.TestFlow Test (System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Schema.IActivity&gt; activities, Microsoft.Bot.Builder.Adapters.ValidateReply validateReply, string description = default, uint timeout = 3000);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Bot.Builder.Adapters.TestFlow Test(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Bot.Schema.IActivity&gt; activities, class Microsoft.Bot.Builder.Adapters.ValidateReply validateReply, string description, unsigned int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Adapters.TestFlow.Test(System.Collections.Generic.IEnumerable{Microsoft.Bot.Schema.IActivity},Microsoft.Bot.Builder.Adapters.ValidateReply,System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Test (activities As IEnumerable(Of IActivity), validateReply As ValidateReply, Optional description As String = Nothing, Optional timeout As UInteger = 3000) As TestFlow" />
      <MemberSignature Language="F#" Value="member this.Test : seq&lt;Microsoft.Bot.Schema.IActivity&gt; * Microsoft.Bot.Builder.Adapters.ValidateReply * string * uint32 -&gt; Microsoft.Bot.Builder.Adapters.TestFlow" Usage="testFlow.Test (activities, validateReply, description, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.Adapters.TestFlow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activities" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Schema.IActivity&gt;" />
        <Parameter Name="validateReply" Type="Microsoft.Bot.Builder.Adapters.ValidateReply" />
        <Parameter Name="description" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.CallerMemberName]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.CallerMemberName&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="timeout" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="activities">The list of activities to test.</param>
        <param name="validateReply">The delegate to call to validate responses from the bot.</param>
        <param name="description">A message to send if the actual response is not as expected.</param>
        <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
        <summary>
            Shortcut for adding an arbitrary exchange between the user and bot.
            Each activity with a <see cref="P:Microsoft.Bot.Schema.IActivity.From" />.<see cref="P:Microsoft.Bot.Schema.ChannelAccount.Role" /> equals to "bot"
            will be processed with the <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReply(Microsoft.Bot.Schema.IActivity,System.String,System.UInt32)" /> method.
            Every other activity will be processed as user's message via the <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.Send(Microsoft.Bot.Schema.IActivity)" /> method.
            </summary>
        <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object that appends this exchange to the modeled exchange.</returns>
        <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object.</remarks>
        <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
      </Docs>
    </Member>
    <Member MemberName="Test">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.Adapters.TestFlow Test (string userSays, Microsoft.Bot.Schema.Activity expected, string description = default, uint timeout = 3000);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Bot.Builder.Adapters.TestFlow Test(string userSays, class Microsoft.Bot.Schema.Activity expected, string description, unsigned int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Adapters.TestFlow.Test(System.String,Microsoft.Bot.Schema.Activity,System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Test (userSays As String, expected As Activity, Optional description As String = Nothing, Optional timeout As UInteger = 3000) As TestFlow" />
      <MemberSignature Language="F#" Value="member this.Test : string * Microsoft.Bot.Schema.Activity * string * uint32 -&gt; Microsoft.Bot.Builder.Adapters.TestFlow" Usage="testFlow.Test (userSays, expected, description, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.Adapters.TestFlow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSays" Type="System.String" />
        <Parameter Name="expected" Type="Microsoft.Bot.Schema.Activity" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="timeout" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="userSays">The text of the message to send.</param>
        <param name="expected">The expected activity from the bot.</param>
        <param name="description">A message to send if the actual response is not as expected.</param>
        <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
        <summary>
            Shortcut for calling <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.Send(System.String)" /> followed by <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReply(Microsoft.Bot.Schema.IActivity,System.String,System.UInt32)" />.
            </summary>
        <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object that appends this exchange to the modeled exchange.</returns>
        <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object.</remarks>
        <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
      </Docs>
    </Member>
    <Member MemberName="Test">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.Adapters.TestFlow Test (string userSays, Action&lt;Microsoft.Bot.Schema.IActivity&gt; validateActivity, string description = default, uint timeout = 3000);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Bot.Builder.Adapters.TestFlow Test(string userSays, class System.Action`1&lt;class Microsoft.Bot.Schema.IActivity&gt; validateActivity, string description, unsigned int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Adapters.TestFlow.Test(System.String,System.Action{Microsoft.Bot.Schema.IActivity},System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Test (userSays As String, validateActivity As Action(Of IActivity), Optional description As String = Nothing, Optional timeout As UInteger = 3000) As TestFlow" />
      <MemberSignature Language="F#" Value="member this.Test : string * Action&lt;Microsoft.Bot.Schema.IActivity&gt; * string * uint32 -&gt; Microsoft.Bot.Builder.Adapters.TestFlow" Usage="testFlow.Test (userSays, validateActivity, description, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.Adapters.TestFlow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSays" Type="System.String" />
        <Parameter Name="validateActivity" Type="System.Action&lt;Microsoft.Bot.Schema.IActivity&gt;" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="timeout" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="userSays">The text of the message to send.</param>
        <param name="validateActivity">A validation method to apply to an activity from the bot.
            This activity should throw an exception if validation fails.</param>
        <param name="description">A message to send if the actual response is not as expected.</param>
        <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
        <summary>
            Shortcut for calling <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.Send(System.String)" /> followed by <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReply(System.Action{Microsoft.Bot.Schema.IActivity},System.String,System.UInt32)" />.
            </summary>
        <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object that appends this exchange to the modeled exchange.</returns>
        <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object.</remarks>
        <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
      </Docs>
    </Member>
    <Member MemberName="Test">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.Adapters.TestFlow Test (string userSays, string expected, string description = default, uint timeout = 3000);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Bot.Builder.Adapters.TestFlow Test(string userSays, string expected, string description, unsigned int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Adapters.TestFlow.Test(System.String,System.String,System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Test (userSays As String, expected As String, Optional description As String = Nothing, Optional timeout As UInteger = 3000) As TestFlow" />
      <MemberSignature Language="F#" Value="member this.Test : string * string * string * uint32 -&gt; Microsoft.Bot.Builder.Adapters.TestFlow" Usage="testFlow.Test (userSays, expected, description, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.Adapters.TestFlow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSays" Type="System.String" />
        <Parameter Name="expected" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="timeout" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="userSays">The text of the message to send.</param>
        <param name="expected">The expected text of a message from the bot.</param>
        <param name="description">A message to send if the actual response is not as expected.</param>
        <param name="timeout">The amount of time in milliseconds within which a response is expected.</param>
        <summary>
            Shortcut for calling <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.Send(System.String)" /> followed by <see cref="M:Microsoft.Bot.Builder.Adapters.TestFlow.AssertReply(System.String,System.String,System.UInt32)" />.
            </summary>
        <returns>A new <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object that appends this exchange to the modeled exchange.</returns>
        <remarks>This method does not modify the original <see cref="T:Microsoft.Bot.Builder.Adapters.TestFlow" /> object.</remarks>
        <exception cref="T:System.Exception">The bot did not respond as expected.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
