<Type Name="BotStateSet" FullName="Microsoft.Bot.Builder.BotStateSet">
  <TypeSignature Language="C#" Value="public class BotStateSet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BotStateSet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Bot.Builder.BotStateSet" />
  <TypeSignature Language="VB.NET" Value="Public Class BotStateSet" />
  <TypeSignature Language="F#" Value="type BotStateSet = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
    <AssemblyVersion>4.9.4.0</AssemblyVersion>
    <AssemblyVersion>4.10.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             Manages a collection of botState and provides ability to load and save in parallel.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BotStateSet (params Microsoft.Bot.Builder.BotState[] botStates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Bot.Builder.BotState[] botStates) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.BotStateSet.#ctor(Microsoft.Bot.Builder.BotState[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray botStates As BotState())" />
      <MemberSignature Language="F#" Value="new Microsoft.Bot.Builder.BotStateSet : Microsoft.Bot.Builder.BotState[] -&gt; Microsoft.Bot.Builder.BotStateSet" Usage="new Microsoft.Bot.Builder.BotStateSet botStates" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="botStates" Type="Microsoft.Bot.Builder.BotState[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="botStates">initial list of <see cref="T:Microsoft.Bot.Builder.BotState" /> objects to manage.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.BotStateSet" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public Microsoft.Bot.Builder.BotStateSet Add (Microsoft.Bot.Builder.BotState botState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Bot.Builder.BotStateSet Add(class Microsoft.Bot.Builder.BotState botState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.BotStateSet.Add(Microsoft.Bot.Builder.BotState)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (botState As BotState) As BotStateSet" />
      <MemberSignature Language="F#" Value="member this.Add : Microsoft.Bot.Builder.BotState -&gt; Microsoft.Bot.Builder.BotStateSet" Usage="botStateSet.Add botState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Bot.Builder.BotStateSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="botState" Type="Microsoft.Bot.Builder.BotState" />
      </Parameters>
      <Docs>
        <param name="botState">The bot state object to add.</param>
        <summary>
            Adds a bot state object to the set.
            </summary>
        <returns>The updated <see cref="T:Microsoft.Bot.Builder.BotStateSet" />, so you can fluently call <see cref="M:Microsoft.Bot.Builder.BotStateSet.Add(Microsoft.Bot.Builder.BotState)" /> multiple times.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BotStates">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;Microsoft.Bot.Builder.BotState&gt; BotStates { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.List`1&lt;class Microsoft.Bot.Builder.BotState&gt; BotStates" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Bot.Builder.BotStateSet.BotStates" />
      <MemberSignature Language="VB.NET" Value="Public Property BotStates As List(Of BotState)" />
      <MemberSignature Language="F#" Value="member this.BotStates : System.Collections.Generic.List&lt;Microsoft.Bot.Builder.BotState&gt; with get, set" Usage="Microsoft.Bot.Builder.BotStateSet.BotStates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;Microsoft.Bot.Builder.BotState&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the BotStates list for the BotStateSet.
            </summary>
        <value>The BotState objects managed by this class.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAllAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task LoadAllAsync (Microsoft.Bot.Builder.ITurnContext turnContext, bool force = false, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task LoadAllAsync(class Microsoft.Bot.Builder.ITurnContext turnContext, bool force, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.BotStateSet.LoadAllAsync(Microsoft.Bot.Builder.ITurnContext,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadAllAsync (turnContext As ITurnContext, Optional force As Boolean = false, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="member this.LoadAllAsync : Microsoft.Bot.Builder.ITurnContext * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="botStateSet.LoadAllAsync (turnContext, force, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="turnContext" Type="Microsoft.Bot.Builder.ITurnContext" />
        <Parameter Name="force" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="turnContext">turn context.</param>
        <param name="force">should data be forced into cache.</param>
        <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
        <summary>
            Load all BotState records in parallel.
            </summary>
        <returns>A task that represents the work queued to execute.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAllChangesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAllChangesAsync (Microsoft.Bot.Builder.ITurnContext turnContext, bool force = false, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAllChangesAsync(class Microsoft.Bot.Builder.ITurnContext turnContext, bool force, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.BotStateSet.SaveAllChangesAsync(Microsoft.Bot.Builder.ITurnContext,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function SaveAllChangesAsync (turnContext As ITurnContext, Optional force As Boolean = false, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="member this.SaveAllChangesAsync : Microsoft.Bot.Builder.ITurnContext * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="botStateSet.SaveAllChangesAsync (turnContext, force, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="turnContext" Type="Microsoft.Bot.Builder.ITurnContext" />
        <Parameter Name="force" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="turnContext">turn context.</param>
        <param name="force">should data be forced to save even if no change were detected.</param>
        <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
        <summary>
            Save All BotState changes in parallel.
            </summary>
        <returns>A task that represents the work queued to execute.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
