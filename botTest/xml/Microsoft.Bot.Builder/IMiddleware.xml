<Type Name="IMiddleware" FullName="Microsoft.Bot.Builder.IMiddleware">
  <TypeSignature Language="C#" Value="public interface IMiddleware" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMiddleware" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Bot.Builder.IMiddleware" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMiddleware" />
  <TypeSignature Language="F#" Value="type IMiddleware = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
    <AssemblyVersion>4.9.4.0</AssemblyVersion>
    <AssemblyVersion>4.10.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Represents middleware that can operate on incoming activities.
            </summary>
    <remarks>A <see cref="T:Microsoft.Bot.Builder.BotAdapter" /> passes incoming activities from the user's
            channel to the middleware's <see cref="M:Microsoft.Bot.Builder.IMiddleware.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.NextDelegate,System.Threading.CancellationToken)" />
            method.
            <para>You can add middleware objects to your adapter’s middleware collection. The
            adapter processes and directs incoming activities in through the bot middleware
            pipeline to your bot’s logic and then back out again. As each activity flows in
            and out of the bot, each piece of middleware can inspect or act upon the activity,
            both before and after the bot logic runs.</para><para>For each activity, the adapter calls middleware in the order in which you
            added it.</para></remarks>
    <altmember cref="T:Microsoft.Bot.Builder.IBot" />
  </Docs>
  <Members>
    <Member MemberName="OnTurnAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task OnTurnAsync (Microsoft.Bot.Builder.ITurnContext turnContext, Microsoft.Bot.Builder.NextDelegate next, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task OnTurnAsync(class Microsoft.Bot.Builder.ITurnContext turnContext, class Microsoft.Bot.Builder.NextDelegate next, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.IMiddleware.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.NextDelegate,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function OnTurnAsync (turnContext As ITurnContext, next As NextDelegate, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member OnTurnAsync : Microsoft.Bot.Builder.ITurnContext * Microsoft.Bot.Builder.NextDelegate * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iMiddleware.OnTurnAsync (turnContext, next, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder</AssemblyName>
        <AssemblyVersion>4.9.4.0</AssemblyVersion>
        <AssemblyVersion>4.10.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="turnContext" Type="Microsoft.Bot.Builder.ITurnContext" />
        <Parameter Name="next" Type="Microsoft.Bot.Builder.NextDelegate" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="turnContext">The context object for this turn.</param>
        <param name="next">The delegate to call to continue the bot middleware pipeline.</param>
        <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
        <summary>
            When implemented in middleware, processes an incoming activity.
            </summary>
        <returns>A task that represents the work queued to execute.</returns>
        <remarks>Middleware calls the <paramref name="next" /> delegate to pass control to
            the next middleware in the pipeline. If middleware doesn’t call the next delegate,
            the adapter does not call any of the subsequent middleware’s request handlers or the
            bot’s receive handler, and the pipeline short circuits.
            <para>The <paramref name="turnContext" /> provides information about the
            incoming activity, and other data needed to process the activity.</para></remarks>
        <altmember cref="T:Microsoft.Bot.Builder.ITurnContext" />
        <altmember cref="T:Microsoft.Bot.Schema.IActivity" />
      </Docs>
    </Member>
  </Members>
</Type>
