### YamlMime:ManagedReference
items:
- uid: System.TimeZoneInfo
  commentId: T:System.TimeZoneInfo
  id: TimeZoneInfo
  children:
  - System.TimeZoneInfo.BaseUtcOffset
  - System.TimeZoneInfo.ClearCachedData
  - System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)
  - System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)
  - System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)
  - System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)
  - System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)
  - System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)
  - System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)
  - System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)
  - System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)
  - System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)
  - System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])
  - System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)
  - System.TimeZoneInfo.DaylightName
  - System.TimeZoneInfo.DisplayName
  - System.TimeZoneInfo.Equals(System.Object)
  - System.TimeZoneInfo.Equals(System.TimeZoneInfo)
  - System.TimeZoneInfo.FindSystemTimeZoneById(System.String)
  - System.TimeZoneInfo.FromSerializedString(System.String)
  - System.TimeZoneInfo.GetAdjustmentRules
  - System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)
  - System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)
  - System.TimeZoneInfo.GetHashCode
  - System.TimeZoneInfo.GetSystemTimeZones
  - System.TimeZoneInfo.GetUtcOffset(System.DateTime)
  - System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)
  - System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)
  - System.TimeZoneInfo.Id
  - System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)
  - System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)
  - System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)
  - System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)
  - System.TimeZoneInfo.IsInvalidTime(System.DateTime)
  - System.TimeZoneInfo.Local
  - System.TimeZoneInfo.StandardName
  - System.TimeZoneInfo.SupportsDaylightSavingTime
  - System.TimeZoneInfo.ToSerializedString
  - System.TimeZoneInfo.ToString
  - System.TimeZoneInfo.Utc
  - System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  - System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  langs:
  - csharp
  name: TimeZoneInfo
  nameWithType: System.TimeZoneInfo
  fullName: System.TimeZoneInfo
  type: Class
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Represents any time zone in the world.
  remarks: "A time zone is a geographical region in which the same time is used.  \n  \n The <xref:System.TimeZoneInfo> class offers significant enhancements over the <xref:System.TimeZone> class, which provides only limited functionality.  \n  \n The <xref:System.TimeZone> class recognizes only the local time zone, and can convert times between Coordinated Universal Time (UTC) and local time. A <xref:System.TimeZoneInfo> object can represent any time zone, and methods of the <xref:System.TimeZoneInfo> class can be used to convert the time in one time zone to the corresponding time in any other time zone. The members of the <xref:System.TimeZoneInfo> class support the following operations:  \n  \n-   Retrieving a time zone that is already defined by the operating system.  \n  \n-   Enumerating the time zones that are available on a system.  \n  \n-   Converting times between different time zones.  \n  \n-   Creating a new time zone that is not already defined by the operating system.  \n  \n-   Serializing a time zone for later retrieval.  \n  \n> [!NOTE]\n>  An instance of the <xref:System.TimeZoneInfo> class is immutable. Once an object has been instantiated, its values cannot be modified.  \n  \n You cannot instantiate a <xref:System.TimeZoneInfo> object using the `new` keyword. Instead, you must call one of the static members of the <xref:System.TimeZoneInfo> class shown in the following table.  \n  \n|Static member name|Description|  \n|------------------------|-----------------|  \n|<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method|Creates a custom time zone from application-supplied data.|  \n|<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> method|Instantiates a time zone defined in the system registry based on the zone's identifier.|  \n|<xref:System.TimeZoneInfo.FromSerializedString%2A> method|Deserializes a string value to re-create a previously serialized <xref:System.TimeZoneInfo> object.|  \n|<xref:System.TimeZoneInfo.GetSystemTimeZones%2A> method|Returns an enumerable <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.TimeZoneInfo> objects that represents all time zones that are available on the local system.|  \n|<xref:System.TimeZoneInfo.Local%2A> property|Instantiates a <xref:System.TimeZoneInfo> object that represents the local time zone.|  \n|<xref:System.TimeZoneInfo.Utc%2A> property|Instantiates a <xref:System.TimeZoneInfo> object that represents the UTC zone.|  \n  \n You can use the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method to create a time zone that is not defined in the local system registry. You can then use the <xref:System.TimeZoneInfo.ToSerializedString%2A> property to save the time zone object's information as a string, which can be stored in some form that is accessible to the application. You can use the <xref:System.TimeZoneInfo.FromSerializedString%2A> method to convert a serialized string back to a <xref:System.TimeZoneInfo> object."
  syntax:
    content: 'public sealed class TimeZoneInfo : IEquatable<TimeZoneInfo>, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable'
    content.csharp: 'public sealed class TimeZoneInfo : IEquatable<TimeZoneInfo>, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable'
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{System.TimeZoneInfo}
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes: []
  modifiers.csharp:
  - public
  - sealed
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  _op_AssemblyMonikerMapping:
    System.Runtime:
    - netcore-1.0
    - netcore-1.1
    - netcore-2.0
    - netstandard-1.0
    - netstandard-1.1
    - netstandard-1.2
    - netstandard-1.3
    - netstandard-1.4
    - netstandard-1.5
    - netstandard-1.6
    mscorlib:
    - netframework-4.5
    - netframework-4.5.1
    - netframework-4.5.2
    - netframework-4.6
    - netframework-4.6.1
    - netframework-4.6.2
    - netframework-4.7
    - netframework-4.7.1
    - xamarinandroid-7.1
    - xamarinios-10.8
    - xamarinmac-3.0
    netstandard:
    - netstandard-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.BaseUtcOffset
  commentId: P:System.TimeZoneInfo.BaseUtcOffset
  id: BaseUtcOffset
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: BaseUtcOffset
  nameWithType: TimeZoneInfo.BaseUtcOffset
  fullName: System.TimeZoneInfo.BaseUtcOffset
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets the time difference between the current time zone's standard time and Coordinated Universal Time (UTC).
  remarks: "The time span returned by the <xref:System.TimeZoneInfo.BaseUtcOffset%2A> property can range from 14 hours (for a time zone that is 14 hours ahead of Coordinated Universal Time (UTC)) to -14 hours (for a time zone that is 14 hours behind UTC). Time zones that are ahead of UTC have a positive offset; time zones that are behind UTC have a negative offset.  \n  \n The <xref:System.TimeZoneInfo.BaseUtcOffset%2A> value is represented as a whole number of minutes. It cannot include a fractional number of minutes.  \n  \n> [!NOTE]\n>  Because <xref:System.TimeZoneInfo.BaseUtcOffset%2A> is a property of the <xref:System.TimeZoneInfo> object rather than the <xref:System.TimeZoneInfo.AdjustmentRule> object, the <xref:System.TimeZoneInfo> class applies a single offset from UTC to all of a time zone's adjustments. To reflect a time zone that has modified its offset from UTC, you must create a new time zone using the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method.  \n  \n The <xref:System.TimeZoneInfo.BaseUtcOffset%2A> property differs from the <xref:System.TimeZoneInfo.GetUtcOffset%2A> method in the following ways:  \n  \n-   The <xref:System.TimeZoneInfo.BaseUtcOffset%2A> property returns the difference between UTC and the time zone's standard time; the <xref:System.TimeZoneInfo.GetUtcOffset%2A> method returns the difference between UTC and the time zone's time at a particular point in time.  \n  \n-   The <xref:System.TimeZoneInfo.GetUtcOffset%2A> method reflects the application of any adjustment rules to the time zone; the <xref:System.TimeZoneInfo.BaseUtcOffset%2A> property does not."
  example:
  - "The following example uses the <xref:System.TimeZoneInfo.BaseUtcOffset%2A> property to display the difference between the local time and Coordinated Universal Time (UTC).  \n  \n [[System.TimeZone2.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#1)]\n [-vb[System.TimeZone2.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#1)]"
  syntax:
    content: public TimeSpan BaseUtcOffset { get; }
    return:
      type: System.TimeSpan
      description: An object that indicates the time difference between the current time zone's standard time and Coordinated Universal Time (UTC).
    content.csharp: public TimeSpan BaseUtcOffset { get; }
  overload: System.TimeZoneInfo.BaseUtcOffset*
  exceptions: []
  modifiers.csharp:
  - public
  - get
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.ClearCachedData
  commentId: M:System.TimeZoneInfo.ClearCachedData
  id: ClearCachedData
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: ClearCachedData()
  nameWithType: TimeZoneInfo.ClearCachedData()
  fullName: System.TimeZoneInfo.ClearCachedData()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Clears cached time zone data.
  remarks: "Cached time zone data includes data on the local time zone, the Coordinated Universal Time (UTC) zone, and any time zones that are retrieved by using methods such as <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> and <xref:System.TimeZoneInfo.GetSystemTimeZones%2A>.  \n  \n You might call the <xref:System.TimeZoneInfo.ClearCachedData%2A> method to reduce the memory devoted to the application's cache of time zone information or to reflect the fact that the local system's time zone has changed.  \n  \n Storing references to the local and UTC time zones is not recommended. After the call to the <xref:System.TimeZoneInfo.ClearCachedData%2A> method, these object variables will be undefined <xref:System.TimeZoneInfo> objects that are no longer references to <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> or <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. For example, in the following code, the second call to the <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> method throws an <xref:System.ArgumentException> because the `local` variable is no longer considered equal to <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.  \n  \n [[System.TimeZone2.BestPractices#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/cs/System.TimeZone2.BestPractices.cs#1)]\n [-vb[System.TimeZone2.BestPractices#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/vb/System.TimeZone2.BestPractices.vb#1)]"
  syntax:
    content: public static void ClearCachedData ();
    parameters: []
    content.csharp: public static void ClearCachedData ();
  overload: System.TimeZoneInfo.ClearCachedData*
  exceptions: []
  modifiers.csharp:
  - public
  - static
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)
  commentId: M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)
  id: ConvertTime(System.DateTime,System.TimeZoneInfo)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: ConvertTime(DateTime, TimeZoneInfo)
  nameWithType: TimeZoneInfo.ConvertTime(DateTime, TimeZoneInfo)
  fullName: System.TimeZoneInfo.ConvertTime(DateTime, TimeZoneInfo)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts a time to the time in a particular time zone.
  remarks: "When performing the conversion, the <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> method applies any adjustment rules in effect in the `destinationTimeZone` time zone.  \n  \n This overload of the <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> method determines the source time zone from the value of the `dateTime` parameter's <xref:System.DateTime.Kind%2A> property, as the following table shows.  \n  \n|Kind property value|Source time zone|Method behavior|  \n|-------------------------|----------------------|---------------------|  \n|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Converts the local time to the time in `destinationTimeZone`.|  \n|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Converts Coordinated Universal Time (UTC) to the time in `destinationTimeZone`.|  \n|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Assumed to be <xref:System.TimeZoneInfo.Local%2A>.|Converts the local time to the time in `destinationTimeZone`.|  \n  \n The <xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value is set as shown in the following table.  \n  \n|Condition|Returned Kind property value|  \n|---------------|----------------------------------|  \n|The `destinationTimeZone` is <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  \n|The `destinationTimeZone` is <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  \n|All other date and time values and destination time zones.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  \n  \n If the value of the `dateTime` parameter is an ambiguous local time, it is interpreted as a standard time. If the `dateTime` parameter is an invalid local time, this method throws an <xref:System.ArgumentException>.  \n  \n If the conversion of `dateTime` results in a date and time value that is earlier than <xref:System.DateTime.MinValue?displayProperty=nameWithType> or later than <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, this method returns <xref:System.DateTime.MinValue?displayProperty=nameWithType> or <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, respectively.  \n  \n You can also convert to or from UTC by calling the <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> and <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> methods."
  example:
  - "The following example converts an array of date and time values to times in the Eastern Time zone of the U.S. and Canada. It shows that the source time zone depends on the <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> property of the source <xref:System.DateTime> value. It also illustrates that the <xref:System.TimeZoneInfo.ConvertTime%2A> method takes time zone adjustments into account, because a time zone adjustment occurs in both the source and destination time zones at 2:00 A.M. on November 7, 2010.  \n  \n [[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime1.cs#1)]\n [-vb[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime1.vb#1)]"
  syntax:
    content: public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo destinationTimeZone);
    parameters:
    - id: dateTime
      type: System.DateTime
      description: The date and time to convert.
    - id: destinationTimeZone
      type: System.TimeZoneInfo
      description: The time zone to convert <code>dateTime</code> to.
    return:
      type: System.DateTime
      description: The date and time in the destination time zone.
    content.csharp: public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo destinationTimeZone);
  overload: System.TimeZoneInfo.ConvertTime*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The value of the <code data-dev-comment-type="paramref">dateTime</code> parameter represents an invalid time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The value of the <code data-dev-comment-type="paramref">destinationTimeZone</code> parameter is `null`.
  modifiers.csharp:
  - public
  - static
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  additionalNotes:
    caller: On  systems, this method recognizes only the current adjustment rule when performing the conversion if <code data-dev-comment-type="paramref">dateTime</code> is treated as a local time or if <code data-dev-comment-type="paramref">destinationTimeZone</code> is <xref href="System.TimeZoneInfo.Local"></xref>. As a result, the method may not accurately convert times for periods before the current adjustment rule came into effect. For more information, see the Notes for Callers section in the <xref href="System.TimeZoneInfo.Local"></xref> property.
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)
  commentId: M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)
  id: ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: ConvertTime(DateTimeOffset, TimeZoneInfo)
  nameWithType: TimeZoneInfo.ConvertTime(DateTimeOffset, TimeZoneInfo)
  fullName: System.TimeZoneInfo.ConvertTime(DateTimeOffset, TimeZoneInfo)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts a time to the time in a particular time zone.
  remarks: "When performing the conversion, the <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> method applies any adjustment rules in effect in the `destinationTimeZone` time zone.  \n  \n This overload differs from the other overloads of the <xref:System.TimeZoneInfo.ConvertTime%2A> method by accepting a <xref:System.DateTimeOffset> value as its first parameter. This identifies the date and time as an offset from Coordinated Universal Time (UTC) rather than as the date and time in a particular time zone. As a result, the `dateTimeOffset` parameter cannot represent either an ambiguous time or an invalid time.  \n  \n In converting the `dateTimeOffset` value to the time in the destination time zone, this method takes into account any adjustment rules in effect in the destination time zone.  \n  \n If the conversion of `dateTimeOffset` results in a date and time value that is earlier than <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> or later than <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, this method returns <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> or <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, respectively."
  example:
  - "The following example converts an array of <xref:System.DateTimeOffset> values to times in the Eastern Time zone of the U.S. and Canada. It illustrates that the <xref:System.TimeZoneInfo.ConvertTime%2A> method takes time zone adjustments into account, because a time zone adjustment occurs in both the source and destination time zones at 2:00 A.M. on November 7, 2010.  \n  \n [[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime2.cs#2)]\n [-vb[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime2.vb#2)]"
  syntax:
    content: public static DateTimeOffset ConvertTime (DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone);
    parameters:
    - id: dateTimeOffset
      type: System.DateTimeOffset
      description: The date and time to convert.
    - id: destinationTimeZone
      type: System.TimeZoneInfo
      description: The time zone to convert <code>dateTime</code> to.
    return:
      type: System.DateTimeOffset
      description: The date and time in the destination time zone.
    content.csharp: public static DateTimeOffset ConvertTime (DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone);
  overload: System.TimeZoneInfo.ConvertTime*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The value of the <code data-dev-comment-type="paramref">destinationTimeZone</code> parameter is `null`.
  modifiers.csharp:
  - public
  - static
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  additionalNotes:
    caller: On  systems, this method applies only the current adjustment rule to the time zone conversion if <code data-dev-comment-type="paramref">dateTimeOffset</code> is treated as a local time or if <code data-dev-comment-type="paramref">destinationTimeZone</code> is <xref href="System.TimeZoneInfo.Local"></xref>. As a result, the method may not accurately convert times for periods before the current adjustment rule came into effect. For more information, see the Notes for Callers section in the <xref href="System.TimeZoneInfo.Local"></xref> property.
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)
  commentId: M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)
  id: ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: ConvertTime(DateTime, TimeZoneInfo, TimeZoneInfo)
  nameWithType: TimeZoneInfo.ConvertTime(DateTime, TimeZoneInfo, TimeZoneInfo)
  fullName: System.TimeZoneInfo.ConvertTime(DateTime, TimeZoneInfo, TimeZoneInfo)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Converts a time from one time zone to another.
  remarks: "When performing the conversion, the <xref:System.TimeZoneInfo.ConvertTime%2A> method applies any adjustment rules in effect in the `destinationTimeZone` time zone.  \n  \n The value of the <xref:System.DateTime.Kind%2A> property of the `dateTime` parameter must correspond to the `sourceTimeZone` parameter, as the following table shows.  \n  \n|DateTime.Kind value|sourceTimeZone value|Method behavior|  \n|-------------------------|--------------------------|---------------------|  \n|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Equals <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Converts `dateTime` to the destination time zone's time.|  \n|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Does not equal <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Throws an <xref:System.ArgumentException>.|  \n|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Equals <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Converts `dateTime` to the destination time zone's time.|  \n|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Does not equal <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Throws an <xref:System.ArgumentException>.|  \n|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Any.|Converts `dateTime` to the destination time zone's time.|  \n  \n You can also convert to or from Coordinated Universal Time (UTC) by calling the <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> and <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> methods.  \n  \n The <xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value is set as shown in the following table.  \n  \n|Condition|Returned Kind property value|  \n|---------------|----------------------------------|  \n|The `destinationTimeZone` argument is <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  \n|The `destinationTimeZone` argument is <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  \n|All other date and time values, source time zones, and destination time zones.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  \n  \n If the value of the `dateTime` parameter is an ambiguous time in the source time zone, it is interpreted as a standard time. If the `dateTime` parameter is an invalid time in the source time zone, this method throws an <xref:System.ArgumentException>.  \n  \n If the conversion of `dateTime` results in a date and time value that is earlier than <xref:System.DateTime.MinValue?displayProperty=nameWithType> or later than <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, this method returns <xref:System.DateTime.MinValue?displayProperty=nameWithType> or <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, respectively.  \n  \n The <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> method throws an <xref:System.ArgumentException> exception if the <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> property of the `dateTime` argument is <xref:System.DateTimeKind.Local?displayProperty=nameWithType> but the `sourceTimeZone` argument is not <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. To determine whether the source time zone is the local time zone or the universal time zone, the method tests for reference equality instead of testing for value equality with the <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> method. Note that <xref:System.TimeZoneInfo> objects that represent the local time zone and that are retrieved by calling the <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> method do not have referential equality with <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Furthermore, <xref:System.TimeZoneInfo> objects that represent the local or universal time zone and that are retrieved by iterating the collection returned by the <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> method do not have referential equality with <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> or <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. As an alternative, you can call the <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29> method."
  example:
  - "The following example illustrates the use of the <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> method to convert from Hawaiian Standard Time to local time.  \n  \n [[System.TimeZone2.Concepts#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#9)]\n [-vb[System.TimeZone2.Concepts#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#9)]"
  syntax:
    content: public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone);
    parameters:
    - id: dateTime
      type: System.DateTime
      description: The date and time to convert.
    - id: sourceTimeZone
      type: System.TimeZoneInfo
      description: The time zone of <code>dateTime</code>.
    - id: destinationTimeZone
      type: System.TimeZoneInfo
      description: The time zone to convert <code>dateTime</code> to.
    return:
      type: System.DateTime
      description: The date and time in the destination time zone that corresponds to the <code data-dev-comment-type="paramref">dateTime</code> parameter in the source time zone.
    content.csharp: public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone);
  overload: System.TimeZoneInfo.ConvertTime*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref href=\"System.DateTime.Kind\"></xref> property of the <code data-dev-comment-type=\"paramref\">dateTime</code> parameter is <xref href=\"System.DateTimeKind.Local\"></xref>, but the <code data-dev-comment-type=\"paramref\">sourceTimeZone</code> parameter does not equal <xref href=\"System.DateTimeKind.Local\"></xref>.  \n  \n -or-  \n  \n The <xref href=\"System.DateTime.Kind\"></xref> property of the <code data-dev-comment-type=\"paramref\">dateTime</code> parameter is <xref href=\"System.DateTimeKind.Utc\"></xref>, but the <code data-dev-comment-type=\"paramref\">sourceTimeZone</code> parameter does not equal <xref href=\"System.TimeZoneInfo.Utc\"></xref>.  \n  \n -or-  \n  \n The <code data-dev-comment-type=\"paramref\">dateTime</code> parameter is an invalid time (that is, it represents a time that does not exist because of a time zone's adjustment rules)."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code data-dev-comment-type=\"paramref\">sourceTimeZone</code> parameter is `null`.  \n  \n -or-  \n  \n The <code data-dev-comment-type=\"paramref\">destinationTimeZone</code> parameter is `null`."
  modifiers.csharp:
  - public
  - static
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  additionalNotes:
    caller: On  systems, this method applies only the current adjustment rule when performing the conversion if <code data-dev-comment-type="paramref">dateTime</code> is treated as a local time, if <code data-dev-comment-type="paramref">sourceTimeZone</code> is <xref href="System.TimeZoneInfo.Local"></xref>, or if <code data-dev-comment-type="paramref">destinationTimeZone</code> is <xref href="System.TimeZoneInfo.Local"></xref>. As a result, the method may not accurately convert times for periods before the current adjustment rule came into effect. For more information, see the Notes for Callers section in the <xref href="System.TimeZoneInfo.Local"></xref> property.
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)
  commentId: M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)
  id: ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: ConvertTimeBySystemTimeZoneId(DateTime, String)
  nameWithType: TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime, String)
  fullName: System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime, String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Converts a time to the time in another time zone based on the time zone's identifier.
  remarks: "When performing the conversion, the <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> method applies any adjustment rules in effect in the `destinationTimeZoneId` time zone.  \n  \n This overload is largely identical to calling the <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> method, except that it allows you to specify the destination time zone by its identifier rather than by an object reference. This method is most useful when you must convert a time without retrieving the time zone object that corresponds to it and you do not need to know whether the converted time is standard or daylight saving time.  \n  \n The <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%29> method determines the source time zone from the value of the `dateTime` parameter's <xref:System.DateTime.Kind%2A> property, as the following table shows.  \n  \n|Kind property value|Source time zone|Method behavior|  \n|-------------------------|----------------------|---------------------|  \n|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Converts the local time to the time in `destinationTimeZone`.|  \n|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Converts Coordinated Universal Time (UTC) to the time in `destinationTimeZone`.|  \n|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Assumed to be <xref:System.TimeZoneInfo.Local%2A>.|Converts the local time to the time in `destinationTimeZone`.|  \n  \n The <xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value is set as shown in the following table.  \n  \n|Condition|Returned Kind property value|  \n|---------------|----------------------------------|  \n|The `destinationTimeZone` is `TimeZoneInfo.Utc.Id`.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  \n|Any other `destinationTimeZone` value.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  \n  \n If the value of the `dateTime` parameter is an ambiguous local time, it is interpreted as a standard time. If the `dateTime` parameter is an invalid local time, this method throws an <xref:System.ArgumentException>.  \n  \n If the conversion of `dateTime` results in a date and time value that is earlier than <xref:System.DateTime.MinValue?displayProperty=nameWithType> or later than <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, this method returns <xref:System.DateTime.MinValue?displayProperty=nameWithType> or <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, respectively.  \n  \n This method retrieves the time zone whose identifier is specified by the `destinationTimeZoneId` parameter from the registry. It cannot retrieve a time zone object that is created using the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method. The `destinationTimeZoneId` parameter must correspond exactly to the time zone's registry key in length, but not in case, for a successful match to occur; that is, the comparison of `destinationTimeZoneId` with time zone identifiers is case-insensitive."
  syntax:
    content: public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string destinationTimeZoneId);
    parameters:
    - id: dateTime
      type: System.DateTime
      description: The date and time to convert.
    - id: destinationTimeZoneId
      type: System.String
      description: The identifier of the destination time zone.
    return:
      type: System.DateTime
      description: The date and time in the destination time zone.
    content.csharp: public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string destinationTimeZoneId);
  overload: System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref">destinationTimeZoneId</code> is `null`.
  - type: System.InvalidTimeZoneException
    commentId: T:System.InvalidTimeZoneException
    description: The time zone identifier was found, but the registry data is corrupted.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The process does not have the permissions required to read from the registry key that contains the time zone information.
  - type: System.TimeZoneNotFoundException
    commentId: T:System.TimeZoneNotFoundException
    description: The <code data-dev-comment-type="paramref">destinationTimeZoneId</code> identifier was not found on the local system.
  modifiers.csharp:
  - public
  - static
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)
  commentId: M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)
  id: ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: ConvertTimeBySystemTimeZoneId(DateTimeOffset, String)
  nameWithType: TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTimeOffset, String)
  fullName: System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTimeOffset, String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Converts a time to the time in another time zone based on the time zone's identifier.
  remarks: "When performing the conversion, the <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> method applies any adjustment rules in effect in the `destinationTimeZoneId` time zone.  \n  \n This overload is identical to calling the <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> method, except that it allows you to specify the destination time zone by its identifier rather than by an object reference. This method is most useful when you must convert a time without retrieving the time zone object that corresponds to it and you do not need to know whether the converted time is standard or daylight saving time.  \n  \n Because the `dateTimeOffset` parameter represents a date and time together with that time's offset from Coordinated Universal Time (UTC), it cannot represent either an ambiguous time or an invalid time.  \n  \n This method retrieves the time zone whose identifier is specified by the `destinationTimeZoneId` parameter from the registry. It cannot retrieve a time zone object that is created using the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method. The `destinationTimeZoneId` parameter must correspond exactly to the time zone's registry key in length, but not in case, for a successful match to occur; that is, the comparison of `destinationTimeZoneId` with time zone identifiers is case-insensitive.  \n  \n In converting the `dateTimeOffset` value to the time in the destination time zone, the method takes into account any adjustment rules in effect in the destination time zone.  \n  \n If the conversion of `dateTimeOffset` results in a date and time value that is earlier than <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> or later than <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, this method returns <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> or <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, respectively."
  syntax:
    content: public static DateTimeOffset ConvertTimeBySystemTimeZoneId (DateTimeOffset dateTimeOffset, string destinationTimeZoneId);
    parameters:
    - id: dateTimeOffset
      type: System.DateTimeOffset
      description: The date and time to convert.
    - id: destinationTimeZoneId
      type: System.String
      description: The identifier of the destination time zone.
    return:
      type: System.DateTimeOffset
      description: The date and time in the destination time zone.
    content.csharp: public static DateTimeOffset ConvertTimeBySystemTimeZoneId (DateTimeOffset dateTimeOffset, string destinationTimeZoneId);
  overload: System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref">destinationTimeZoneId</code> is `null`.
  - type: System.InvalidTimeZoneException
    commentId: T:System.InvalidTimeZoneException
    description: The time zone identifier was found but the registry data is corrupted.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The process does not have the permissions required to read from the registry key that contains the time zone information.
  - type: System.TimeZoneNotFoundException
    commentId: T:System.TimeZoneNotFoundException
    description: The <code data-dev-comment-type="paramref">destinationTimeZoneId</code> identifier was not found on the local system.
  modifiers.csharp:
  - public
  - static
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)
  commentId: M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)
  id: ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: ConvertTimeBySystemTimeZoneId(DateTime, String, String)
  nameWithType: TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime, String, String)
  fullName: System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime, String, String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Converts a time from one time zone to another based on time zone identifiers.
  remarks: "When performing the conversion, the <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> method applies any adjustment rules in effect in the `destinationTimeZoneId` time zone.  \n  \n Although it is similar to the <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> method, you can use <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> to specify the source and destination time zones using their identifiers instead of their <xref:System.TimeZoneInfo> objects. This method is most useful when you must convert a time without retrieving the time zone object that corresponds to it and you do not need to know whether the converted time is standard or daylight saving time.  \n  \n This method retrieves the time zones whose identifiers are the `sourceTimeZoneId` and `destinationTimeZoneId` parameters from the registry. It cannot retrieve time zone objects that are created using the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method.  \n  \n The value of the <xref:System.DateTime.Kind%2A> property of the `dateTime` parameter must correspond to the `sourceTimeZoneId` parameter, as the following table shows.  \n  \n|DateTime.Kind value|sourceTimeZone value|Method behavior|  \n|-------------------------|--------------------------|---------------------|  \n|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Equals `TimeZoneInfo.Utc.Id`.|Converts `dateTime` to the destination time zone's time.|  \n|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Does not equal `TimeZoneInfo.Utc.Id`.|Throws an <xref:System.ArgumentException>.|  \n|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Equals `TimeZoneInfo.Local.Id`.|Converts `dateTime` to the destination time zone's time.|  \n|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Does not equal `TimeZoneInfo.Local.Id`.|Throws an <xref:System.ArgumentException>.|  \n|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Any.|Converts `dateTime` to the destination time zone's time.|  \n  \n Because it relies on calls to the <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> method, the <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> method performs a case-insensitive search to locate the time zones that correspond to `sourceTimeZoneId` and `destinationTimeZoneId`.  \n  \n If the value of the `dateTime` parameter is an ambiguous time in the source time zone, it is interpreted as a standard time. If the `dateTime` parameter is an invalid time in the source time zone, this method throws an <xref:System.ArgumentException>.  \n  \n The <xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value is set to <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> unless the destination time zone is Coordinated Universal Time (UTC), in which case it is set to <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>."
  example:
  - "The following example uses the <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> method to display the time that corresponds to the local system time in eight cities of the world.  \n  \n [[System.TimeZone2.Conversions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#3)]\n [-vb[System.TimeZone2.Conversions#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#3)]"
  syntax:
    content: public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId);
    parameters:
    - id: dateTime
      type: System.DateTime
      description: The date and time to convert.
    - id: sourceTimeZoneId
      type: System.String
      description: The identifier of the source time zone.
    - id: destinationTimeZoneId
      type: System.String
      description: The identifier of the destination time zone.
    return:
      type: System.DateTime
      description: The date and time in the destination time zone that corresponds to the <code data-dev-comment-type="paramref">dateTime</code> parameter in the source time zone.
    content.csharp: public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId);
  overload: System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref href=\"System.DateTime.Kind\"></xref> property of the <code data-dev-comment-type=\"paramref\">dateTime</code> parameter does not correspond to the source time zone.  \n  \n -or-  \n  \n <code data-dev-comment-type=\"paramref\">dateTime</code> is an invalid time in the source time zone."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code data-dev-comment-type=\"paramref\">sourceTimeZoneId</code> is `null`.  \n  \n -or-  \n  \n <code data-dev-comment-type=\"paramref\">destinationTimeZoneId</code> is `null`."
  - type: System.InvalidTimeZoneException
    commentId: T:System.InvalidTimeZoneException
    description: The time zone identifiers were found, but the registry data is corrupted.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The user does not have the permissions required to read from the registry keys that hold time zone data.
  - type: System.TimeZoneNotFoundException
    commentId: T:System.TimeZoneNotFoundException
    description: "The <code data-dev-comment-type=\"paramref\">sourceTimeZoneId</code> identifier was not found on the local system.  \n  \n -or-  \n  \n The <code data-dev-comment-type=\"paramref\">destinationTimeZoneId</code> identifier was not found on the local system."
  modifiers.csharp:
  - public
  - static
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)
  commentId: M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)
  id: ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: ConvertTimeFromUtc(DateTime, TimeZoneInfo)
  nameWithType: TimeZoneInfo.ConvertTimeFromUtc(DateTime, TimeZoneInfo)
  fullName: System.TimeZoneInfo.ConvertTimeFromUtc(DateTime, TimeZoneInfo)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Converts a Coordinated Universal Time (UTC) to the time in a specified time zone.
  remarks: "When performing the conversion, the <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> method applies any adjustment rules in effect in the `destinationTimeZone` time zone.  \n  \n The precise behavior of this method depends on the value of the <xref:System.DateTime.Kind%2A> property of the `dateTime` parameter, as the following table shows.  \n  \n|DateTime.Kind property|Conversion|  \n|----------------------------|----------------|  \n|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Throws an <xref:System.ArgumentException>.|  \n|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> or <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Converts from Coordinated Universal Time (UTC).|  \n  \n If the conversion of `dateTime` results in a date and time value that is earlier than <xref:System.DateTime.MinValue?displayProperty=nameWithType> or later than <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, this method returns <xref:System.DateTime.MinValue?displayProperty=nameWithType> or <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, respectively."
  example:
  - "The following example converts Coordinated Universal Time (UTC) to Central Time.  \n  \n [[System.TimeZone2.Concepts#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#8)]\n [-vb[System.TimeZone2.Concepts#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#8)]"
  syntax:
    content: public static DateTime ConvertTimeFromUtc (DateTime dateTime, TimeZoneInfo destinationTimeZone);
    parameters:
    - id: dateTime
      type: System.DateTime
      description: The Coordinated Universal Time (UTC).
    - id: destinationTimeZone
      type: System.TimeZoneInfo
      description: The time zone to convert <code>dateTime</code> to.
    return:
      type: System.DateTime
      description: The date and time in the destination time zone. Its <xref href="System.DateTime.Kind"></xref> property is <xref href="System.DateTimeKind.Utc"></xref> if <code data-dev-comment-type="paramref">destinationTimeZone</code> is <xref href="System.TimeZoneInfo.Utc"></xref>; otherwise, its <xref href="System.DateTime.Kind"></xref> property is <xref href="System.DateTimeKind.Unspecified"></xref>.
    content.csharp: public static DateTime ConvertTimeFromUtc (DateTime dateTime, TimeZoneInfo destinationTimeZone);
  overload: System.TimeZoneInfo.ConvertTimeFromUtc*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <xref href="System.DateTime.Kind"></xref> property of <code data-dev-comment-type="paramref">dateTime</code> is <xref href="System.DateTimeKind.Local"></xref>.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref">destinationTimeZone</code> is `null`.
  modifiers.csharp:
  - public
  - static
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  additionalNotes:
    caller: On  systems, this method applies only the current adjustment rule to the time zone conversion if <code data-dev-comment-type="paramref">destinationTimeZone</code> is <xref href="System.TimeZoneInfo.Local"></xref>. As a result, the method may not accurately convert times for periods before the current adjustment rule came into effect. For more information, see the Notes for Callers section in the <xref href="System.TimeZoneInfo.Local"></xref> property.
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)
  commentId: M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)
  id: ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: ConvertTimeToUtc(DateTime, TimeZoneInfo)
  nameWithType: TimeZoneInfo.ConvertTimeToUtc(DateTime, TimeZoneInfo)
  fullName: System.TimeZoneInfo.ConvertTimeToUtc(DateTime, TimeZoneInfo)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Converts the time in a specified time zone to Coordinated Universal Time (UTC).
  remarks: "If the <xref:System.DateTime.Kind%2A> property of the `dateTime` parameter equals <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> and the `sourceTimeZone` parameter equals <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>, this method returns `dateTime` without performing any conversion.  \n  \n If `dateTime` corresponds to an ambiguous time, this method assumes that it is the standard time of the source time zone. If `dateTime` corresponds to an invalid time, this method throws an <xref:System.ArgumentException>.  \n  \n If the Coordinated Universal Time (UTC) equivalent of `dateTime` is earlier than <xref:System.DateTime.MinValue?displayProperty=nameWithType> or later that <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, this method returns <xref:System.DateTime.MinValue> or <xref:System.DateTime.MaxValue>, respectively."
  example:
  - "The following example retrieves the current date from the local system and converts it to Coordinated Universal Time (UTC), then converts it to Tokyo Standard Time, and finally converts from Tokyo Standard Time back to UTC. Note that the two UTC times are identical.  \n  \n [[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]\n [-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]"
  syntax:
    content: public static DateTime ConvertTimeToUtc (DateTime dateTime, TimeZoneInfo sourceTimeZone);
    parameters:
    - id: dateTime
      type: System.DateTime
      description: The date and time to convert.
    - id: sourceTimeZone
      type: System.TimeZoneInfo
      description: The time zone of <code>dateTime</code>.
    return:
      type: System.DateTime
      description: The Coordinated Universal Time (UTC) that corresponds to the <code data-dev-comment-type="paramref">dateTime</code> parameter. The <xref href="System.DateTime"></xref> object's <xref href="System.DateTime.Kind"></xref> property is always set to <xref href="System.DateTimeKind.Utc"></xref>.
    content.csharp: public static DateTime ConvertTimeToUtc (DateTime dateTime, TimeZoneInfo sourceTimeZone);
  overload: System.TimeZoneInfo.ConvertTimeToUtc*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code data-dev-comment-type=\"paramref\">dateTime</code>\n    `.Kind` is <xref href=\"System.DateTimeKind.Utc\"></xref> and <code data-dev-comment-type=\"paramref\">sourceTimeZone</code> does not equal <xref href=\"System.TimeZoneInfo.Utc\"></xref>.  \n  \n -or-  \n  \n <code data-dev-comment-type=\"paramref\">dateTime</code>`.Kind` is <xref href=\"System.DateTimeKind.Local\"></xref> and <code data-dev-comment-type=\"paramref\">sourceTimeZone</code> does not equal <xref href=\"System.TimeZoneInfo.Local\"></xref>.  \n  \n -or-  \n  \n <code data-dev-comment-type=\"paramref\">sourceTimeZone</code>`.IsInvalidDateTime(`<code data-dev-comment-type=\"paramref\">dateTime</code>`)` returns `true`."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref">sourceTimeZone</code> is `null`.
  modifiers.csharp:
  - public
  - static
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  additionalNotes:
    caller: On  systems, the method applies only the current adjustment rule to the time zone conversion if <code data-dev-comment-type="paramref">sourceTimeZone</code> is <xref href="System.TimeZoneInfo.Local"></xref>. As a result, the method may not accurately convert times for periods before the current adjustment rule came into effect. For more information, see the Notes for Callers section in the <xref href="System.TimeZoneInfo.Local"></xref> property.
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)
  commentId: M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)
  id: ConvertTimeToUtc(System.DateTime)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: ConvertTimeToUtc(DateTime)
  nameWithType: TimeZoneInfo.ConvertTimeToUtc(DateTime)
  fullName: System.TimeZoneInfo.ConvertTimeToUtc(DateTime)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Converts the specified date and time to Coordinated Universal Time (UTC).
  remarks: "The exact conversion performed depends on the value of the <xref:System.DateTime.Kind%2A> property of the `dateTime` parameter, as the following table shows.  \n  \n|DateTime.Kind property|Conversion|  \n|----------------------------|----------------|  \n|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Converts from local time to Coordinated Universal Time (UTC).|  \n|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Assumes `dateTime` is local time and converts from local time to UTC.|  \n|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Returns `dateTime` unchanged.|  \n  \n If `dateTime` corresponds to an ambiguous local time, this method assumes that it is standard local time. If `dateTime` corresponds to an invalid local time, the method throws an <xref:System.ArgumentException>.  \n  \n> [!NOTE]\n>  If the current computer's local time zone includes multiple adjustment rules, this overload of the <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> method can return results that differ from the <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> and <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> methods. <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> always applies the current adjustment rule to time zone conversion, whether or not `dateTime` lies within its date range. And when executing on [[net_v35_long](~/includes/net-v35-long-md.md)], <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> also applies the current adjustment rule to time zone conversion, whether or not `dateTime` lies within its date range.  \n  \n If the UTC equivalent of `dateTime` is earlier than <xref:System.DateTime.MinValue?displayProperty=nameWithType> or later that <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, this method returns <xref:System.DateTime.MinValue> or <xref:System.DateTime.MaxValue>, respectively."
  example:
  - "The following example illustrates the conversion of time values whose <xref:System.DateTime.Kind%2A> property is <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, and <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, respectively. It also illustrates the conversion of ambiguous and invalid times.  \n  \n [[System.TimeZone2.Conversions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#1)]\n [-vb[System.TimeZone2.Conversions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#1)]"
  syntax:
    content: public static DateTime ConvertTimeToUtc (DateTime dateTime);
    parameters:
    - id: dateTime
      type: System.DateTime
      description: The date and time to convert.
    return:
      type: System.DateTime
      description: The Coordinated Universal Time (UTC) that corresponds to the <code data-dev-comment-type="paramref">dateTime</code> parameter. The <xref href="System.DateTime"></xref> value's <xref href="System.DateTime.Kind"></xref> property is always set to <xref href="System.DateTimeKind.Utc"></xref>.
    content.csharp: public static DateTime ConvertTimeToUtc (DateTime dateTime);
  overload: System.TimeZoneInfo.ConvertTimeToUtc*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      `TimeZoneInfo.Local.IsInvalidDateTime(`
          <code data-dev-comment-type="paramref">dateTime</code>
          `)` returns `true`.
  modifiers.csharp:
  - public
  - static
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  additionalNotes:
    caller: On  systems, this method applies only the current adjustment rule to the time zone conversion. As a result, the method may not accurately convert times for periods before the current adjustment rule came into effect. For more information, see the Notes for Callers section in the <xref href="System.TimeZoneInfo.Local"></xref> property.
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)
  commentId: M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)
  id: CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: CreateCustomTimeZone(String, TimeSpan, String, String)
  nameWithType: TimeZoneInfo.CreateCustomTimeZone(String, TimeSpan, String, String)
  fullName: System.TimeZoneInfo.CreateCustomTimeZone(String, TimeSpan, String, String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Creates a custom time zone with a specified identifier, an offset from Coordinated Universal Time (UTC), a display name, and a standard time display name.
  remarks: "This overload of the <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29> method is suitable for creating a time zone that has no adjustments (that is, a time zone that does not support daylight saving time). To define a time zone that includes adjustments for daylight saving time, use either the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> or the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> method.  \n  \n The following table shows the relationship between the parameters that are provided to the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> method and the properties of the <xref:System.TimeZoneInfo> object that are returned by the method call.  \n  \n|CreateCustomTimeZone parameter|TimeZoneInfo property|  \n|------------------------------------|---------------------------|  \n|`id`|<xref:System.TimeZoneInfo.Id%2A>|  \n|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  \n|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  \n|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  \n  \n Typically, the time zone's standard time name and its identifier are the same. However, the length of the time zone's identifier should not exceed 32 characters. The string passed to the `displayName` parameter follows a fairly standard format. The first portion of the display name is the time zone's base offset from Coordinated Universal Time, which is indicated by the acronym GMT (for Greenwich Mean Time), enclosed in parentheses. This is followed by a string that identifies the time zone itself, or one or more of the cities, regions, or countries in the time zone, or both. For example:  \n  \n```  \n(GMT+02:00) Athens, Beirut, Istanbul, Minsk  \n(GMT-02:00) Mid-Atlantic  \n(GMT-07:00) Mountain Time (US & Canada)  \n```"
  example:
  - "The following example creates a custom time zone for the Mawson and Holme Bay regions of Antarctica. It then displays the result of converting the local time to the time in the new time zone.  \n  \n [[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#1)]\n [-vb[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#1)]"
  syntax:
    content: public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName);
    parameters:
    - id: id
      type: System.String
      description: The time zone's identifier.
    - id: baseUtcOffset
      type: System.TimeSpan
      description: An object that represents the time difference between this time zone and Coordinated Universal Time (UTC).
    - id: displayName
      type: System.String
      description: The display name of the new time zone.
    - id: standardDisplayName
      type: System.String
      description: The name of the new time zone's standard time.
    return:
      type: System.TimeZoneInfo
      description: The new time zone.
    content.csharp: public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName);
  overload: System.TimeZoneInfo.CreateCustomTimeZone*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code data-dev-comment-type="paramref">id</code> parameter is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code data-dev-comment-type=\"paramref\">id</code> parameter is an empty string (\"\").  \n  \n -or-  \n  \n The <code data-dev-comment-type=\"paramref\">baseUtcOffset</code> parameter does not represent a whole number of minutes."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code data-dev-comment-type="paramref">baseUtcOffset</code> parameter is greater than 14 hours or less than -14 hours.
  modifiers.csharp:
  - public
  - static
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])
  commentId: M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])
  id: CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: CreateCustomTimeZone(String, TimeSpan, String, String, String, TimeZoneInfo+AdjustmentRule[])
  nameWithType: TimeZoneInfo.CreateCustomTimeZone(String, TimeSpan, String, String, String, TimeZoneInfo+AdjustmentRule[])
  fullName: System.TimeZoneInfo.CreateCustomTimeZone(String, TimeSpan, String, String, String, TimeZoneInfo+AdjustmentRule[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Creates a custom time zone with a specified identifier, an offset from Coordinated Universal Time (UTC), a display name, a standard time name, a daylight saving time name, and daylight saving time rules.
  remarks: "This overload of the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> method is suitable for creating a time zone that supports daylight saving time. To define a time zone that does not support daylight saving time, use either the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> or the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> method.  \n  \n The following table shows the relationship between the parameters that are provided to the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> method and the members of the <xref:System.TimeZoneInfo> object that are returned by the method call.  \n  \n|CreateCustomTimeZone parameter|TimeZoneInfo member|  \n|------------------------------------|-------------------------|  \n|`id`|<xref:System.TimeZoneInfo.Id%2A>|  \n|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  \n|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  \n|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  \n|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A>|  \n|`adjustmentRules`|An array of <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> objects returned by the <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> method.|  \n  \n Typically, the time zone's standard time name and its identifier are the same. However, the length of the time zone's identifier should not exceed 32 characters. The string passed to the `displayName` parameter follows a fairly standard format. The first portion of the display name is the time zone's base offset from Coordinated Universal Time, which is indicated by the acronym GMT (for Greenwich Mean Time), enclosed in parentheses. This is followed by a string that identifies the time zone itself, or one or more of the cities, regions, or countries in the time zone, or both. For example:  \n  \n```  \n(GMT+02:00) Athens, Beirut, Istanbul, Minsk  \n(GMT-02:00) Mid-Atlantic  \n(GMT-07:00) Mountain Time (US & Canada)  \n```  \n  \n The `baseUtcOffset` parameter defines the custom time zone's offset from Coordinated Universal Time (UTC) for all of the time zone's adjustment rules. In other words, the <xref:System.TimeZoneInfo> object model assumes that the time zone's offset from UTC is constant throughout the life of the time zone, and exists independent of particular adjustment rules. To reflect a time zone that has changed its offset from UTC, you must create a new time zone object.  \n  \n A time zone's adjustment rules are defined by doing the following:  \n  \n1.  Calling either the <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> or the <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> method to define the starting and ending transition time for each adjustment rule.  \n  \n2.  Calling the <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> method for each adjustment rule.  \n  \n3.  Assigning the adjustment rules to an array that can be passed as the `adjustmentRules` parameter."
  example:
  - "The following example creates a custom time zone for the Palmer station and Anvers Island in Antarctica. It then converts the local time to the time in the new time zone and displays the result.  \n  \n [[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#2)]\n [-vb[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#2)]"
  syntax:
    content: public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules);
    parameters:
    - id: id
      type: System.String
      description: The time zone's identifier.
    - id: baseUtcOffset
      type: System.TimeSpan
      description: An object that represents the time difference between this time zone and Coordinated Universal Time (UTC).
    - id: displayName
      type: System.String
      description: The display name of the new time zone.
    - id: standardDisplayName
      type: System.String
      description: The new time zone's standard time name.
    - id: daylightDisplayName
      type: System.String
      description: The daylight saving time name of the new time zone.
    - id: adjustmentRules
      type: System.TimeZoneInfo+AdjustmentRule[]
      description: An array that augments the base UTC offset for a particular period.
    return:
      type: System.TimeZoneInfo
      description: A <xref href="System.TimeZoneInfo"></xref> object that represents the new time zone.
    content.csharp: public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules);
  overload: System.TimeZoneInfo.CreateCustomTimeZone*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code data-dev-comment-type="paramref">id</code> parameter is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code data-dev-comment-type=\"paramref\">id</code> parameter is an empty string (\"\").  \n  \n -or-  \n  \n The <code data-dev-comment-type=\"paramref\">baseUtcOffset</code> parameter does not represent a whole number of minutes."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code data-dev-comment-type="paramref">baseUtcOffset</code> parameter is greater than 14 hours or less than -14 hours.
  - type: System.InvalidTimeZoneException
    commentId: T:System.InvalidTimeZoneException
    description: "The adjustment rules specified in the <code data-dev-comment-type=\"paramref\">adjustmentRules</code> parameter overlap.  \n  \n -or-  \n  \n The adjustment rules specified in the <code data-dev-comment-type=\"paramref\">adjustmentRules</code> parameter are not in chronological order.  \n  \n -or-  \n  \n One or more elements in <code data-dev-comment-type=\"paramref\">adjustmentRules</code> are `null`.  \n  \n -or-  \n  \n A date can have multiple adjustment rules applied to it.  \n  \n -or-  \n  \n The sum of the <code data-dev-comment-type=\"paramref\">baseUtcOffset</code> parameter and the <xref href=\"System.TimeZoneInfo.AdjustmentRule.DaylightDelta\"></xref> value of one or more objects in the <code data-dev-comment-type=\"paramref\">adjustmentRules</code> array is greater than 14 hours or less than -14 hours."
  modifiers.csharp:
  - public
  - static
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)
  commentId: M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)
  id: CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: CreateCustomTimeZone(String, TimeSpan, String, String, String, TimeZoneInfo+AdjustmentRule[], Boolean)
  nameWithType: TimeZoneInfo.CreateCustomTimeZone(String, TimeSpan, String, String, String, TimeZoneInfo+AdjustmentRule[], Boolean)
  fullName: System.TimeZoneInfo.CreateCustomTimeZone(String, TimeSpan, String, String, String, TimeZoneInfo+AdjustmentRule[], Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Creates a custom time zone with a specified identifier, an offset from Coordinated Universal Time (UTC), a display name, a standard time name, a daylight saving time name, daylight saving time rules, and a value that indicates whether the returned object reflects daylight saving time information.
  remarks: "You can use this overload of the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> method to create a custom time zone whose support for daylight saving time can be determined by conditions at run time.  \n  \n The following table shows the relationship between the parameters that are provided to the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> method and the members of the <xref:System.TimeZoneInfo> object that are returned by the method call.  \n  \n|CreateCustomTimeZone parameter|TimeZoneInfo property|  \n|------------------------------------|---------------------------|  \n|`id`|<xref:System.TimeZoneInfo.Id%2A>|  \n|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  \n|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  \n|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  \n|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A> if `disableDaylightSavingTime` is `false`; <xref:System.String.Empty?displayProperty=nameWithType> if `disableDaylightSavingTime` is `true`.|  \n|`adjustmentRules`|An array of <xref:System.TimeZoneInfo.AdjustmentRule> objects returned by the <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> method if `disableDaylightSavingTime` is `false`; an empty array returned by the <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> method if `disableDaylightSavingTime` is `true`.|  \n|`disableDaylightSavingTime`|Not <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>.|  \n  \n Typically, the time zone's standard time name and its identifier are the same. However, the length of the time zone's identifier should not exceed 32 characters. The string passed to the `displayName` parameter follows a fairly standard format. The first portion of the display name is the time zone's base offset from Coordinated Universal Time, which is indicated by the acronym GMT (for Greenwich Mean Time), enclosed in parentheses. This is followed by a string that identifies the time zone itself, or one or more of the cities, regions, or countries in the time zone, or both. For example:  \n  \n```  \n(GMT+02:00) Athens, Beirut, Istanbul, Minsk  \n(GMT-02:00) Mid-Atlantic  \n(GMT-07:00) Mountain Time (US & Canada)  \n```  \n  \n A time zone's adjustment rules are defined by doing the following:  \n  \n1.  Calling either the <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> or the <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> method to define the starting and ending transition rules for each adjustment rule.  \n  \n2.  Calling the <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> method for each adjustment rule.  \n  \n3.  Assigning the adjustment rules to an array that can be passed as the `adjustmentRules` parameter.  \n  \n If `disableDaylightSavingTime` parameter is `false`, the operation of this method is identical to the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> overload. If `disableDaylightSavingTime` is `true`, the returned object includes no adjustment rules and a <xref:System.TimeZoneInfo.DaylightName%2A> property whose value is an empty string."
  example:
  - "The following example creates a custom time zone for the Palmer station and Anvers Island in Antarctica. It sets the `disableDaylightSavingTime` parameter in the call to the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> method to `true`. It then displays the new time zone's daylight saving time name, if one is present, and the number of adjustment rules to confirm that the new time zone has no daylight saving time information.  \n  \n [[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#3)]\n [-vb[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#3)]"
  syntax:
    content: public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);
    parameters:
    - id: id
      type: System.String
      description: The time zone's identifier.
    - id: baseUtcOffset
      type: System.TimeSpan
      description: A <xref href="System.TimeSpan"></xref> object that represents the time difference between this time zone and Coordinated Universal Time (UTC).
    - id: displayName
      type: System.String
      description: The display name of the new time zone.
    - id: standardDisplayName
      type: System.String
      description: The standard time name of the new time zone.
    - id: daylightDisplayName
      type: System.String
      description: The daylight saving time name of the new time zone.
    - id: adjustmentRules
      type: System.TimeZoneInfo+AdjustmentRule[]
      description: An array of <xref href="System.TimeZoneInfo.AdjustmentRule"></xref> objects that augment the base UTC offset for a particular period.
    - id: disableDaylightSavingTime
      type: System.Boolean
      description: '`true` to discard any daylight saving time-related information present in <code>adjustmentRules</code> with the new object; otherwise, `false`.'
    return:
      type: System.TimeZoneInfo
      description: The new time zone. If the <code data-dev-comment-type="paramref">disableDaylightSavingTime</code> parameter is `true`, the returned object has no daylight saving time data.
    content.csharp: public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);
  overload: System.TimeZoneInfo.CreateCustomTimeZone*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code data-dev-comment-type="paramref">id</code> parameter is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code data-dev-comment-type=\"paramref\">id</code> parameter is an empty string (\"\").  \n  \n -or-  \n  \n The <code data-dev-comment-type=\"paramref\">baseUtcOffset</code> parameter does not represent a whole number of minutes."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code data-dev-comment-type="paramref">baseUtcOffset</code> parameter is greater than 14 hours or less than -14 hours.
  - type: System.InvalidTimeZoneException
    commentId: T:System.InvalidTimeZoneException
    description: "The adjustment rules specified in the <code data-dev-comment-type=\"paramref\">adjustmentRules</code> parameter overlap.  \n  \n -or-  \n  \n The adjustment rules specified in the <code data-dev-comment-type=\"paramref\">adjustmentRules</code> parameter are not in chronological order.  \n  \n -or-  \n  \n One or more elements in <code data-dev-comment-type=\"paramref\">adjustmentRules</code> are `null`.  \n  \n -or-  \n  \n A date can have multiple adjustment rules applied to it.  \n  \n -or-  \n  \n The sum of the <code data-dev-comment-type=\"paramref\">baseUtcOffset</code> parameter and the <xref href=\"System.TimeZoneInfo.AdjustmentRule.DaylightDelta\"></xref> value of one or more objects in the <code data-dev-comment-type=\"paramref\">adjustmentRules</code> array is greater than 14 hours or less than -14 hours."
  modifiers.csharp:
  - public
  - static
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.DaylightName
  commentId: P:System.TimeZoneInfo.DaylightName
  id: DaylightName
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: DaylightName
  nameWithType: TimeZoneInfo.DaylightName
  fullName: System.TimeZoneInfo.DaylightName
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets the display name for the current time zone's daylight saving time.
  remarks: "The display name is localized based on the culture installed with the Windows operating system.  \n  \n A <xref:System.TimeZoneInfo.DaylightName%2A> property whose value is not <xref:System.String.Empty?displayProperty=nameWithType> or `null` does not necessarily indicate that the time zone supports daylight saving time. To determine whether the time zone supports daylight saving time, check the value of its <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> property.  \n  \n In most cases, the <xref:System.TimeZoneInfo.DaylightName%2A> property of time zones defined in the registry is not <xref:System.String.Empty?displayProperty=nameWithType> or `null`. However, the <xref:System.TimeZoneInfo.DaylightName%2A> property of custom time zones can be set to <xref:System.String.Empty?displayProperty=nameWithType>. This occurs when custom time zones are created by the <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> or the <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%2CSystem.Boolean%29?displayProperty=nameWithType> overload and the `disableDaylightSavingTime` parameter is `true`. Therefore, your code should never assume that the value of the <xref:System.TimeZoneInfo.DaylightName%2A> property is not `null` or empty.  \n  \n The <xref:System.TimeZoneInfo.DaylightName%2A> property is equivalent to the <xref:System.TimeZone.DaylightName%2A> property of the <xref:System.TimeZone> class."
  example:
  - "The following example defines a method named `DisplayDateWithTimeZoneName` that uses the <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> method to determine whether to display a time zone's standard time name or daylight saving time name.  \n  \n [[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]\n [-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]"
  syntax:
    content: public string DaylightName { get; }
    return:
      type: System.String
      description: The display name for the time zone's daylight saving time.
    content.csharp: public string DaylightName { get; }
  overload: System.TimeZoneInfo.DaylightName*
  exceptions: []
  modifiers.csharp:
  - public
  - get
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.DisplayName
  commentId: P:System.TimeZoneInfo.DisplayName
  id: DisplayName
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: DisplayName
  nameWithType: TimeZoneInfo.DisplayName
  fullName: System.TimeZoneInfo.DisplayName
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets the general display name that represents the time zone.
  remarks: "The display name is localized based on the culture installed with the Windows operating system.  \n  \n Time zone display names for Windows system time zones follow a fairly standard format. The first portion of the display name is the time zone's base offset from Coordinated Universal Time, which is indicated by the acronym GMT (for Greenwich Mean Time), enclosed in parentheses. For Coordinated Universal Time, the GMT acronym with no offset is enclosed in parentheses.  This is followed by a string that identifies the time zone or one or more of the cities, regions, or countries in the time zone. For example:  \n  \n```  \n(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London  \n(GMT+02:00) Athens, Beirut, Istanbul, Minsk  \n(GMT-02:00) Mid-Atlantic  \n(GMT-07:00) Mountain Time (US & Canada)  \n```"
  example:
  - "The following example retrieves a <xref:System.TimeZoneInfo> object that represents the local time zone and outputs its display name, standard time name, and daylight saving time name. The output is displayed for a system in the U.S. Pacific Standard Time zone.  \n  \n [[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]\n [-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]"
  syntax:
    content: public string DisplayName { get; }
    return:
      type: System.String
      description: The time zone's general display name.
    content.csharp: public string DisplayName { get; }
  overload: System.TimeZoneInfo.DisplayName*
  exceptions: []
  modifiers.csharp:
  - public
  - get
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.Equals(System.Object)
  commentId: M:System.TimeZoneInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: TimeZoneInfo.Equals(Object)
  fullName: System.TimeZoneInfo.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Determines whether the current <xref href="System.TimeZoneInfo"></xref> object and another object are equal.
  remarks: "This method converts or casts `obj` to a <xref:System.TimeZoneInfo> object and compares it with the current instance. The test for equality is based on a comparison of values. The current <xref:System.TimeZoneInfo> instance and `obj` are considered to be equal under the following conditions:  \n  \n-   The run-time type of `obj` is <xref:System.TimeZoneInfo>.  \n  \n-   The two objects have the same <xref:System.TimeZoneInfo.Id%2A> property value.  \n  \n-   The two objects have the same adjustment rules.  \n  \n If `obj` is `null`, this method returns `false`."
  example:
  - "The following example uses the <xref:System.TimeZoneInfo.Equals%28System.Object%29> method to determine whether the local time zone is Pacific Time or Eastern Time.  \n  \n [[System.TimeZoneInfo.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.equals/cs/equals1.cs#1)]\n [-vb[System.TimeZoneInfo.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.equals/vb/equals1.vb#1)]"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: A second object to compare with the current object.
    return:
      type: System.Boolean
      description: '`true` if <code data-dev-comment-type="paramref">obj</code> is a <xref href="System.TimeZoneInfo"></xref> object that is equal to the current instance; otherwise, `false`.'
    content.csharp: public override bool Equals (object obj);
  overload: System.TimeZoneInfo.Equals*
  exceptions: []
  modifiers.csharp:
  - public
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.Equals(System.TimeZoneInfo)
  commentId: M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)
  id: Equals(System.TimeZoneInfo)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: Equals(TimeZoneInfo)
  nameWithType: TimeZoneInfo.Equals(TimeZoneInfo)
  fullName: System.TimeZoneInfo.Equals(TimeZoneInfo)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Determines whether the current <xref href="System.TimeZoneInfo"></xref> object and another <xref href="System.TimeZoneInfo"></xref> object are equal.
  remarks: "Equality is based on a comparison of values. Two <xref:System.TimeZoneInfo> objects are considered to be equal under the following conditions:  \n  \n-   The value of their <xref:System.TimeZoneInfo.Id%2A> property is the same.  \n  \n-   They have the same adjustment rules.  \n  \n <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> returns the Boolean value that results from evaluating the following expression:  \n  \n ```csharp \n other.Id == this.Id && HasSameRules(other);  \n ```\n  \n ```vb\n other.Id = me.Id AndAlso HasSameRules(other)  \n ```\n\n If the `other` parameter is an uninitialized <xref:System.TimeZoneInfo> object, this method returns `false`."
  example:
  - "The following example uses the <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> method to determine whether the local time zone is Pacific Time or Eastern Time.  \n  \n [[System.TimeZone2.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#7)]\n [-vb[System.TimeZone2.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#7)]"
  syntax:
    content: public bool Equals (TimeZoneInfo other);
    parameters:
    - id: other
      type: System.TimeZoneInfo
      description: A second object to compare with the current object.
    return:
      type: System.Boolean
      description: '`true` if the two <xref href="System.TimeZoneInfo"></xref> objects are equal; otherwise, `false`.'
    content.csharp: public bool Equals (TimeZoneInfo other);
  overload: System.TimeZoneInfo.Equals*
  exceptions: []
  modifiers.csharp:
  - public
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.FindSystemTimeZoneById(System.String)
  commentId: M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)
  id: FindSystemTimeZoneById(System.String)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: FindSystemTimeZoneById(String)
  nameWithType: TimeZoneInfo.FindSystemTimeZoneById(String)
  fullName: System.TimeZoneInfo.FindSystemTimeZoneById(String)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Retrieves a <xref href="System.TimeZoneInfo"></xref> object from the registry based on its identifier.
  remarks: "The `id` parameter must correspond exactly to the time zone's registry key in length, but not in case, for a successful match to occur; that is, the comparison of `id` with time zone identifiers is case-insensitive. If you want to retrieve time zone objects based on partial matches, you can write custom procedures that work with the read-only collection of <xref:System.TimeZoneInfo> objects returned by the <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> method.  \n  \n <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> tries to match `id` to the subkey names of the HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones branch of the registry under Windows XP and Windows Vista. This branch does not necessarily contain a comprehensive list of time zone identifiers. If required by an application, you can create a particular time zone either by calling one of the overloads of the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method or by calling <xref:System.TimeZoneInfo.FromSerializedString%2A> to deserialize a <xref:System.TimeZoneInfo> object that represents the required time zone. However, time zones created by these method calls are not included in the registry and cannot be retrieved using the <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> method. These custom time zones can be accessed only through the object reference returned by the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> or <xref:System.TimeZoneInfo.FromSerializedString%2A> method call."
  example:
  - "The following example uses the <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> method to retrieve the Tokyo Standard Time zone. This <xref:System.TimeZoneInfo> object is then used to convert the local time to the time in Tokyo and to determine whether it is Tokyo Standard Time or Tokyo Daylight Time.  \n  \n [[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]\n [-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]"
  syntax:
    content: public static TimeZoneInfo FindSystemTimeZoneById (string id);
    parameters:
    - id: id
      type: System.String
      description: The time zone identifier, which corresponds to the <xref href="System.TimeZoneInfo.Id"></xref> property.
    return:
      type: System.TimeZoneInfo
      description: An object whose identifier is the value of the <code data-dev-comment-type="paramref">id</code> parameter.
    content.csharp: public static TimeZoneInfo FindSystemTimeZoneById (string id);
  overload: System.TimeZoneInfo.FindSystemTimeZoneById*
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: The system does not have enough memory to hold information about the time zone.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code data-dev-comment-type="paramref">id</code> parameter is `null`.
  - type: System.TimeZoneNotFoundException
    commentId: T:System.TimeZoneNotFoundException
    description: The time zone identifier specified by <code data-dev-comment-type="paramref">id</code> was not found. This means that a registry key whose name matches <code data-dev-comment-type="paramref">id</code> does not exist, or that the key exists but does not contain any time zone data.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The process does not have the permissions required to read from the registry key that contains the time zone information.
  - type: System.InvalidTimeZoneException
    commentId: T:System.InvalidTimeZoneException
    description: The time zone identifier was found, but the registry data is corrupted.
  seealso:
  - linkId: System.TimeZoneInfo.Id
    commentId: P:System.TimeZoneInfo.Id
    altText: Id
  modifiers.csharp:
  - public
  - static
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.FromSerializedString(System.String)
  commentId: M:System.TimeZoneInfo.FromSerializedString(System.String)
  id: FromSerializedString(System.String)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: FromSerializedString(String)
  nameWithType: TimeZoneInfo.FromSerializedString(String)
  fullName: System.TimeZoneInfo.FromSerializedString(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Deserializes a string to re-create an original serialized <xref href="System.TimeZoneInfo"></xref> object.
  remarks: There is an alternative to providing all the code required to create a time zone that is not found in the registry. You can define a custom time zone and either use the <xref:System.TimeZoneInfo.ToSerializedString%2A> method in a standalone executable or use an application's setup program to save the time zone as a string. The application can then retrieve this string from its storage location and instantiate it using the <xref:System.TimeZoneInfo.FromSerializedString%2A> method.
  example:
  - "The following example tries to retrieve the Antarctica/South Pole time zone from the local system. If it fails, the code tries to retrieve information about the time zone from a text file in the application directory. If this attempt fails, the code creates the time zone and writes information about the time zone to the text file.  \n  \n [[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]\n [-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]"
  syntax:
    content: public static TimeZoneInfo FromSerializedString (string source);
    parameters:
    - id: source
      type: System.String
      description: The string representation of the serialized <xref href="System.TimeZoneInfo"></xref> object.
    return:
      type: System.TimeZoneInfo
      description: The original serialized object.
    content.csharp: public static TimeZoneInfo FromSerializedString (string source);
  overload: System.TimeZoneInfo.FromSerializedString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code data-dev-comment-type="paramref">source</code> parameter is <xref href="System.String.Empty"></xref>.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code data-dev-comment-type="paramref">source</code> parameter is a null string.
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: The source parameter cannot be deserialized back into a <xref href="System.TimeZoneInfo"></xref> object.
  seealso:
  - linkId: System.TimeZoneInfo.ToSerializedString
    commentId: M:System.TimeZoneInfo.ToSerializedString
    altText: ToSerializedString()
  modifiers.csharp:
  - public
  - static
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.GetAdjustmentRules
  commentId: M:System.TimeZoneInfo.GetAdjustmentRules
  id: GetAdjustmentRules
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: GetAdjustmentRules()
  nameWithType: TimeZoneInfo.GetAdjustmentRules()
  fullName: System.TimeZoneInfo.GetAdjustmentRules()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Retrieves an array of <xref href="System.TimeZoneInfo.AdjustmentRule"></xref> objects that apply to the current <xref href="System.TimeZoneInfo"></xref> object.
  remarks: "The <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> method retrieves an array of <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> objects. Each object in the array defines the effective start and end date of that time zone adjustment, as well as its delta (the exact amount by which the adjustment causes the time to change). In addition, two properties return <xref:System.TimeZoneInfo.TransitionTime?displayProperty=nameWithType> objects that define when each annual transition to and from standard time occurs.  \n  \n If a time zone has multiple adjustment rules, they are generally ordered from earliest (at index 0) to latest (at index <xref:System.Array.Length%2A> – 1).  \n  \n If a time zone has no adjustment rules, the <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> method returns an empty array (an array whose <xref:System.Array.Length%2A> is zero).  \n  \n Any modifications to the elements of the array returned by the <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> method are not reflected in the adjustment rules that belong to a particular time zone. To modify a time zone's adjustment rules (such as to reflect its historical transition to and from daylight saving time) you must create a new time zone with the appropriate adjustment rules, rather than modify the existing one."
  example:
  - "The following example retrieves all time zones that are defined on the local system and displays complete information about their adjustment rules to the console.  \n  \n [[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]\n [-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]"
  syntax:
    content: public TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules ();
    parameters: []
    return:
      type: System.TimeZoneInfo+AdjustmentRule[]
      description: An array of objects for this time zone.
    content.csharp: public TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules ();
  overload: System.TimeZoneInfo.GetAdjustmentRules*
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: The system does not have enough memory to make an in-memory copy of the adjustment rules.
  seealso:
  - linkId: System.TimeZoneInfo.AdjustmentRule
    commentId: T:System.TimeZoneInfo.AdjustmentRule
    altText: System.TimeZoneInfo.AdjustmentRule
  modifiers.csharp:
  - public
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)
  commentId: M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)
  id: GetAmbiguousTimeOffsets(System.DateTime)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: GetAmbiguousTimeOffsets(DateTime)
  nameWithType: TimeZoneInfo.GetAmbiguousTimeOffsets(DateTime)
  fullName: System.TimeZoneInfo.GetAmbiguousTimeOffsets(DateTime)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns information about the possible dates and times that an ambiguous date and time can be mapped to.
  remarks: "The precise behavior of this method depends on the relationship between the <xref:System.DateTime.Kind%2A> property and the <xref:System.TimeZoneInfo> object, as the following table shows.  \n  \n|TimeZoneInfo object type|Kind property value|Behavior|  \n|------------------------------|-------------------------|--------------|  \n|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> or <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Returns ambiguous time offsets for `dateTime`.|  \n|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Converts `dateTime` to the local time, and then returns ambiguous time offsets for that time.|  \n|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|Any value.|Throws an <xref:System.ArgumentException>.|  \n|Any other time zone.|<xref:System.DateTimeKind.Local> or <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Converts `dateTime` to the specified time zone, and then determines whether that time is ambiguous.|  \n|Any other time zone.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Determines whether `dateTime` is ambiguous in the specified time zone.|  \n  \n The order of <xref:System.TimeSpan> objects in the array returned by this method is undefined. However, you can determine which element represents an offset from the time zone's standard time by comparing its value with the time zone's <xref:System.TimeZoneInfo.BaseUtcOffset%2A> property. To map an ambiguous time to a time zone's standard time, see [How to: Resolve Ambiguous Times](~/docs/standard/datetime/resolve-ambiguous-times.md)."
  example:
  - "The following example defines a method named `ShowPossibleUtcTimes` that uses the <xref:System.TimeZoneInfo.GetAmbiguousTimeOffsets%28System.DateTime%29> method to map an ambiguous time to its possible corresponding Coordinated Universal Time (UTC) times.  \n  \n [[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#1)]\n [-vb[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#1)]  \n  \n The method can then be called using code such as the following:  \n  \n [[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#2)]\n [-vb[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#2)]"
  syntax:
    content: public TimeSpan[] GetAmbiguousTimeOffsets (DateTime dateTime);
    parameters:
    - id: dateTime
      type: System.DateTime
      description: A date and time.
    return:
      type: System.TimeSpan[]
      description: An array of objects that represents possible Coordinated Universal Time (UTC) offsets that a particular date and time can be mapped to.
    content.csharp: public TimeSpan[] GetAmbiguousTimeOffsets (DateTime dateTime);
  overload: System.TimeZoneInfo.GetAmbiguousTimeOffsets*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code data-dev-comment-type="paramref">dateTime</code> is not an ambiguous time.
  modifiers.csharp:
  - public
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  additionalNotes:
    caller: On  systems, this method applies only the current adjustment rule when determining whether <code data-dev-comment-type="paramref">dateTime</code> is ambiguous if the current instance is <xref href="System.TimeZoneInfo.Local"></xref>. As a result, the method may not accurately report ambiguous time offsets for periods before the current adjustment rule came into effect. For more information, see the Notes for Callers section in the <xref href="System.TimeZoneInfo.Local"></xref> property.
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)
  commentId: M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)
  id: GetAmbiguousTimeOffsets(System.DateTimeOffset)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: GetAmbiguousTimeOffsets(DateTimeOffset)
  nameWithType: TimeZoneInfo.GetAmbiguousTimeOffsets(DateTimeOffset)
  fullName: System.TimeZoneInfo.GetAmbiguousTimeOffsets(DateTimeOffset)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns information about the possible dates and times that an ambiguous date and time can be mapped to.
  remarks: "The precise behavior of this method depends on the relationship between the <xref:System.DateTimeOffset.Offset%2A> property of the `dateTimeOffset` parameter and the <xref:System.TimeZoneInfo> object. If the value of the <xref:System.DateTimeOffset.Offset%2A> property corresponds to the current time zone's possible offsets from Coordinated Universal Time (UTC) for that date and time, the method returns the possible offsets. Otherwise, it converts `dateTimeOffset` to the time in the current time zone, and then returns the possible offsets of that date and time.  \n  \n The order of <xref:System.TimeSpan> objects in the array returned by this method is undefined. However, you can determine which element represents an offset from the time zone's standard time by comparing its value with the time zone's <xref:System.TimeZoneInfo.BaseUtcOffset%2A> property. To map an ambiguous time to a time zone's standard time, see [How to: Resolve Ambiguous Times](~/docs/standard/datetime/resolve-ambiguous-times.md)."
  syntax:
    content: public TimeSpan[] GetAmbiguousTimeOffsets (DateTimeOffset dateTimeOffset);
    parameters:
    - id: dateTimeOffset
      type: System.DateTimeOffset
      description: A date and time.
    return:
      type: System.TimeSpan[]
      description: An array of objects that represents possible Coordinated Universal Time (UTC) offsets that a particular date and time can be mapped to.
    content.csharp: public TimeSpan[] GetAmbiguousTimeOffsets (DateTimeOffset dateTimeOffset);
  overload: System.TimeZoneInfo.GetAmbiguousTimeOffsets*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code data-dev-comment-type="paramref">dateTimeOffset</code> is not an ambiguous time.
  seealso:
  - linkId: System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)
    commentId: M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)
    altText: IsAmbiguousTime(DateTime)
  modifiers.csharp:
  - public
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  additionalNotes:
    caller: On  systems, this method applies only the current adjustment rule when determining whether <code data-dev-comment-type="paramref">dateTimeOffset</code> is ambiguous if the current instance is <xref href="System.TimeZoneInfo.Local"></xref>. As a result, the method may not accurately report ambiguous time offsets for periods before the current adjustment rule came into effect. For more information, see the Notes for Callers section in the <xref href="System.TimeZoneInfo.Local"></xref> property.
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.GetHashCode
  commentId: M:System.TimeZoneInfo.GetHashCode
  id: GetHashCode
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: TimeZoneInfo.GetHashCode()
  fullName: System.TimeZoneInfo.GetHashCode()
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Serves as a hash function for hashing algorithms and data structures such as hash tables.
  remarks: For additional detail about the <xref:System.TimeZoneInfo.GetHashCode%2A> method, see <xref:System.Object.GetHashCode%2A>.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer that serves as the hash code for this <xref href="System.TimeZoneInfo"></xref> object.
    content.csharp: public override int GetHashCode ();
  overload: System.TimeZoneInfo.GetHashCode*
  exceptions: []
  modifiers.csharp:
  - public
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.GetSystemTimeZones
  commentId: M:System.TimeZoneInfo.GetSystemTimeZones
  id: GetSystemTimeZones
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: GetSystemTimeZones()
  nameWithType: TimeZoneInfo.GetSystemTimeZones()
  fullName: System.TimeZoneInfo.GetSystemTimeZones()
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns a sorted collection of all the time zones about which information is available on the local system.
  remarks: "The <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> method retrieves all available time zone information from the subkeys of the registry's HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones key. If it is unable to successfully retrieve and parse values for particular string properties of individual <xref:System.TimeZoneInfo> objects, this method sets their value to an empty string (\"\").  \n  \n> [!IMPORTANT]\n>  The <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> method returns a collection of <xref:System.TimeZoneInfo> objects only for time zones defined in the registry. It does not include time zones created using the overloads of the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method. These are accessible only through the object reference returned by the time zone creation method.  \n  \n The collection returned by this method is sorted by UTC offset and, for time zones that have the same UTC offset, by the display name using the current culture. For information about the display name, see <xref:System.TimeZoneInfo.DisplayName%2A>.  \n  \n The <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> object returned by this method supports the <xref:System.Collections.Generic.IEnumerable%601> interface, which means that it can be iterated using the `foreach` (in C#) or `For Each…Next` (in Visual Basic) statements. Each iteration of the loop provides the next <xref:System.TimeZoneInfo> object in the collection.  \n  \n The collection of <xref:System.TimeZoneInfo> objects represents time zones defined on the local computer; it does not necessarily provide complete information for all time zones during all time periods. If your application requires time zones not found on the local computer, you can create custom time zones using the overloads of the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method. For more information, see [How to: Create Time Zones Without Adjustment Rules](~/docs/standard/datetime/create-time-zones-without-adjustment-rules.md) and [How to: Create Time Zones with Adjustment Rules](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md).  \n  \n You can also determine whether an individual time zone is defined on the local computer by calling the <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> method and providing the identifier of the time zone you want to retrieve as a parameter."
  example:
  - "The following example retrieves a collection of time zone objects that represent the time zones defined on a computer and writes information about them to a text file.  \n  \n [[System.TimeZone2.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/getsystemtimezones1.cs#6)]\n [-vb[System.TimeZone2.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/getsystemtimezones1.vb#6)]"
  syntax:
    content: public static System.Collections.ObjectModel.ReadOnlyCollection<TimeZoneInfo> GetSystemTimeZones ();
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.TimeZoneInfo}
      description: A read-only collection of <xref href="System.TimeZoneInfo"></xref> objects.
    content.csharp: public static System.Collections.ObjectModel.ReadOnlyCollection<TimeZoneInfo> GetSystemTimeZones ();
  overload: System.TimeZoneInfo.GetSystemTimeZones*
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: There is insufficient memory to store all time zone information.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The user does not have permission to read from the registry keys that contain time zone information.
  modifiers.csharp:
  - public
  - static
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.GetUtcOffset(System.DateTime)
  commentId: M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)
  id: GetUtcOffset(System.DateTime)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: GetUtcOffset(DateTime)
  nameWithType: TimeZoneInfo.GetUtcOffset(DateTime)
  fullName: System.TimeZoneInfo.GetUtcOffset(DateTime)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.
  remarks: "The returned time span includes any differences due to the application of adjustment rules to the current time zone. It differs from the <xref:System.TimeZoneInfo.BaseUtcOffset%2A> property, which returns the difference between Coordinated Universal Time (UTC) and the time zone's standard time and, therefore, does not take adjustment rules into account.  \n  \n If the `dateTime` parameter's <xref:System.DateTime.Kind%2A> property does not correspond to the time zone object, this method performs the necessary conversion before returning a result. For example, this can occur if the <xref:System.DateTime.Kind%2A> property is <xref:System.DateTimeKind.Local?displayProperty=nameWithType> but the time zone object is not the local time zone. If `dateTime` is ambiguous, or if the converted time is ambiguous, this method interprets the ambiguous time as a standard time. If `dateTime` is invalid, this method returns a <xref:System.TimeSpan> object that reflects the difference between UTC and the time zone's standard time.  \n  \n The <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29?displayProperty=nameWithType> method is similar in operation to the <xref:System.TimeZone.GetUtcOffset%2A> method of the <xref:System.TimeZone> class."
  example:
  - "The following example illustrates the use of the <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29> method with different time zones and with date values that have different <xref:System.DateTime.Kind%2A> property values.  \n  \n [[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/cs/System.TimeZone2.GetUtcOffset.cs#1)]\n [-vb[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/vb/System.TimeZone2.GetUtcOffset.vb#1)]"
  syntax:
    content: public TimeSpan GetUtcOffset (DateTime dateTime);
    parameters:
    - id: dateTime
      type: System.DateTime
      description: The date and time to determine the offset for.
    return:
      type: System.TimeSpan
      description: An object that indicates the time difference between the two time zones.
    content.csharp: public TimeSpan GetUtcOffset (DateTime dateTime);
  overload: System.TimeZoneInfo.GetUtcOffset*
  exceptions: []
  seealso:
  - linkId: System.TimeZoneInfo.BaseUtcOffset
    commentId: P:System.TimeZoneInfo.BaseUtcOffset
    altText: BaseUtcOffset
  modifiers.csharp:
  - public
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  additionalNotes:
    caller: On  systems, this method applies only the current adjustment rule when calculating the offset from UTC if the current instance is <xref href="System.TimeZoneInfo.Local"></xref>. As a result, the method may not accurately calculate the difference between the local time and UTC on <code data-dev-comment-type="paramref">dateTime</code>. For more information, see the Notes for Callers section in the <xref href="System.TimeZoneInfo.Local"></xref> property.
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)
  commentId: M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)
  id: GetUtcOffset(System.DateTimeOffset)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: GetUtcOffset(DateTimeOffset)
  nameWithType: TimeZoneInfo.GetUtcOffset(DateTimeOffset)
  fullName: System.TimeZoneInfo.GetUtcOffset(DateTimeOffset)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.
  remarks: The returned time span includes any differences due to the application of adjustment rules to the current time zone. It differs from the <xref:System.TimeZoneInfo.BaseUtcOffset%2A> property, which returns the difference between Coordinated Universal Time (UTC) and the time zone's standard time and, therefore, does not take adjustment rules into account.
  syntax:
    content: public TimeSpan GetUtcOffset (DateTimeOffset dateTimeOffset);
    parameters:
    - id: dateTimeOffset
      type: System.DateTimeOffset
      description: The date and time to determine the offset for.
    return:
      type: System.TimeSpan
      description: An object that indicates the time difference between Coordinated Universal Time (UTC) and the current time zone.
    content.csharp: public TimeSpan GetUtcOffset (DateTimeOffset dateTimeOffset);
  overload: System.TimeZoneInfo.GetUtcOffset*
  exceptions: []
  modifiers.csharp:
  - public
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  additionalNotes:
    caller: On  systems, this method applies only the current adjustment rule when calculating the offset from UTC if the current instance is <xref href="System.TimeZoneInfo.Local"></xref>. As a result, the method may not accurately calculate the difference between the local time and UTC on <code data-dev-comment-type="paramref">dateTimeOffset</code>. For more information, see the Notes for Callers section in the <xref href="System.TimeZoneInfo.Local"></xref> property.
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)
  commentId: M:System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)
  id: HasSameRules(System.TimeZoneInfo)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: HasSameRules(TimeZoneInfo)
  nameWithType: TimeZoneInfo.HasSameRules(TimeZoneInfo)
  fullName: System.TimeZoneInfo.HasSameRules(TimeZoneInfo)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Indicates whether the current object and another <xref href="System.TimeZoneInfo"></xref> object have the same adjustment rules.
  remarks: Like the <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> method, the <xref:System.TimeZoneInfo.HasSameRules%2A> method indicates whether two time zones have the same base offset (as defined by the <xref:System.TimeZoneInfo.BaseUtcOffset%2A> property) and the same adjustment rules. Unlike the <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> method, <xref:System.TimeZoneInfo.HasSameRules%2A> does not compare time zone identifiers (as defined by the <xref:System.TimeZoneInfo.Id%2A> property).
  example:
  - "Typically, a number of time zones defined in the registry have the same offset from Coordinated Universal Time (UTC) and the same adjustment rules. The following example displays a list of these time zones to the console.  \n  \n [[System.TimeZone2.HasSameRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/cs/HasSameRules.cs#1)]\n [-vb[System.TimeZone2.HasSameRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/vb/HasSameRules.vb#1)]"
  syntax:
    content: public bool HasSameRules (TimeZoneInfo other);
    parameters:
    - id: other
      type: System.TimeZoneInfo
      description: A second object to compare with the current <xref href="System.TimeZoneInfo"></xref> object.
    return:
      type: System.Boolean
      description: '`true` if the two time zones have identical adjustment rules and an identical base offset; otherwise, `false`.'
    content.csharp: public bool HasSameRules (TimeZoneInfo other);
  overload: System.TimeZoneInfo.HasSameRules*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code data-dev-comment-type="paramref">other</code> parameter is `null`.
  modifiers.csharp:
  - public
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.Id
  commentId: P:System.TimeZoneInfo.Id
  id: Id
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: Id
  nameWithType: TimeZoneInfo.Id
  fullName: System.TimeZoneInfo.Id
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets the time zone identifier.
  remarks: "The time zone identifier is a key string that uniquely identifies a particular time zone. In Windows XP and Windows Vista, it corresponds to the subkeys of the HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Time Zone branch of the registry. It can be passed as a parameter to the <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> method to retrieve a particular time zone from the registry.  \n  \n> [!IMPORTANT]\n>  Although a key name in the Windows registry can be a maximum of 255 characters, we recommend that an identifier that you assign to a custom time zone be 32 characters or fewer. The longer the identifier, the greater the probability that an incorrect key name will be supplied when retrieving it.  \n  \n The value of the <xref:System.TimeZoneInfo.Id%2A> property is usually, but not always, identical to that of the <xref:System.TimeZoneInfo.StandardName%2A> property. The identifier of the Coordinated Universal Time zone is UTC."
  example:
  - "The following example lists the identifier of each of the time zones defined on the local computer.  \n  \n [[System.TimeZone2.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#5)]\n [-vb[System.TimeZone2.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#5)]"
  syntax:
    content: public string Id { get; }
    return:
      type: System.String
      description: The time zone identifier.
    content.csharp: public string Id { get; }
  overload: System.TimeZoneInfo.Id*
  exceptions: []
  modifiers.csharp:
  - public
  - get
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)
  commentId: M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)
  id: IsAmbiguousTime(System.DateTime)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: IsAmbiguousTime(DateTime)
  nameWithType: TimeZoneInfo.IsAmbiguousTime(DateTime)
  fullName: System.TimeZoneInfo.IsAmbiguousTime(DateTime)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.
  remarks: "An ambiguous time falls within a range of times for the current time zone. This means it can be either a standard time or a time that results from the application of an adjustment rule. Typically, ambiguous times result when the clock is set to return to standard time from daylight saving time. See the Example section for an illustration.  \n  \n Coordinated Universal Time (UTC) has no ambiguous times; neither do time zones that do not support daylight saving time. Therefore, these time zones have no adjustment rules and calls to the <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> method always return `false`.  \n  \n For time zones that do observe daylight saving time, the precise behavior of this method depends on the relationship between the <xref:System.DateTime.Kind%2A> property and the <xref:System.TimeZoneInfo> object, as the following table shows.  \n  \n|TimeZoneInfo object type|Kind property value|Behavior|  \n|------------------------------|-------------------------|--------------|  \n|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> or <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Determines whether the `dateTime` parameter is ambiguous.|  \n|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Converts `dateTime` to the local time and then determines whether that time is ambiguous.|  \n|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType> or <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Returns `false`.|  \n|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|If `dateTime` is ambiguous, assumes it is a standard time, converts it to UTC, and returns `false`.|  \n|Any other time zone.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> or <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Converts `dateTime` to the time in the specified time zone and then determines whether that time is ambiguous.|  \n|Any other time zone.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Determines whether `dateTime` is ambiguous.|"
  example:
  - "In the Pacific Time zone, daylight saving time ends at 2:00 A.M. on November 4, 2007. The following example passes the time at one-minute intervals from 12:59 A.M. on November 4, 2007, to 2:01 A.M. on November 4, 2007, to the <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> method of a <xref:System.TimeZoneInfo> object that represents the Pacific Time zone. The console output indicates that all times from 1:00 A.M. on November 4, 2007, to 1:59 A.M. on November 4, 2007, are ambiguous.  \n  \n [[System.TimeZone2.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#8)]\n [-vb[System.TimeZone2.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#8)]"
  syntax:
    content: public bool IsAmbiguousTime (DateTime dateTime);
    parameters:
    - id: dateTime
      type: System.DateTime
      description: A date and time value.
    return:
      type: System.Boolean
      description: '`true` if the <code data-dev-comment-type="paramref">dateTime</code> parameter is ambiguous; otherwise, `false`.'
    content.csharp: public bool IsAmbiguousTime (DateTime dateTime);
  overload: System.TimeZoneInfo.IsAmbiguousTime*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <xref href="System.DateTime.Kind"></xref> property of the <code data-dev-comment-type="paramref">dateTime</code> value is <xref href="System.DateTimeKind.Local"></xref> and <code data-dev-comment-type="paramref">dateTime</code> is an invalid time.
  seealso:
  - linkId: System.TimeZoneInfo.IsInvalidTime(System.DateTime)
    commentId: M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)
    altText: IsInvalidTime(DateTime)
  modifiers.csharp:
  - public
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  additionalNotes:
    caller: On  systems, this method applies only the current adjustment rule if the current instance is <xref href="System.TimeZoneInfo.Local"></xref>. As a result, the method may not accurately report whether <code data-dev-comment-type="paramref">dateTime</code> is an ambiguous time for periods before the current adjustment rule came into effect. For more information, see the Notes for Callers section in the <xref href="System.TimeZoneInfo.Local"></xref> property.
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)
  commentId: M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)
  id: IsAmbiguousTime(System.DateTimeOffset)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: IsAmbiguousTime(DateTimeOffset)
  nameWithType: TimeZoneInfo.IsAmbiguousTime(DateTimeOffset)
  fullName: System.TimeZoneInfo.IsAmbiguousTime(DateTimeOffset)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.
  remarks: "An ambiguous time falls within a range of times for the current time zone. This means that it can be either a standard time or a time that results from the application of an adjustment rule. Typically, ambiguous times result when the clock is set to return to standard time from daylight saving time. Coordinated Universal Time (UTC) has no ambiguous times; neither do time zones that do not support daylight saving time.  \n  \n The precise behavior of the method depends on the relationship between the <xref:System.DateTimeOffset.Offset%2A> property of the `dateTimeOffset` parameter and the current time zone. If the value of the <xref:System.DateTimeOffset.Offset%2A> property is a possible offset from the UTC of the current time zone, the method determines whether that date and time is ambiguous. Otherwise, it converts `dateTimeOffset` to the time in the current time zone, and then determines whether that date and time is ambiguous."
  syntax:
    content: public bool IsAmbiguousTime (DateTimeOffset dateTimeOffset);
    parameters:
    - id: dateTimeOffset
      type: System.DateTimeOffset
      description: A date and time.
    return:
      type: System.Boolean
      description: '`true` if the <code data-dev-comment-type="paramref">dateTimeOffset</code> parameter is ambiguous in the current time zone; otherwise, `false`.'
    content.csharp: public bool IsAmbiguousTime (DateTimeOffset dateTimeOffset);
  overload: System.TimeZoneInfo.IsAmbiguousTime*
  exceptions: []
  modifiers.csharp:
  - public
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  additionalNotes:
    caller: On  systems, this method applies only the current adjustment rule if the current instance is <xref href="System.TimeZoneInfo.Local"></xref>. As a result, the method may not accurately report whether <code data-dev-comment-type="paramref">dateTimeOffset</code> is an ambiguous time for periods before the current adjustment rule came into effect. For more information, see the Notes for Callers section in the <xref href="System.TimeZoneInfo.Local"></xref> property.
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)
  commentId: M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)
  id: IsDaylightSavingTime(System.DateTimeOffset)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: IsDaylightSavingTime(DateTimeOffset)
  nameWithType: TimeZoneInfo.IsDaylightSavingTime(DateTimeOffset)
  fullName: System.TimeZoneInfo.IsDaylightSavingTime(DateTimeOffset)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Indicates whether a specified date and time falls in the range of daylight saving time for the time zone of the current <xref href="System.TimeZoneInfo"></xref> object.
  remarks: "The return value of <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> is affected by the relationship between the time zone represented by the <xref:System.TimeZoneInfo> object and the <xref:System.DateTimeOffset.Offset%2A> property of the `dateTimeOffset` parameter. If `dateTimeOffset` does not correspond to the current time zone's offset from Coordinated Universal Time (UTC), the method converts that time to the time in the current time zone. It then determines whether that date and time is a daylight saving time.  \n  \n If the time zone represented by the <xref:System.TimeZoneInfo> object does not support daylight saving time, the method always returns `false`. To determine whether a time zone supports daylight saving time, retrieve the value of its <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> property."
  syntax:
    content: public bool IsDaylightSavingTime (DateTimeOffset dateTimeOffset);
    parameters:
    - id: dateTimeOffset
      type: System.DateTimeOffset
      description: A date and time value.
    return:
      type: System.Boolean
      description: '`true` if the <code data-dev-comment-type="paramref">dateTimeOffset</code> parameter is a daylight saving time; otherwise, `false`.'
    content.csharp: public bool IsDaylightSavingTime (DateTimeOffset dateTimeOffset);
  overload: System.TimeZoneInfo.IsDaylightSavingTime*
  exceptions: []
  seealso:
  - linkId: System.TimeZoneInfo.SupportsDaylightSavingTime
    commentId: P:System.TimeZoneInfo.SupportsDaylightSavingTime
    altText: SupportsDaylightSavingTime
  modifiers.csharp:
  - public
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  additionalNotes:
    caller: On  systems, this method applies only the current adjustment rule if the current instance is <xref href="System.TimeZoneInfo.Local"></xref>. As a result, the method may not accurately report whether <code data-dev-comment-type="paramref">dateTimeOffset</code> is a daylight saving time for periods before the current adjustment rule came into effect. For more information, see the Notes for Callers section in the <xref href="System.TimeZoneInfo.Local"></xref> property.
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)
  commentId: M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)
  id: IsDaylightSavingTime(System.DateTime)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: IsDaylightSavingTime(DateTime)
  nameWithType: TimeZoneInfo.IsDaylightSavingTime(DateTime)
  fullName: System.TimeZoneInfo.IsDaylightSavingTime(DateTime)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Indicates whether a specified date and time falls in the range of daylight saving time for the time zone of the current <xref href="System.TimeZoneInfo"></xref> object.
  remarks: "The return value of <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> is affected by the relationship between the time zone represented by the <xref:System.TimeZoneInfo> object and the <xref:System.DateTime.Kind%2A> property of the `dateTime` parameter, as the following table shows.  \n  \n|TimeZoneInfo object|DateTime.Kind property|Result|  \n|-------------------------|----------------------------|------------|  \n|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Local`|Determines whether `dateTime` is daylight saving time.|  \n|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Utc`|Converts `dateTime` from Coordinated Universal Time (UTC) to local time and determines whether it is daylight saving time.|  \n|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Unspecified`|Assumes that `dateTime` represents local time and determines whether it is daylight saving time.|  \n|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|`DateTimeKind.Local`, `DateTimeKind.Unspecified`, or `DateTimeKind.Utc`|Returns `false` (UTC does not support daylight saving time).|  \n|Any other <xref:System.TimeZoneInfo> object.|`DateTimeKind.Local`|Converts the local time to the equivalent time of the <xref:System.TimeZoneInfo> object and then determines whether the latter is daylight saving time.|  \n|Any other <xref:System.TimeZoneInfo> object.|`DateTimeKind.Utc`|Converts UTC to the equivalent time of the <xref:System.TimeZoneInfo> object and then determines whether the latter is daylight saving time.|  \n|Any other <xref:System.TimeZoneInfo> object.|`DateTimeKind.Unspecified`|Determines whether `dateTime` is daylight saving time.|  \n  \n If the time zone represented by the <xref:System.TimeZoneInfo> object does not support daylight saving time, the method always returns `false`. A number of time zones, including <xref:System.TimeZoneInfo.Utc%2A>, do not observe daylight saving time.  To determine whether a time zone supports daylight saving time, retrieve the value of its <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> property.  \n  \n If the `dateTime` parameter specifies an ambiguous time in the current object's time zone, the <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> method interprets `dateTime` as standard time and returns `false` if its <xref:System.DateTime.Kind%2A> property is <xref:System.DateTimeKind.Local?displayProperty=nameWithType> or <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. If the <xref:System.DateTime.Kind%2A> property is <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, this method will select the correct ambiguous time and indicate whether it is a daylight saving time.  \n  \n Because the <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29?displayProperty=nameWithType> method can return `false` for a date and time that is ambiguous (that is, a date and time that can represent either a standard time or a daylight saving time in a particular time zone), the <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29?displayProperty=nameWithType> method can be paired with the <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> method to determine whether a time may be a daylight saving time. Because an ambiguous time is one that can be both a daylight saving time and a standard time, the <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> method can be called first to determine whether a date and time may be a daylight saving time. If the method returns `false`, the <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> method can be called to determine whether the <xref:System.DateTime> value is a daylight saving time. The following example illustrates this technique.  \n  \n [[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#2)]\n [-vb[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#2)]  \n  \n If the `dateTime` parameter specifies an invalid time, the method call throws an <xref:System.ArgumentException> if the value of the `dateTime` parameter's <xref:System.DateTime.Kind%2A> property is <xref:System.DateTimeKind.Local?displayProperty=nameWithType>; otherwise, the method returns `false`.  \n  \n Call the <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> method to determine whether to use a time zone's <xref:System.TimeZoneInfo.StandardName%2A> value or its <xref:System.TimeZoneInfo.DaylightName%2A> value when displaying the time zone name. See the Example section for an illustration."
  example:
  - "The following example defines a method named `DisplayDateWithTimeZoneName` that uses the <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> method to determine whether to display a time zone's standard time name or daylight saving time name.  \n  \n [[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]\n [-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]"
  syntax:
    content: public bool IsDaylightSavingTime (DateTime dateTime);
    parameters:
    - id: dateTime
      type: System.DateTime
      description: A date and time value.
    return:
      type: System.Boolean
      description: '`true` if the <code data-dev-comment-type="paramref">dateTime</code> parameter is a daylight saving time; otherwise, `false`.'
    content.csharp: public bool IsDaylightSavingTime (DateTime dateTime);
  overload: System.TimeZoneInfo.IsDaylightSavingTime*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <xref href="System.DateTime.Kind"></xref> property of the <code data-dev-comment-type="paramref">dateTime</code> value is <xref href="System.DateTimeKind.Local"></xref> and <code data-dev-comment-type="paramref">dateTime</code> is an invalid time.
  seealso:
  - linkId: System.TimeZoneInfo.SupportsDaylightSavingTime
    commentId: P:System.TimeZoneInfo.SupportsDaylightSavingTime
    altText: SupportsDaylightSavingTime
  modifiers.csharp:
  - public
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  additionalNotes:
    caller: On  systems, this method applies only the current adjustment rule if the current instance is <xref href="System.TimeZoneInfo.Local"></xref>. As a result, the method may not accurately report whether <code data-dev-comment-type="paramref">dateTime</code> is a daylight saving time for periods before the current adjustment rule came into effect. For more information, see the Notes for Callers section in the <xref href="System.TimeZoneInfo.Local"></xref> property.
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.IsInvalidTime(System.DateTime)
  commentId: M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)
  id: IsInvalidTime(System.DateTime)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: IsInvalidTime(DateTime)
  nameWithType: TimeZoneInfo.IsInvalidTime(DateTime)
  fullName: System.TimeZoneInfo.IsInvalidTime(DateTime)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Indicates whether a particular date and time is invalid.
  remarks: "An invalid time falls within a range of times for the current time zone that cannot be mapped to Coordinated Universal Time (UTC) due to the application of an adjustment rule. Typically, invalid times occur when the time moves ahead for daylight saving time. See the Example section for an illustration.  \n  \n The value of the <xref:System.DateTime.Kind%2A> property of the `dateTime` parameter affects whether `dateTime` represents an invalid time, as the following table shows.  \n  \n|DateTime.Kind property|TimeZoneInfo object (if applicable)|Behavior|  \n|----------------------------|-------------------------------------------|--------------|  \n|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|Determines whether the time is invalid.|  \n|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> or a non-local time zone.|Converts `dateTime` to the time of the <xref:System.TimeZoneInfo> object and returns `false`.|  \n|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Not applicable.|Assumes `dateTime` is the time of the <xref:System.TimeZoneInfo> object and determines whether it is invalid.|  \n|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Not applicable.|Returns `false`.|"
  example:
  - "In the Pacific Time zone, daylight saving time begins at 2:00 A.M. on April 2, 2006. The following code passes the time at one-minute intervals from 1:59 A.M. on April 2, 2006, to 3:01 A.M. on April 2, 2006, to the <xref:System.TimeZoneInfo.IsInvalidTime%2A> method of a <xref:System.TimeZoneInfo> object that represents the Pacific Time zone. The console output indicates that all times from 2:00 A.M. on April 2, 2006, to 2:59 A.M. on April 2, 2006, are invalid.  \n  \n [[System.TimeZone2.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#9)]\n [-vb[System.TimeZone2.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#9)]"
  syntax:
    content: public bool IsInvalidTime (DateTime dateTime);
    parameters:
    - id: dateTime
      type: System.DateTime
      description: A date and time value.
    return:
      type: System.Boolean
      description: '`true` if <code data-dev-comment-type="paramref">dateTime</code> is invalid; otherwise, `false`.'
    content.csharp: public bool IsInvalidTime (DateTime dateTime);
  overload: System.TimeZoneInfo.IsInvalidTime*
  exceptions: []
  modifiers.csharp:
  - public
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  additionalNotes:
    caller: On  systems, this method applies only the adjustment rule if the current instance is <xref href="System.TimeZoneInfo.Local"></xref>. As a result, the method may not accurately report whether <code data-dev-comment-type="paramref">dateTime</code> is an invalid time for periods before the current adjustment rule came into effect. For more information, see the Notes for Callers section in the <xref href="System.TimeZoneInfo.Local"></xref> property.
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.Local
  commentId: P:System.TimeZoneInfo.Local
  id: Local
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: Local
  nameWithType: TimeZoneInfo.Local
  fullName: System.TimeZoneInfo.Local
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets a <xref href="System.TimeZoneInfo"></xref> object that represents the local time zone.
  remarks: "The local time zone is the time zone on the computer where the code is executing.  \n  \n> [!IMPORTANT]\n>  You should always access the local time zone through the <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> property rather than assigning the local time zone to a <xref:System.TimeZoneInfo> object variable. This prevents the <xref:System.TimeZoneInfo> object variable from being invalidated by a call to the <xref:System.TimeZoneInfo.ClearCachedData%2A> method.  \n  \n The <xref:System.TimeZoneInfo> object returned by the <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> property reflects the setting of the **Automatically adjust clock for daylight saving changes** checkbox or the **Automatically adjust clock for Daylight Saving Time** checkbox in the Control Panel **Date and Time** application for Windows XP and Windows Vista, respectively. If the checkbox is unchecked, the cached copy of the local time zone contains no daylight saving time information. This means that:  \n  \n-   The local time zone's <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> method returns an array whose length is zero.  \n  \n-   The local time zone's <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> property returns `false`.  \n  \n-   The local time zone has no ambiguous or invalid times (all calls to <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> or <xref:System.TimeZoneInfo.IsInvalidTime%2A> return `false`).  \n  \n-   All calls to <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A> with individual local times return false.  \n  \n This is not true, however, if a reference to the local time zone is retrieved using the <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> method.  \n  \n The <xref:System.TimeZoneInfo.Local%2A> property corresponds to the <xref:System.TimeZone.CurrentTimeZone%2A> property of the <xref:System.TimeZone> class."
  example:
  - "The following example retrieves a <xref:System.TimeZoneInfo> object that represents the local time zone and outputs its display name, standard time name, and daylight saving time name.  \n  \n [[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]\n [-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]"
  syntax:
    content: public static TimeZoneInfo Local { get; }
    return:
      type: System.TimeZoneInfo
      description: An object that represents the local time zone.
    content.csharp: public static TimeZoneInfo Local { get; }
  overload: System.TimeZoneInfo.Local*
  exceptions: []
  modifiers.csharp:
  - public
  - static
  - get
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  additionalNotes:
    caller: "In converting dates and times,  recognizes only the current adjustment rule, which it applies to all dates, including down-level dates (that is, dates that are earlier than the starting date of the current adjustment rule). On , to prevent local date and time information provided by the <xref href=\"System.TimeZoneInfo.Local\"></xref> object from diverging from the date and time information displayed in the system tray, the <xref href=\"System.TimeZoneInfo\"></xref> object returned by the <xref href=\"System.TimeZoneInfo.Local\"></xref> property also applies the current adjustment rule to down-level dates. Applications running on  that require historically accurate local date and time calculations must work around this behavior by using the <xref href=\"System.TimeZoneInfo.FindSystemTimeZoneById(System.String)\"></xref> method to retrieve a <xref href=\"System.TimeZoneInfo\"></xref> object that corresponds to the local time zone.  \n  \n The following example provides an illustration for a  system in the U.S. Pacific Time zone. Because the first three method calls all use the local time zone returned by the <xref href=\"System.TimeZoneInfo.Local\"></xref> property, they apply the current time zone adjustment rule (which went into effect in 2007) to a date in 2006. The current adjustment rule provides for the transition to daylight saving time to occur on the second Sunday of March; the previous rule, which was in effect in 2006, provided for the transition to daylight saving time to occur on the first Sunday of April. Only the fourth method call, which uses the <xref href=\"System.TimeZoneInfo.FindSystemTimeZoneById(System.String)\"></xref> method to retrieve the local time zone, accurately performs this historical date and time conversion.  \n  \n [[System.TimeZoneInfo.ConvertTimeToUtc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttimetoutc/cs/converttimetoutc.cs#1)]\n [-vb[System.TimeZoneInfo.ConvertTimeToUtc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttimetoutc/vb/converttimetoutc.vb#1)]"
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.StandardName
  commentId: P:System.TimeZoneInfo.StandardName
  id: StandardName
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: StandardName
  nameWithType: TimeZoneInfo.StandardName
  fullName: System.TimeZoneInfo.StandardName
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets the display name for the time zone's standard time.
  remarks: "The display name is localized based on the culture installed with the Windows operating system.  \n  \n The <xref:System.TimeZoneInfo.StandardName%2A> property is identical to the <xref:System.TimeZone.StandardName%2A> property of the <xref:System.TimeZone> class.  \n  \n If the operating system language is English, the value of the <xref:System.TimeZoneInfo.StandardName%2A> property is usually, but not always, identical to that of the <xref:System.TimeZoneInfo.Id%2A> property."
  example:
  - "The following example defines a method named `DisplayDateWithTimeZoneName` that uses the <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> method to determine whether to display a time zone's standard time name or daylight saving time name.  \n  \n [[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]\n [-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]"
  syntax:
    content: public string StandardName { get; }
    return:
      type: System.String
      description: The display name of the time zone's standard time.
    content.csharp: public string StandardName { get; }
  overload: System.TimeZoneInfo.StandardName*
  exceptions: []
  modifiers.csharp:
  - public
  - get
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.SupportsDaylightSavingTime
  commentId: P:System.TimeZoneInfo.SupportsDaylightSavingTime
  id: SupportsDaylightSavingTime
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  - powershell
  name: SupportsDaylightSavingTime
  nameWithType: TimeZoneInfo.SupportsDaylightSavingTime
  fullName: System.TimeZoneInfo.SupportsDaylightSavingTime
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets a value indicating whether the time zone has any daylight saving time rules.
  remarks: The value of the <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> property for the local time zone returned by the <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> property reflects the setting of the Control Panel **Date and Time** application's checkbox that defines whether the system automatically adjusts for daylight saving time. If it is unchecked, or if no checkbox is displayed for a time zone, the value of this property is `false`.
  example:
  - "The following example retrieves a collection of all time zones that are available on a local system and displays the names of those that do not support daylight saving time.  \n  \n [[System.TimeZone2.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#4)]\n [-vb[System.TimeZone2.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#4)]\n [-powershell[System.TimeZone2.Class#4](~/samples/snippets/powershell/VS_Snippets_CLR_System/System.TimeZone2.Class/PS/Timezone2_Examples.ps1)]"
  syntax:
    content: public bool SupportsDaylightSavingTime { get; }
    return:
      type: System.Boolean
      description: '`true` if the time zone supports daylight saving time; otherwise, `false`.'
    content.csharp: public bool SupportsDaylightSavingTime { get; }
  overload: System.TimeZoneInfo.SupportsDaylightSavingTime*
  exceptions: []
  modifiers.csharp:
  - public
  - get
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.ToSerializedString
  commentId: M:System.TimeZoneInfo.ToSerializedString
  id: ToSerializedString
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: ToSerializedString()
  nameWithType: TimeZoneInfo.ToSerializedString()
  fullName: System.TimeZoneInfo.ToSerializedString()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Converts the current <xref href="System.TimeZoneInfo"></xref> object to a serialized string.
  remarks: "Applications that rely on time zones that are not typically defined in the registry of Windows systems can use the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method to instantiate the necessary time zones as <xref:System.TimeZoneInfo> objects. The application can then call the <xref:System.TimeZoneInfo.ToSerializedString%2A> method to convert the time zone object to a string.  \n  \n The <xref:System.TimeZoneInfo> object should also be stored in a location where the application can retrieve it when needed. Possible locations include:  \n  \n-   The registry.  \n  \n-   An application resource file.  \n  \n-   An external file, such as a text file."
  example:
  - "The following example tries to retrieve the Antarctica/South Pole time zone from the local system. If it fails, the code tries to retrieve information about the time zone from a text file in the application directory. If this attempt fails, the code creates the time zone and writes information about it to the text file.  \n  \n [[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]\n [-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]"
  syntax:
    content: public string ToSerializedString ();
    parameters: []
    return:
      type: System.String
      description: A string that represents the current <xref href="System.TimeZoneInfo"></xref> object.
    content.csharp: public string ToSerializedString ();
  overload: System.TimeZoneInfo.ToSerializedString*
  exceptions: []
  seealso:
  - linkId: System.TimeZoneInfo.FromSerializedString(System.String)
    commentId: M:System.TimeZoneInfo.FromSerializedString(System.String)
    altText: FromSerializedString(String)
  modifiers.csharp:
  - public
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.ToString
  commentId: M:System.TimeZoneInfo.ToString
  id: ToString
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: ToString()
  nameWithType: TimeZoneInfo.ToString()
  fullName: System.TimeZoneInfo.ToString()
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns the current <xref href="System.TimeZoneInfo"></xref> object's display name.
  remarks: 'When assigning a collection that contains <xref:System.TimeZoneInfo> objects to a list control such as the <xref:System.Windows.Forms.ListBox> control, the control automatically calls the <xref:System.TimeZoneInfo.ToString%2A> method to extract a string that describes each object to be represented in the list. As a result, you do not need to store a meaningful description of the object as a string, and the user does not need to use that string to extract the object from the collection. See [How to: Enumerate Time Zones Present on a Computer](~/docs/standard/datetime/enumerate-time-zones.md) for more detail.'
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: The value of the <xref href="System.TimeZoneInfo.DisplayName"></xref> property of the current <xref href="System.TimeZoneInfo"></xref> object.
    content.csharp: public override string ToString ();
  overload: System.TimeZoneInfo.ToString*
  exceptions: []
  modifiers.csharp:
  - public
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.Utc
  commentId: P:System.TimeZoneInfo.Utc
  id: Utc
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: Utc
  nameWithType: TimeZoneInfo.Utc
  fullName: System.TimeZoneInfo.Utc
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets a <xref href="System.TimeZoneInfo"></xref> object that represents the Coordinated Universal Time (UTC) zone.
  remarks: "This is a built-in object; information about this <xref:System.TimeZoneInfo> object is not retrieved from the registry.  \n  \n> [!IMPORTANT]\n>  You should always access the Coordinated Universal Time (UTC) zone through the <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> property rather than assigning the UTC time zone to a <xref:System.TimeZoneInfo> object variable. This prevents the <xref:System.TimeZoneInfo> object variable from being invalidated by a call to the <xref:System.TimeZoneInfo.ClearCachedData%2A> method.  \n  \n Coordinated Universal Time was previously known as Greenwich Mean Time (GMT)."
  example:
  - "The following example retrieves a <xref:System.TimeZoneInfo> object that represents Coordinated Universal Time (UTC) and outputs its display name, standard time name, and daylight saving time name.  \n  \n [[System.TimeZone2.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#3)]\n [-vb[System.TimeZone2.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#3)]"
  syntax:
    content: public static TimeZoneInfo Utc { get; }
    return:
      type: System.TimeZoneInfo
      description: An object that represents the Coordinated Universal Time (UTC) zone.
    content.csharp: public static TimeZoneInfo Utc { get; }
  overload: System.TimeZoneInfo.Utc*
  exceptions: []
  modifiers.csharp:
  - public
  - static
  - get
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  commentId: M:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  id: System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  isEii: true
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: IDeserializationCallback.OnDeserialization(Object)
  nameWithType: TimeZoneInfo.IDeserializationCallback.OnDeserialization(Object)
  fullName: System.TimeZoneInfo.IDeserializationCallback.OnDeserialization(Object)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Runs when the deserialization of an object has been completed.
  syntax:
    content: void IDeserializationCallback.OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: The object that initiated the callback. The functionality for this parameter is not currently implemented.
    content.csharp: void IDeserializationCallback.OnDeserialization (object sender);
  overload: System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  exceptions:
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: The <xref href="System.TimeZoneInfo"></xref> object contains invalid or corrupted data.
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: System.TimeZoneInfo
  langs:
  - csharp
  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: TimeZoneInfo.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.TimeZoneInfo.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Populates a <xref href="System.Runtime.Serialization.SerializationInfo"></xref> object with the data needed to serialize the current <xref href="System.TimeZoneInfo"></xref> object.
  syntax:
    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: The <xref href="System.Runtime.Serialization.SerializationInfo"></xref> object to populate with data.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The destination for this serialization (see <xref href="System.Runtime.Serialization.StreamingContext"></xref>).
    content.csharp: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
  overload: System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code data-dev-comment-type="paramref">info</code> parameter is `null`.
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  permissions:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
    description: Requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: System.ArgumentException
  fullName: System.ArgumentException
  type: class
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: System.ArgumentNullException
  fullName: System.ArgumentNullException
  type: class
- uid: System.InvalidTimeZoneException
  parent: System
  isExternal: false
  name: InvalidTimeZoneException
  nameWithType: System.InvalidTimeZoneException
  fullName: System.InvalidTimeZoneException
  type: class
- uid: System.Security.SecurityException
  parent: System.Security
  isExternal: false
  name: SecurityException
  nameWithType: System.Security.SecurityException
  fullName: System.Security.SecurityException
  type: class
- uid: System.TimeZoneNotFoundException
  parent: System
  isExternal: false
  name: TimeZoneNotFoundException
  nameWithType: System.TimeZoneNotFoundException
  fullName: System.TimeZoneNotFoundException
  type: class
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: System.ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  type: class
- uid: System.OutOfMemoryException
  parent: System
  isExternal: false
  name: OutOfMemoryException
  nameWithType: System.OutOfMemoryException
  fullName: System.OutOfMemoryException
  type: class
- uid: System.Runtime.Serialization.SerializationException
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationException
  nameWithType: System.Runtime.Serialization.SerializationException
  fullName: System.Runtime.Serialization.SerializationException
  type: class
- uid: System.TimeZoneInfo.BaseUtcOffset
  parent: System.TimeZoneInfo
  isExternal: false
  name: BaseUtcOffset
  nameWithType: TimeZoneInfo.BaseUtcOffset
  fullName: System.TimeZoneInfo.BaseUtcOffset
  type: property
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.TimeZoneInfo.ClearCachedData
  parent: System.TimeZoneInfo
  isExternal: false
  name: ClearCachedData()
  nameWithType: TimeZoneInfo.ClearCachedData()
  fullName: System.TimeZoneInfo.ClearCachedData()
  type: method
- uid: System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)
  parent: System.TimeZoneInfo
  isExternal: false
  name: ConvertTime(DateTime, TimeZoneInfo)
  nameWithType: TimeZoneInfo.ConvertTime(DateTime, TimeZoneInfo)
  fullName: System.TimeZoneInfo.ConvertTime(DateTime, TimeZoneInfo)
  type: method
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.TimeZoneInfo
  parent: System
  isExternal: false
  name: TimeZoneInfo
  nameWithType: TimeZoneInfo
  fullName: System.TimeZoneInfo
- uid: System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)
  parent: System.TimeZoneInfo
  isExternal: false
  name: ConvertTime(DateTimeOffset, TimeZoneInfo)
  nameWithType: TimeZoneInfo.ConvertTime(DateTimeOffset, TimeZoneInfo)
  fullName: System.TimeZoneInfo.ConvertTime(DateTimeOffset, TimeZoneInfo)
  type: method
- uid: System.DateTimeOffset
  parent: System
  isExternal: false
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)
  parent: System.TimeZoneInfo
  isExternal: false
  name: ConvertTime(DateTime, TimeZoneInfo, TimeZoneInfo)
  nameWithType: TimeZoneInfo.ConvertTime(DateTime, TimeZoneInfo, TimeZoneInfo)
  fullName: System.TimeZoneInfo.ConvertTime(DateTime, TimeZoneInfo, TimeZoneInfo)
  type: method
- uid: System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)
  parent: System.TimeZoneInfo
  isExternal: false
  name: ConvertTimeBySystemTimeZoneId(DateTime, String)
  nameWithType: TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime, String)
  fullName: System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime, String)
  type: method
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)
  parent: System.TimeZoneInfo
  isExternal: false
  name: ConvertTimeBySystemTimeZoneId(DateTimeOffset, String)
  nameWithType: TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTimeOffset, String)
  fullName: System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTimeOffset, String)
  type: method
- uid: System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)
  parent: System.TimeZoneInfo
  isExternal: false
  name: ConvertTimeBySystemTimeZoneId(DateTime, String, String)
  nameWithType: TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime, String, String)
  fullName: System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime, String, String)
  type: method
- uid: System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)
  parent: System.TimeZoneInfo
  isExternal: false
  name: ConvertTimeFromUtc(DateTime, TimeZoneInfo)
  nameWithType: TimeZoneInfo.ConvertTimeFromUtc(DateTime, TimeZoneInfo)
  fullName: System.TimeZoneInfo.ConvertTimeFromUtc(DateTime, TimeZoneInfo)
  type: method
- uid: System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)
  parent: System.TimeZoneInfo
  isExternal: false
  name: ConvertTimeToUtc(DateTime, TimeZoneInfo)
  nameWithType: TimeZoneInfo.ConvertTimeToUtc(DateTime, TimeZoneInfo)
  fullName: System.TimeZoneInfo.ConvertTimeToUtc(DateTime, TimeZoneInfo)
  type: method
- uid: System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)
  parent: System.TimeZoneInfo
  isExternal: false
  name: ConvertTimeToUtc(DateTime)
  nameWithType: TimeZoneInfo.ConvertTimeToUtc(DateTime)
  fullName: System.TimeZoneInfo.ConvertTimeToUtc(DateTime)
  type: method
- uid: System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)
  parent: System.TimeZoneInfo
  isExternal: false
  name: CreateCustomTimeZone(String, TimeSpan, String, String)
  nameWithType: TimeZoneInfo.CreateCustomTimeZone(String, TimeSpan, String, String)
  fullName: System.TimeZoneInfo.CreateCustomTimeZone(String, TimeSpan, String, String)
  type: method
- uid: System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])
  parent: System.TimeZoneInfo
  isExternal: false
  name: CreateCustomTimeZone(String, TimeSpan, String, String, String, TimeZoneInfo+AdjustmentRule[])
  nameWithType: TimeZoneInfo.CreateCustomTimeZone(String, TimeSpan, String, String, String, TimeZoneInfo+AdjustmentRule[])
  fullName: System.TimeZoneInfo.CreateCustomTimeZone(String, TimeSpan, String, String, String, TimeZoneInfo+AdjustmentRule[])
  type: method
- uid: System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)
  parent: System.TimeZoneInfo
  isExternal: false
  name: CreateCustomTimeZone(String, TimeSpan, String, String, String, TimeZoneInfo+AdjustmentRule[], Boolean)
  nameWithType: TimeZoneInfo.CreateCustomTimeZone(String, TimeSpan, String, String, String, TimeZoneInfo+AdjustmentRule[], Boolean)
  fullName: System.TimeZoneInfo.CreateCustomTimeZone(String, TimeSpan, String, String, String, TimeZoneInfo+AdjustmentRule[], Boolean)
  type: method
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.TimeZoneInfo.DaylightName
  parent: System.TimeZoneInfo
  isExternal: false
  name: DaylightName
  nameWithType: TimeZoneInfo.DaylightName
  fullName: System.TimeZoneInfo.DaylightName
  type: property
- uid: System.TimeZoneInfo.DisplayName
  parent: System.TimeZoneInfo
  isExternal: false
  name: DisplayName
  nameWithType: TimeZoneInfo.DisplayName
  fullName: System.TimeZoneInfo.DisplayName
  type: property
- uid: System.TimeZoneInfo.Equals(System.Object)
  parent: System.TimeZoneInfo
  isExternal: false
  name: Equals(Object)
  nameWithType: TimeZoneInfo.Equals(Object)
  fullName: System.TimeZoneInfo.Equals(Object)
  type: method
- uid: System.TimeZoneInfo.Equals(System.TimeZoneInfo)
  parent: System.TimeZoneInfo
  isExternal: false
  name: Equals(TimeZoneInfo)
  nameWithType: TimeZoneInfo.Equals(TimeZoneInfo)
  fullName: System.TimeZoneInfo.Equals(TimeZoneInfo)
  type: method
- uid: System.TimeZoneInfo.FindSystemTimeZoneById(System.String)
  parent: System.TimeZoneInfo
  isExternal: false
  name: FindSystemTimeZoneById(String)
  nameWithType: TimeZoneInfo.FindSystemTimeZoneById(String)
  fullName: System.TimeZoneInfo.FindSystemTimeZoneById(String)
  type: method
- uid: System.TimeZoneInfo.FromSerializedString(System.String)
  parent: System.TimeZoneInfo
  isExternal: false
  name: FromSerializedString(String)
  nameWithType: TimeZoneInfo.FromSerializedString(String)
  fullName: System.TimeZoneInfo.FromSerializedString(String)
  type: method
- uid: System.TimeZoneInfo.GetAdjustmentRules
  parent: System.TimeZoneInfo
  isExternal: false
  name: GetAdjustmentRules()
  nameWithType: TimeZoneInfo.GetAdjustmentRules()
  fullName: System.TimeZoneInfo.GetAdjustmentRules()
  type: method
- uid: System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)
  parent: System.TimeZoneInfo
  isExternal: false
  name: GetAmbiguousTimeOffsets(DateTime)
  nameWithType: TimeZoneInfo.GetAmbiguousTimeOffsets(DateTime)
  fullName: System.TimeZoneInfo.GetAmbiguousTimeOffsets(DateTime)
  type: method
- uid: System.TimeSpan[]
  parent: System
  isExternal: false
  name: TimeSpan[]
  nameWithType: TimeSpan[]
  fullName: System.TimeSpan[]
  spec.csharp:
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)
  parent: System.TimeZoneInfo
  isExternal: false
  name: GetAmbiguousTimeOffsets(DateTimeOffset)
  nameWithType: TimeZoneInfo.GetAmbiguousTimeOffsets(DateTimeOffset)
  fullName: System.TimeZoneInfo.GetAmbiguousTimeOffsets(DateTimeOffset)
  type: method
- uid: System.TimeZoneInfo.GetHashCode
  parent: System.TimeZoneInfo
  isExternal: false
  name: GetHashCode()
  nameWithType: TimeZoneInfo.GetHashCode()
  fullName: System.TimeZoneInfo.GetHashCode()
  type: method
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.TimeZoneInfo.GetSystemTimeZones
  parent: System.TimeZoneInfo
  isExternal: false
  name: GetSystemTimeZones()
  nameWithType: TimeZoneInfo.GetSystemTimeZones()
  fullName: System.TimeZoneInfo.GetSystemTimeZones()
  type: method
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.TimeZoneInfo}
  parent: System.Collections.ObjectModel
  isExternal: false
  name: ReadOnlyCollection<TimeZoneInfo>
  nameWithType: ReadOnlyCollection<TimeZoneInfo>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.TimeZoneInfo>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeZoneInfo
    name: TimeZoneInfo
    nameWithType: TimeZoneInfo
    fullName: System.TimeZoneInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.TimeZoneInfo.GetUtcOffset(System.DateTime)
  parent: System.TimeZoneInfo
  isExternal: false
  name: GetUtcOffset(DateTime)
  nameWithType: TimeZoneInfo.GetUtcOffset(DateTime)
  fullName: System.TimeZoneInfo.GetUtcOffset(DateTime)
  type: method
- uid: System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)
  parent: System.TimeZoneInfo
  isExternal: false
  name: GetUtcOffset(DateTimeOffset)
  nameWithType: TimeZoneInfo.GetUtcOffset(DateTimeOffset)
  fullName: System.TimeZoneInfo.GetUtcOffset(DateTimeOffset)
  type: method
- uid: System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)
  parent: System.TimeZoneInfo
  isExternal: false
  name: HasSameRules(TimeZoneInfo)
  nameWithType: TimeZoneInfo.HasSameRules(TimeZoneInfo)
  fullName: System.TimeZoneInfo.HasSameRules(TimeZoneInfo)
  type: method
- uid: System.TimeZoneInfo.Id
  parent: System.TimeZoneInfo
  isExternal: false
  name: Id
  nameWithType: TimeZoneInfo.Id
  fullName: System.TimeZoneInfo.Id
  type: property
- uid: System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)
  parent: System.TimeZoneInfo
  isExternal: false
  name: IsAmbiguousTime(DateTime)
  nameWithType: TimeZoneInfo.IsAmbiguousTime(DateTime)
  fullName: System.TimeZoneInfo.IsAmbiguousTime(DateTime)
  type: method
- uid: System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)
  parent: System.TimeZoneInfo
  isExternal: false
  name: IsAmbiguousTime(DateTimeOffset)
  nameWithType: TimeZoneInfo.IsAmbiguousTime(DateTimeOffset)
  fullName: System.TimeZoneInfo.IsAmbiguousTime(DateTimeOffset)
  type: method
- uid: System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)
  parent: System.TimeZoneInfo
  isExternal: false
  name: IsDaylightSavingTime(DateTimeOffset)
  nameWithType: TimeZoneInfo.IsDaylightSavingTime(DateTimeOffset)
  fullName: System.TimeZoneInfo.IsDaylightSavingTime(DateTimeOffset)
  type: method
- uid: System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)
  parent: System.TimeZoneInfo
  isExternal: false
  name: IsDaylightSavingTime(DateTime)
  nameWithType: TimeZoneInfo.IsDaylightSavingTime(DateTime)
  fullName: System.TimeZoneInfo.IsDaylightSavingTime(DateTime)
  type: method
- uid: System.TimeZoneInfo.IsInvalidTime(System.DateTime)
  parent: System.TimeZoneInfo
  isExternal: false
  name: IsInvalidTime(DateTime)
  nameWithType: TimeZoneInfo.IsInvalidTime(DateTime)
  fullName: System.TimeZoneInfo.IsInvalidTime(DateTime)
  type: method
- uid: System.TimeZoneInfo.Local
  parent: System.TimeZoneInfo
  isExternal: false
  name: Local
  nameWithType: TimeZoneInfo.Local
  fullName: System.TimeZoneInfo.Local
  type: property
- uid: System.TimeZoneInfo.StandardName
  parent: System.TimeZoneInfo
  isExternal: false
  name: StandardName
  nameWithType: TimeZoneInfo.StandardName
  fullName: System.TimeZoneInfo.StandardName
  type: property
- uid: System.TimeZoneInfo.SupportsDaylightSavingTime
  parent: System.TimeZoneInfo
  isExternal: false
  name: SupportsDaylightSavingTime
  nameWithType: TimeZoneInfo.SupportsDaylightSavingTime
  fullName: System.TimeZoneInfo.SupportsDaylightSavingTime
  type: property
- uid: System.TimeZoneInfo.ToSerializedString
  parent: System.TimeZoneInfo
  isExternal: false
  name: ToSerializedString()
  nameWithType: TimeZoneInfo.ToSerializedString()
  fullName: System.TimeZoneInfo.ToSerializedString()
  type: method
- uid: System.TimeZoneInfo.ToString
  parent: System.TimeZoneInfo
  isExternal: false
  name: ToString()
  nameWithType: TimeZoneInfo.ToString()
  fullName: System.TimeZoneInfo.ToString()
  type: method
- uid: System.TimeZoneInfo.Utc
  parent: System.TimeZoneInfo
  isExternal: false
  name: Utc
  nameWithType: TimeZoneInfo.Utc
  fullName: System.TimeZoneInfo.Utc
  type: property
- uid: System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  parent: System.TimeZoneInfo
  isExternal: false
  name: IDeserializationCallback.OnDeserialization(Object)
  nameWithType: TimeZoneInfo.IDeserializationCallback.OnDeserialization(Object)
  fullName: System.TimeZoneInfo.IDeserializationCallback.OnDeserialization(Object)
  type: method
- uid: System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.TimeZoneInfo
  isExternal: false
  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: TimeZoneInfo.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.TimeZoneInfo.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  type: method
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: false
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.TimeZoneInfo.Equals*
  commentId: Overload:System.TimeZoneInfo.Equals
  parent: System.TimeZoneInfo
  isExternal: false
  name: Equals
  nameWithType: TimeZoneInfo.Equals
  fullName: System.TimeZoneInfo.Equals
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.GetAmbiguousTimeOffsets*
  commentId: Overload:System.TimeZoneInfo.GetAmbiguousTimeOffsets
  parent: System.TimeZoneInfo
  isExternal: false
  name: GetAmbiguousTimeOffsets
  nameWithType: TimeZoneInfo.GetAmbiguousTimeOffsets
  fullName: System.TimeZoneInfo.GetAmbiguousTimeOffsets
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.CreateCustomTimeZone*
  commentId: Overload:System.TimeZoneInfo.CreateCustomTimeZone
  parent: System.TimeZoneInfo
  isExternal: false
  name: CreateCustomTimeZone
  nameWithType: TimeZoneInfo.CreateCustomTimeZone
  fullName: System.TimeZoneInfo.CreateCustomTimeZone
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId*
  commentId: Overload:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId
  parent: System.TimeZoneInfo
  isExternal: false
  name: ConvertTimeBySystemTimeZoneId
  nameWithType: TimeZoneInfo.ConvertTimeBySystemTimeZoneId
  fullName: System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.IsAmbiguousTime*
  commentId: Overload:System.TimeZoneInfo.IsAmbiguousTime
  parent: System.TimeZoneInfo
  isExternal: false
  name: IsAmbiguousTime
  nameWithType: TimeZoneInfo.IsAmbiguousTime
  fullName: System.TimeZoneInfo.IsAmbiguousTime
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.IsDaylightSavingTime*
  commentId: Overload:System.TimeZoneInfo.IsDaylightSavingTime
  parent: System.TimeZoneInfo
  isExternal: false
  name: IsDaylightSavingTime
  nameWithType: TimeZoneInfo.IsDaylightSavingTime
  fullName: System.TimeZoneInfo.IsDaylightSavingTime
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.ConvertTime*
  commentId: Overload:System.TimeZoneInfo.ConvertTime
  parent: System.TimeZoneInfo
  isExternal: false
  name: ConvertTime
  nameWithType: TimeZoneInfo.ConvertTime
  fullName: System.TimeZoneInfo.ConvertTime
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.GetUtcOffset*
  commentId: Overload:System.TimeZoneInfo.GetUtcOffset
  parent: System.TimeZoneInfo
  isExternal: false
  name: GetUtcOffset
  nameWithType: TimeZoneInfo.GetUtcOffset
  fullName: System.TimeZoneInfo.GetUtcOffset
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.ConvertTimeToUtc*
  commentId: Overload:System.TimeZoneInfo.ConvertTimeToUtc
  parent: System.TimeZoneInfo
  isExternal: false
  name: ConvertTimeToUtc
  nameWithType: TimeZoneInfo.ConvertTimeToUtc
  fullName: System.TimeZoneInfo.ConvertTimeToUtc
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.BaseUtcOffset*
  commentId: Overload:System.TimeZoneInfo.BaseUtcOffset
  parent: System.TimeZoneInfo
  isExternal: false
  name: BaseUtcOffset
  nameWithType: TimeZoneInfo.BaseUtcOffset
  fullName: System.TimeZoneInfo.BaseUtcOffset
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.ClearCachedData*
  commentId: Overload:System.TimeZoneInfo.ClearCachedData
  parent: System.TimeZoneInfo
  isExternal: false
  name: ClearCachedData
  nameWithType: TimeZoneInfo.ClearCachedData
  fullName: System.TimeZoneInfo.ClearCachedData
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.ConvertTimeFromUtc*
  commentId: Overload:System.TimeZoneInfo.ConvertTimeFromUtc
  parent: System.TimeZoneInfo
  isExternal: false
  name: ConvertTimeFromUtc
  nameWithType: TimeZoneInfo.ConvertTimeFromUtc
  fullName: System.TimeZoneInfo.ConvertTimeFromUtc
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.DaylightName*
  commentId: Overload:System.TimeZoneInfo.DaylightName
  parent: System.TimeZoneInfo
  isExternal: false
  name: DaylightName
  nameWithType: TimeZoneInfo.DaylightName
  fullName: System.TimeZoneInfo.DaylightName
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.DisplayName*
  commentId: Overload:System.TimeZoneInfo.DisplayName
  parent: System.TimeZoneInfo
  isExternal: false
  name: DisplayName
  nameWithType: TimeZoneInfo.DisplayName
  fullName: System.TimeZoneInfo.DisplayName
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.FindSystemTimeZoneById*
  commentId: Overload:System.TimeZoneInfo.FindSystemTimeZoneById
  parent: System.TimeZoneInfo
  isExternal: false
  name: FindSystemTimeZoneById
  nameWithType: TimeZoneInfo.FindSystemTimeZoneById
  fullName: System.TimeZoneInfo.FindSystemTimeZoneById
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.FromSerializedString*
  commentId: Overload:System.TimeZoneInfo.FromSerializedString
  parent: System.TimeZoneInfo
  isExternal: false
  name: FromSerializedString
  nameWithType: TimeZoneInfo.FromSerializedString
  fullName: System.TimeZoneInfo.FromSerializedString
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.GetAdjustmentRules*
  commentId: Overload:System.TimeZoneInfo.GetAdjustmentRules
  parent: System.TimeZoneInfo
  isExternal: false
  name: GetAdjustmentRules
  nameWithType: TimeZoneInfo.GetAdjustmentRules
  fullName: System.TimeZoneInfo.GetAdjustmentRules
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.GetHashCode*
  commentId: Overload:System.TimeZoneInfo.GetHashCode
  parent: System.TimeZoneInfo
  isExternal: false
  name: GetHashCode
  nameWithType: TimeZoneInfo.GetHashCode
  fullName: System.TimeZoneInfo.GetHashCode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.GetSystemTimeZones*
  commentId: Overload:System.TimeZoneInfo.GetSystemTimeZones
  parent: System.TimeZoneInfo
  isExternal: false
  name: GetSystemTimeZones
  nameWithType: TimeZoneInfo.GetSystemTimeZones
  fullName: System.TimeZoneInfo.GetSystemTimeZones
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.HasSameRules*
  commentId: Overload:System.TimeZoneInfo.HasSameRules
  parent: System.TimeZoneInfo
  isExternal: false
  name: HasSameRules
  nameWithType: TimeZoneInfo.HasSameRules
  fullName: System.TimeZoneInfo.HasSameRules
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.Id*
  commentId: Overload:System.TimeZoneInfo.Id
  parent: System.TimeZoneInfo
  isExternal: false
  name: Id
  nameWithType: TimeZoneInfo.Id
  fullName: System.TimeZoneInfo.Id
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.IsInvalidTime*
  commentId: Overload:System.TimeZoneInfo.IsInvalidTime
  parent: System.TimeZoneInfo
  isExternal: false
  name: IsInvalidTime
  nameWithType: TimeZoneInfo.IsInvalidTime
  fullName: System.TimeZoneInfo.IsInvalidTime
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.Local*
  commentId: Overload:System.TimeZoneInfo.Local
  parent: System.TimeZoneInfo
  isExternal: false
  name: Local
  nameWithType: TimeZoneInfo.Local
  fullName: System.TimeZoneInfo.Local
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.StandardName*
  commentId: Overload:System.TimeZoneInfo.StandardName
  parent: System.TimeZoneInfo
  isExternal: false
  name: StandardName
  nameWithType: TimeZoneInfo.StandardName
  fullName: System.TimeZoneInfo.StandardName
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.SupportsDaylightSavingTime*
  commentId: Overload:System.TimeZoneInfo.SupportsDaylightSavingTime
  parent: System.TimeZoneInfo
  isExternal: false
  name: SupportsDaylightSavingTime
  nameWithType: TimeZoneInfo.SupportsDaylightSavingTime
  fullName: System.TimeZoneInfo.SupportsDaylightSavingTime
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.ToSerializedString*
  commentId: Overload:System.TimeZoneInfo.ToSerializedString
  parent: System.TimeZoneInfo
  isExternal: false
  name: ToSerializedString
  nameWithType: TimeZoneInfo.ToSerializedString
  fullName: System.TimeZoneInfo.ToSerializedString
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.ToString*
  commentId: Overload:System.TimeZoneInfo.ToString
  parent: System.TimeZoneInfo
  isExternal: false
  name: ToString
  nameWithType: TimeZoneInfo.ToString
  fullName: System.TimeZoneInfo.ToString
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.Utc*
  commentId: Overload:System.TimeZoneInfo.Utc
  parent: System.TimeZoneInfo
  isExternal: false
  name: Utc
  nameWithType: TimeZoneInfo.Utc
  fullName: System.TimeZoneInfo.Utc
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  commentId: Overload:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization
  parent: System.TimeZoneInfo
  isExternal: false
  name: IDeserializationCallback.OnDeserialization
  nameWithType: TimeZoneInfo.IDeserializationCallback.OnDeserialization
  fullName: System.TimeZoneInfo.IDeserializationCallback.OnDeserialization
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData*
  commentId: Overload:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData
  parent: System.TimeZoneInfo
  isExternal: false
  name: ISerializable.GetObjectData
  nameWithType: TimeZoneInfo.ISerializable.GetObjectData
  fullName: System.TimeZoneInfo.ISerializable.GetObjectData
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7.1
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
  original_ref_skeleton_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo.xml
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(Object, Object)
  type: method
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  type: method
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  type: method
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(Object, Object)
  type: method
- uid: System.IEquatable`1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
- uid: System.IEquatable{System.TimeZoneInfo}
  parent: System
  isExternal: false
  name: IEquatable<TimeZoneInfo>
  nameWithType: IEquatable<TimeZoneInfo>
  fullName: System.IEquatable<System.TimeZoneInfo>
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeZoneInfo
    name: TimeZoneInfo
    nameWithType: TimeZoneInfo
    fullName: System.TimeZoneInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Runtime.Serialization.IDeserializationCallback
  parent: System.Runtime.Serialization
  isExternal: false
  name: IDeserializationCallback
  nameWithType: IDeserializationCallback
  fullName: System.Runtime.Serialization.IDeserializationCallback
- uid: System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: false
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
