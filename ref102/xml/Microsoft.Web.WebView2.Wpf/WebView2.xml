<Type Name="WebView2" FullName="Microsoft.Web.WebView2.Wpf.WebView2">
  <TypeSignature Language="C#" Value="public class WebView2 : System.Windows.Interop.HwndHost" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebView2 extends System.Windows.Interop.HwndHost" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Web.WebView2.Wpf.WebView2" />
  <TypeSignature Language="VB.NET" Value="Public Class WebView2&#xA;Inherits HwndHost" />
  <TypeSignature Language="F#" Value="type WebView2 = class&#xA;    inherit HwndHost" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
    <AssemblyVersion>0.9.628.0</AssemblyVersion>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.664.37</AssemblyVersion>
    <AssemblyVersion>1.0.674.0</AssemblyVersion>
    <AssemblyVersion>1.0.721.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Interop.HwndHost</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             A control to embed web content in a WPF application.
             </summary>
    <remarks>
             This control is effectively a wrapper around the [WebView2 COM
             API](https://aka.ms/webview2). You can directly access the underlying
             ICoreWebView2 interface and all of its functionality by accessing the
             <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2" /> property. Some of the most common COM
             functionality is also accessible directly through wrapper
             methods/properties/events on the control.
            
             Upon creation, the control's <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2" /> property will be
             <c>null</c>. This is because creating the <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2" /> is an
             expensive operation which involves things like launching Edge browser
             processes. There are two ways to cause the <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2" /> to
             be created:
             <list type="bullet"><item><description>
             Call the <see cref="M:Microsoft.Web.WebView2.Wpf.WebView2.EnsureCoreWebView2Async(Microsoft.Web.WebView2.Core.CoreWebView2Environment)" /> method.  This is
             referred to as explicit initialization.
             </description></item><item><description>
             Set the <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.Source" /> property (which could be done from
             markup, for example).  This is referred to as implicit initialization.
             Either option will start initialization in the background and return
             back to the caller without waiting for it to finish.
             To specify options regarding the initialization process, either pass
             your own <see cref="T:Microsoft.Web.WebView2.Core.CoreWebView2Environment" /> to <see cref="M:Microsoft.Web.WebView2.Wpf.WebView2.EnsureCoreWebView2Async(Microsoft.Web.WebView2.Core.CoreWebView2Environment)" /> or set the control's <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CreationProperties" /> property prior to initialization.
             </description></item></list>
            
             When initialization has finished (regardless of how it was triggered or
             whether it succeeded) then the following things will occur, in this
             order:
             <list type="number"><item><description>
             The control's <see cref="E:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2InitializationCompleted" /> event
             will be invoked. If you need to perform one time setup operations on
             the <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2" /> prior to its use then you should
             do so in a handler for that event.
             </description></item><item><description>
             If initialization was successful and a Uri has been set to the <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.Source" /> property then the control will start navigating to it in
             the background (i.e. these steps will continue without waiting for the
             navigation to finish).
             </description></item><item><description>
             The Task returned from <see cref="M:Microsoft.Web.WebView2.Wpf.WebView2.EnsureCoreWebView2Async(Microsoft.Web.WebView2.Core.CoreWebView2Environment)" /> will
             complete.
             </description></item></list>
            
             For more details about any of the methods/properties/events involved in
             the initialization process, see its specific documentation.
            
             Because the control's <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2" /> is a very heavyweight
             object (potentially responsible for multiple running processes and
             megabytes of disk space) the control implements <see cref="T:System.IDisposable" /> to provide an explicit means to free it.
             Calling <see cref="M:Microsoft.Web.WebView2.Wpf.WebView2.Dispose(System.Boolean)" /> will release the <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2" />
             and its underlying resources (except any that are also being used by other
             WebViews), and reset <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2" /> to <c>null</c>. After <see cref="M:Microsoft.Web.WebView2.Wpf.WebView2.Dispose(System.Boolean)" /> has been called the <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2" /> cannot be
             re-initialized, and any attempt to use functionality which requires it
             will throw an <see cref="T:System.ObjectDisposedException" />.
            
             Accelerator key presses (e.g. Ctrl+P) that occur within the control will
             fire standard key press events such as OnKeyDown. You can suppress the
             control's default implementation of an accelerator key press (e.g.
             printing, in the case of Ctrl+P) by setting the Handled property of its
             EventArgs to true. Also note that the underlying browser process is
             blocked while these handlers execute, so:
             <list type="number"><item><description>You should avoid doing a lot of work in these handlers.</description></item><item><description>
             Some of the WebView2 and CoreWebView2 APIs may throw errors if
             invoked within these handlers due to being unable to communicate with
             the browser process.
             </description></item></list>
             If you need to do a lot of work and/or invoke WebView2 APIs in response to
             accelerator keys then consider kicking off a background task or queuing
             the work for later execution on the UI thread.
            
             Note that this control extends <see cref="T:System.Windows.Interop.HwndHost" /> in order to embed
             windows which live outside of the WPF ecosystem. This has some
             implications regarding the control's input and output behavior as well as
             the functionality it "inherits" from <see cref="T:System.Windows.UIElement" /> and <see cref="T:System.Windows.FrameworkElement" />.
             See the <see cref="T:System.Windows.Interop.HwndHost" /> and [WPF/Win32
             interop](https://docs.microsoft.com/dotnet/framework/wpf/advanced/wpf-and-win32-interoperation#hwnds-inside-wpf)
             documentation for more information.
             </remarks>
    <altmember cref="T:System.Windows.Interop.HwndHost" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebView2 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Web.WebView2.Wpf.WebView2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Creates a new instance of a WebView2 control.
            Note that the control's <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2" /> will be null until initialized.
            See the <see cref="T:Microsoft.Web.WebView2.Wpf.WebView2" /> class documentation for an initialization overview.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceleratorKeyPressed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs&gt; AcceleratorKeyPressed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs&gt; AcceleratorKeyPressed" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Web.WebView2.Wpf.WebView2.AcceleratorKeyPressed" />
      <MemberSignature Language="VB.NET" Value="Public Event AcceleratorKeyPressed As EventHandler(Of CoreWebView2AcceleratorKeyPressedEventArgs) " />
      <MemberSignature Language="F#" Value="member this.AcceleratorKeyPressed : EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs&gt; " Usage="member this.AcceleratorKeyPressed : System.EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            AcceleratorKeyPressed dispatches when an accelerator key is pressed and before it gets handled by the WebView2.
            You can write a custom handler to suppress handling by the Webview by doing
            <code>
            e.Handled = true
            </code>
            .
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildWindowCore">
      <MemberSignature Language="C#" Value="protected override System.Runtime.InteropServices.HandleRef BuildWindowCore (System.Runtime.InteropServices.HandleRef hwndParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Runtime.InteropServices.HandleRef BuildWindowCore(valuetype System.Runtime.InteropServices.HandleRef hwndParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Web.WebView2.Wpf.WebView2.BuildWindowCore(System.Runtime.InteropServices.HandleRef)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function BuildWindowCore (hwndParent As HandleRef) As HandleRef" />
      <MemberSignature Language="F#" Value="override this.BuildWindowCore : System.Runtime.InteropServices.HandleRef -&gt; System.Runtime.InteropServices.HandleRef" Usage="webView2.BuildWindowCore hwndParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.HandleRef</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwndParent" Type="System.Runtime.InteropServices.HandleRef" />
      </Parameters>
      <Docs>
        <param name="hwndParent">The HWND that we should use as the parent of the one we create.</param>
        <summary>
            This is overridden from <see cref="T:System.Windows.Interop.HwndHost" /> and is called to instruct us to create our HWND.
            </summary>
        <returns>The HWND that we created.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Interop.HwndHost.BuildWindowCore(System.Runtime.InteropServices.HandleRef)" />
      </Docs>
    </Member>
    <Member MemberName="CanGoBack">
      <MemberSignature Language="C#" Value="public bool CanGoBack { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanGoBack" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Web.WebView2.Wpf.WebView2.CanGoBack" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanGoBack As Boolean" />
      <MemberSignature Language="F#" Value="member this.CanGoBack : bool" Usage="Microsoft.Web.WebView2.Wpf.WebView2.CanGoBack" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns <c>true</c> if the WebView can navigate to a previous page in the navigation history.
            Wrapper around the <see cref="P:Microsoft.Web.WebView2.Core.CoreWebView2.CanGoBack" /> property of <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2" />.
            If <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2" /> isn't initialized yet then returns <c>false</c>.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:Microsoft.Web.WebView2.Core.CoreWebView2.CanGoBack" />
      </Docs>
    </Member>
    <Member MemberName="CanGoBackProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CanGoBackProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CanGoBackProperty" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Web.WebView2.Wpf.WebView2.CanGoBackProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CanGoBackProperty As DependencyProperty " />
      <MemberSignature Language="F#" Value=" staticval mutable CanGoBackProperty : System.Windows.DependencyProperty" Usage="Microsoft.Web.WebView2.Wpf.WebView2.CanGoBackProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The WPF <see cref="T:System.Windows.DependencyProperty" /> which backs the <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CanGoBack" /> property.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanGoForward">
      <MemberSignature Language="C#" Value="public bool CanGoForward { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanGoForward" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Web.WebView2.Wpf.WebView2.CanGoForward" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanGoForward As Boolean" />
      <MemberSignature Language="F#" Value="member this.CanGoForward : bool" Usage="Microsoft.Web.WebView2.Wpf.WebView2.CanGoForward" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns <c>true</c> if the WebView can navigate to a next page in the navigation history.
            Wrapper around the <see cref="P:Microsoft.Web.WebView2.Core.CoreWebView2.CanGoForward" /> property of <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2" />.
            If <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2" /> isn't initialized yet then returns <c>false</c>.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:Microsoft.Web.WebView2.Core.CoreWebView2.CanGoForward" />
      </Docs>
    </Member>
    <Member MemberName="CanGoForwardProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CanGoForwardProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CanGoForwardProperty" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Web.WebView2.Wpf.WebView2.CanGoForwardProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CanGoForwardProperty As DependencyProperty " />
      <MemberSignature Language="F#" Value=" staticval mutable CanGoForwardProperty : System.Windows.DependencyProperty" Usage="Microsoft.Web.WebView2.Wpf.WebView2.CanGoForwardProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The WPF <see cref="T:System.Windows.DependencyProperty" /> which backs the <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CanGoForward" /> property.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentLoading">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs&gt; ContentLoading;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs&gt; ContentLoading" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Web.WebView2.Wpf.WebView2.ContentLoading" />
      <MemberSignature Language="VB.NET" Value="Public Event ContentLoading As EventHandler(Of CoreWebView2ContentLoadingEventArgs) " />
      <MemberSignature Language="F#" Value="member this.ContentLoading : EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs&gt; " Usage="member this.ContentLoading : System.EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A wrapper around the <see cref="E:Microsoft.Web.WebView2.Core.CoreWebView2.ContentLoading" />.
            The only difference between this event and <see cref="E:Microsoft.Web.WebView2.Core.CoreWebView2.ContentLoading" /> is the first parameter that's passed to handlers.
            Handlers of this event will receive the <see cref="T:Microsoft.Web.WebView2.Wpf.WebView2" /> control, whereas handlers of <see cref="E:Microsoft.Web.WebView2.Core.CoreWebView2.ContentLoading" /> will receive the <see cref="T:Microsoft.Web.WebView2.Core.CoreWebView2" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:Microsoft.Web.WebView2.Core.CoreWebView2.ContentLoading" />
      </Docs>
    </Member>
    <Member MemberName="CoreWebView2">
      <MemberSignature Language="C#" Value="public Microsoft.Web.WebView2.Core.CoreWebView2 CoreWebView2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Web.WebView2.Core.CoreWebView2 CoreWebView2" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CoreWebView2 As CoreWebView2" />
      <MemberSignature Language="F#" Value="member this.CoreWebView2 : Microsoft.Web.WebView2.Core.CoreWebView2" Usage="Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Web.WebView2.Core.CoreWebView2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Accesses the complete functionality of the underlying <see cref="T:Microsoft.Web.WebView2.Core.CoreWebView2" /> COM API.
            Returns <c>null</c> until initialization has completed.
            See the <see cref="T:Microsoft.Web.WebView2.Wpf.WebView2" /> class documentation for an initialization overview.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Threading.DispatcherObject.VerifyAccess" />
        <altmember cref="T:Microsoft.Web.WebView2.Wpf.WebView2" />
        <exception cref="T:System.InvalidOperationException">Thrown if the calling thread isn't the thread which created this object (usually the UI thread).  See <see cref="M:System.Windows.Threading.DispatcherObject.VerifyAccess" /> for more info.</exception>
        <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="M:Microsoft.Web.WebView2.Wpf.WebView2.Dispose(System.Boolean)" /> has already been called on the control.</exception>
      </Docs>
    </Member>
    <Member MemberName="CoreWebView2InitializationCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2InitializationCompletedEventArgs&gt; CoreWebView2InitializationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.Web.WebView2.Core.CoreWebView2InitializationCompletedEventArgs&gt; CoreWebView2InitializationCompleted" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2InitializationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event CoreWebView2InitializationCompleted As EventHandler(Of CoreWebView2InitializationCompletedEventArgs) " />
      <MemberSignature Language="F#" Value="member this.CoreWebView2InitializationCompleted : EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2InitializationCompletedEventArgs&gt; " Usage="member this.CoreWebView2InitializationCompleted : System.EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2InitializationCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2InitializationCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            This event is triggered either
            1) when the control's <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2" /> has finished being initialized (regardless of how initialization was triggered) but before it is used for anything, or
            2) if the initialization failed.
            You should handle this event if you need to perform one time setup operations on the <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2" /> which you want to affect all of its usages.
            (e.g. adding event handlers, configuring settings, installing document creation scripts, adding host objects).
            See the <see cref="T:Microsoft.Web.WebView2.Wpf.WebView2" /> class documentation for an initialization overview.
            </summary>
        <remarks>
            This sender will be the <see cref="T:Microsoft.Web.WebView2.Wpf.WebView2" /> control, whose <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2" /> property will now be valid (i.e. non-null) for the first time
            if <see cref="P:Microsoft.Web.WebView2.Core.CoreWebView2InitializationCompletedEventArgs.IsSuccess" /> is <c>true</c>.
            Unlikely this event can fire second time (after reporting initialization success first)
            if the initialization is followed by navigation which fails.
            </remarks>
        <altmember cref="T:Microsoft.Web.WebView2.Wpf.WebView2" />
      </Docs>
    </Member>
    <Member MemberName="CoreWebView2Ready">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;EventArgs&gt; CoreWebView2Ready;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.EventArgs&gt; CoreWebView2Ready" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2Ready" />
      <MemberSignature Language="VB.NET" Value="Public Event CoreWebView2Ready As EventHandler(Of EventArgs) " />
      <MemberSignature Language="F#" Value="member this.CoreWebView2Ready : EventHandler&lt;EventArgs&gt; " Usage="member this.CoreWebView2Ready : System.EventHandler&lt;System.EventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.EventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            This event is triggered when the control's <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2" /> has finished being initialized (regardless of how initialization was triggered) but before it is used for anything.
            You should handle this event if you need to perform one time setup operations on the CoreWebView2 which you want to affect all of its usages
            (e.g. adding event handlers, configuring settings, installing document creation scripts, adding host objects).
            See the <see cref="T:Microsoft.Web.WebView2.Wpf.WebView2" /> class documentation for an initialization overview.
            </summary>
        <remarks>
            This event doesn't provide any arguments, and the sender will be the WebView2 control, whose CoreWebView2 property will now be valid (i.e. non-null) for the first time.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreationProperties">
      <MemberSignature Language="C#" Value="public Microsoft.Web.WebView2.Wpf.CoreWebView2CreationProperties CreationProperties { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Web.WebView2.Wpf.CoreWebView2CreationProperties CreationProperties" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Web.WebView2.Wpf.WebView2.CreationProperties" />
      <MemberSignature Language="VB.NET" Value="Public Property CreationProperties As CoreWebView2CreationProperties" />
      <MemberSignature Language="F#" Value="member this.CreationProperties : Microsoft.Web.WebView2.Wpf.CoreWebView2CreationProperties with get, set" Usage="Microsoft.Web.WebView2.Wpf.WebView2.CreationProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Common")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Common")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Web.WebView2.Wpf.CoreWebView2CreationProperties</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a bag of options which are used during initialization of the control's <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2" />.
            Setting this property will not work after initialization of the control's <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2" /> has started (the old value will be retained).
            See the <see cref="T:Microsoft.Web.WebView2.Wpf.WebView2" /> class documentation for an initialization overview.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:Microsoft.Web.WebView2.Wpf.WebView2" />
      </Docs>
    </Member>
    <Member MemberName="CreationPropertiesProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CreationPropertiesProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CreationPropertiesProperty" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Web.WebView2.Wpf.WebView2.CreationPropertiesProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CreationPropertiesProperty As DependencyProperty " />
      <MemberSignature Language="F#" Value=" staticval mutable CreationPropertiesProperty : System.Windows.DependencyProperty" Usage="Microsoft.Web.WebView2.Wpf.WebView2.CreationPropertiesProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The WPF <see cref="T:System.Windows.DependencyProperty" /> which backs the <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CreationProperties" /> property.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="DestroyWindowCore">
      <MemberSignature Language="C#" Value="protected override void DestroyWindowCore (System.Runtime.InteropServices.HandleRef hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void DestroyWindowCore(valuetype System.Runtime.InteropServices.HandleRef hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Web.WebView2.Wpf.WebView2.DestroyWindowCore(System.Runtime.InteropServices.HandleRef)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub DestroyWindowCore (hwnd As HandleRef)" />
      <MemberSignature Language="F#" Value="override this.DestroyWindowCore : System.Runtime.InteropServices.HandleRef -&gt; unit" Usage="webView2.DestroyWindowCore hwnd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.Runtime.InteropServices.HandleRef" />
      </Parameters>
      <Docs>
        <param name="hwnd">Our HWND that we need to destroy.</param>
        <summary>
            This is overridden from <see cref="T:System.Windows.Interop.HwndHost" /> and is called to instruct us to destroy our HWND.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Interop.HwndHost.DestroyWindowCore(System.Runtime.InteropServices.HandleRef)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Web.WebView2.Wpf.WebView2.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="webView2.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">True if a caller is explicitly calling Dispose, false if we're being finalized.</param>
        <summary>
            This is called by our base class according to the typical implementation of the <see cref="T:System.IDisposable" /> pattern.
            We implement it by releasing all of our underlying COM resources, including our <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureCoreWebView2Async">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task EnsureCoreWebView2Async (Microsoft.Web.WebView2.Core.CoreWebView2Environment environment = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task EnsureCoreWebView2Async(class Microsoft.Web.WebView2.Core.CoreWebView2Environment environment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Web.WebView2.Wpf.WebView2.EnsureCoreWebView2Async(Microsoft.Web.WebView2.Core.CoreWebView2Environment)" />
      <MemberSignature Language="VB.NET" Value="Public Function EnsureCoreWebView2Async (Optional environment As CoreWebView2Environment = Nothing) As Task" />
      <MemberSignature Language="F#" Value="member this.EnsureCoreWebView2Async : Microsoft.Web.WebView2.Core.CoreWebView2Environment -&gt; System.Threading.Tasks.Task" Usage="webView2.EnsureCoreWebView2Async environment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="environment" Type="Microsoft.Web.WebView2.Core.CoreWebView2Environment" />
      </Parameters>
      <Docs>
        <param name="environment">
            A pre-created <see cref="T:Microsoft.Web.WebView2.Core.CoreWebView2Environment" /> that should be used to create the <see cref="T:Microsoft.Web.WebView2.Core.CoreWebView2" />.
            Creating your own environment gives you control over several options that affect how the <see cref="T:Microsoft.Web.WebView2.Core.CoreWebView2" /> is initialized.
            If you pass an environment to this method then it will override any settings specified on the <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CreationProperties" /> property.
            If you pass <c>null</c> (the default value) and no value has been set to <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CreationProperties" /> then a default environment will be created and used automatically.
            </param>
        <summary>
            Explicitly triggers initialization of the control's <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2" />.
            See the <see cref="T:Microsoft.Web.WebView2.Wpf.WebView2" /> class documentation for an initialization overview.
            </summary>
        <returns>
            A Task that represents the background initialization process.
            When the task completes then the <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2" /> property will be available for use (i.e. non-null).
            Note that the control's <see cref="E:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2InitializationCompleted" /> event will be invoked before the task completes.
            </returns>
        <remarks>
            Calling this method additional times will have no effect (any specified environment is ignored) and return the same Task as the first call.
            Calling this method after initialization has been implicitly triggered by setting the <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.Source" /> property will have no effect (any specified environment is ignored) and simply return a Task representing that initialization already in progress.
            Note that even though this method is asynchronous and returns a Task, it still must be called on the UI thread like most public functionality of most UI controls.
            </remarks>
        <altmember cref="M:System.Windows.Threading.DispatcherObject.VerifyAccess" />
        <altmember cref="T:Microsoft.Web.WebView2.Wpf.WebView2" />
        <exception cref="T:System.InvalidOperationException">Thrown if the calling thread isn't the thread which created this object (usually the UI thread).  See <see cref="M:System.Windows.Threading.DispatcherObject.VerifyAccess" /> for more info.</exception>
        <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="M:Microsoft.Web.WebView2.Wpf.WebView2.Dispose(System.Boolean)" /> has already been called on the control.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteScriptAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; ExecuteScriptAsync (string javaScript);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; ExecuteScriptAsync(string javaScript) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Web.WebView2.Wpf.WebView2.ExecuteScriptAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteScriptAsync (javaScript As String) As Task(Of String)" />
      <MemberSignature Language="F#" Value="member this.ExecuteScriptAsync : string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="webView2.ExecuteScriptAsync javaScript" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="javaScript" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="javaScript">To be added.</param>
        <summary>
            Executes JavaScript code from the javaScript parameter in the current top level document rendered in the WebView.
            Equivalent to calling <see cref="M:Microsoft.Web.WebView2.Core.CoreWebView2.ExecuteScriptAsync(System.String)" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Threading.DispatcherObject.VerifyAccess" />
        <altmember cref="M:Microsoft.Web.WebView2.Core.CoreWebView2.ExecuteScriptAsync(System.String)" />
        <exception cref="T:System.InvalidOperationException">Thrown if the calling thread isn't the thread which created this object (usually the UI thread).  See <see cref="M:System.Windows.Threading.DispatcherObject.VerifyAccess" /> for more info.</exception>
        <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="M:Microsoft.Web.WebView2.Wpf.WebView2.Dispose(System.Boolean)" /> has already been called on the control.</exception>
      </Docs>
    </Member>
    <Member MemberName="GoBack">
      <MemberSignature Language="C#" Value="public void GoBack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GoBack() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Web.WebView2.Wpf.WebView2.GoBack" />
      <MemberSignature Language="VB.NET" Value="Public Sub GoBack ()" />
      <MemberSignature Language="F#" Value="member this.GoBack : unit -&gt; unit" Usage="webView2.GoBack " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Navigates the WebView to the previous page in the navigation history.
            Equivalent to calling <see cref="M:Microsoft.Web.WebView2.Core.CoreWebView2.GoBack" />
            If <see cref="T:Microsoft.Web.WebView2.Core.CoreWebView2" /> hasn't been initialized yet then does nothing.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:Microsoft.Web.WebView2.Core.CoreWebView2.CanGoBack" />
        <exception cref="T:System.InvalidOperationException">Thrown if the calling thread isn't the thread which created this object (usually the UI thread).  See <see cref="M:System.Windows.Threading.DispatcherObject.VerifyAccess" /> for more info.</exception>
        <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="M:Microsoft.Web.WebView2.Wpf.WebView2.Dispose(System.Boolean)" /> has already been called on the control.</exception>
        <altmember cref="M:System.Windows.Threading.DispatcherObject.VerifyAccess" />
      </Docs>
    </Member>
    <Member MemberName="GoForward">
      <MemberSignature Language="C#" Value="public void GoForward ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GoForward() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Web.WebView2.Wpf.WebView2.GoForward" />
      <MemberSignature Language="VB.NET" Value="Public Sub GoForward ()" />
      <MemberSignature Language="F#" Value="member this.GoForward : unit -&gt; unit" Usage="webView2.GoForward " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Navigates the WebView to the next page in the navigation history.
            Equivalent to calling <see cref="M:Microsoft.Web.WebView2.Core.CoreWebView2.GoForward" />.
            If <see cref="T:Microsoft.Web.WebView2.Core.CoreWebView2" /> hasn't been initialized yet then does nothing.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.Web.WebView2.Core.CoreWebView2.GoForward" />
        <exception cref="T:System.InvalidOperationException">Thrown if the calling thread isn't the thread which created this object (usually the UI thread).  See <see cref="M:System.Windows.Threading.DispatcherObject.VerifyAccess" /> for more info.</exception>
        <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="M:Microsoft.Web.WebView2.Wpf.WebView2.Dispose(System.Boolean)" /> has already been called on the control.</exception>
        <altmember cref="M:System.Windows.Threading.DispatcherObject.VerifyAccess" />
      </Docs>
    </Member>
    <Member MemberName="HasFocusWithinCore">
      <MemberSignature Language="C#" Value="protected override bool HasFocusWithinCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool HasFocusWithinCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Web.WebView2.Wpf.WebView2.HasFocusWithinCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HasFocusWithinCore () As Boolean" />
      <MemberSignature Language="F#" Value="override this.HasFocusWithinCore : unit -&gt; bool" Usage="webView2.HasFocusWithinCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            This is overridden from <see cref="T:System.Windows.Interop.HwndHost" /> and is called when WPF needs to know if the focus is in our control/window.
            WPF can't know on its own since we're hosting a non-WPF window, so instead it asks us by calling this.
            To answer, we just track state based on <see cref="T:Microsoft.Web.WebView2.Core.CoreWebView2" /> events that fire when it gains or loses focus.
            </summary>
        <returns>True if the focus is in our control/window, false if it isn't.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NavigateToString">
      <MemberSignature Language="C#" Value="public void NavigateToString (string htmlContent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NavigateToString(string htmlContent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Web.WebView2.Wpf.WebView2.NavigateToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub NavigateToString (htmlContent As String)" />
      <MemberSignature Language="F#" Value="member this.NavigateToString : string -&gt; unit" Usage="webView2.NavigateToString htmlContent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="htmlContent" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="htmlContent">To be added.</param>
        <summary>
            Initiates a navigation to htmlContent as source HTML of a new document.
            Equivalent to calling <see cref="M:Microsoft.Web.WebView2.Core.CoreWebView2.NavigateToString(System.String)" />.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.Web.WebView2.Core.CoreWebView2.NavigateToString(System.String)" />
        <exception cref="T:System.InvalidOperationException">Thrown if the calling thread isn't the thread which created this object (usually the UI thread).  See <see cref="M:System.Windows.Threading.DispatcherObject.VerifyAccess" /> for more info.</exception>
        <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="M:Microsoft.Web.WebView2.Wpf.WebView2.Dispose(System.Boolean)" /> has already been called on the control.</exception>
        <altmember cref="M:System.Windows.Threading.DispatcherObject.VerifyAccess" />
      </Docs>
    </Member>
    <Member MemberName="NavigationCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs&gt; NavigationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs&gt; NavigationCompleted" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Web.WebView2.Wpf.WebView2.NavigationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event NavigationCompleted As EventHandler(Of CoreWebView2NavigationCompletedEventArgs) " />
      <MemberSignature Language="F#" Value="member this.NavigationCompleted : EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs&gt; " Usage="member this.NavigationCompleted : System.EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A wrapper around the <see cref="E:Microsoft.Web.WebView2.Core.CoreWebView2.NavigationCompleted" />.
            The only difference between this event and <see cref="E:Microsoft.Web.WebView2.Core.CoreWebView2.NavigationCompleted" /> is the first parameter that's passed to handlers.
            Handlers of this event will receive the <see cref="T:Microsoft.Web.WebView2.Wpf.WebView2" /> control, whereas handlers of <see cref="E:Microsoft.Web.WebView2.Core.CoreWebView2.NavigationCompleted" /> will receive the <see cref="T:Microsoft.Web.WebView2.Core.CoreWebView2" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:Microsoft.Web.WebView2.Core.CoreWebView2.NavigationCompleted" />
      </Docs>
    </Member>
    <Member MemberName="NavigationStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs&gt; NavigationStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs&gt; NavigationStarting" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Web.WebView2.Wpf.WebView2.NavigationStarting" />
      <MemberSignature Language="VB.NET" Value="Public Event NavigationStarting As EventHandler(Of CoreWebView2NavigationStartingEventArgs) " />
      <MemberSignature Language="F#" Value="member this.NavigationStarting : EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs&gt; " Usage="member this.NavigationStarting : System.EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A wrapper around the <see cref="E:Microsoft.Web.WebView2.Core.CoreWebView2.NavigationStarting" />.
            The only difference between this event and <see cref="E:Microsoft.Web.WebView2.Core.CoreWebView2.NavigationStarting" /> is the first parameter that's passed to handlers.
            Handlers of this event will receive the <see cref="T:Microsoft.Web.WebView2.Wpf.WebView2" /> control, whereas handlers of <see cref="E:Microsoft.Web.WebView2.Core.CoreWebView2.NavigationStarting" /> will receive the <see cref="T:Microsoft.Web.WebView2.Core.CoreWebView2" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:Microsoft.Web.WebView2.Core.CoreWebView2.NavigationStarting" />
      </Docs>
    </Member>
    <Member MemberName="OnGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected override void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Web.WebView2.Wpf.WebView2.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="F#" Value="override this.OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="webView2.OnGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" Index="0" FrameworkAlternate="WebView2-dotnet-0.9.538-prerelease;WebView2-dotnet-0.9.579-prerelease;WebView2-dotnet-0.9.628-prerelease;WebView2-dotnet-1.0.674-prerelease;WebView2-dotnet-1.0.664.37;WebView2-dotnet-1.0.721-prerelease" />
      </Parameters>
      <Docs>
        <param name="e">Arguments from the underlying GotKeyboardFocus event.</param>
        <summary>
            This is overridden from <see cref="T:System.Windows.UIElement" /> and is called to inform us when we receive the keyboard focus.
            We handle this by passing the keyboard focus on to the underlying <see cref="T:Microsoft.Web.WebView2.Core.CoreWebView2" />.
            We never want to land in a state where our window (this.Handle) actually has the keyboard focus.
            </summary>
        <remarks>
            Note that it's actually possible for us to receive keyboard focus without this method being called.
            One known case where that happens is when our parent window is deactivated while we have focus, then reactivated.
            We handle that case in <see cref="M:Microsoft.Web.WebView2.Wpf.WebView2.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)" />.
            </remarks>
        <altmember cref="M:Microsoft.Web.WebView2.Wpf.WebView2.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Web.WebView2.Wpf.WebView2.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="F#" Value="override this.OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="webView2.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>
            This is overridden from <see cref="T:System.Windows.UIElement" /> and called to allow us to handle key press input.
            WPF should never actually call this in response to keyboard events because we're hosting a non-WPF window.
            When our window has focus Windows will send the input directly to it rather than to WPF's top-level window and input system.
            This override should only be called when we're explicitly forwarding accelerator key input from the CoreWebView2 to WPF (in CoreWebView2Controller_AcceleratorKeyPressed).
            Even then, this KeyDownEvent is only triggered because our PreviewKeyDownEvent implementation explicitly triggers it, matching WPF's usual system.
            So the process is:
            <list type="number"><item><description>CoreWebView2Controller_AcceleratorKeyPressed</description></item><item><description>PreviewKeyDownEvent</description></item><item><description>KeyDownEvent</description></item><item><description>OnKeyDown</description></item></list>
            .
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected override void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Web.WebView2.Wpf.WebView2.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="F#" Value="override this.OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="webView2.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>
            See <see cref="M:Microsoft.Web.WebView2.Wpf.WebView2.OnKeyDown(System.Windows.Input.KeyEventArgs)" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Web.WebView2.Wpf.WebView2.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="F#" Value="override this.OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="webView2.OnPreviewKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>
            This is the "Preview" (i.e. tunneling) version of <see cref="M:Microsoft.Web.WebView2.Wpf.WebView2.OnKeyDown(System.Windows.Input.KeyEventArgs)" />, so it actually happens first.
            Like OnKeyDown, this will only ever be called if we're explicitly forwarding key presses from the CoreWebView2.
            In order to mimic WPF's standard input handling, when we receive this we turn around and fire off the standard bubbling KeyDownEvent.
            That way others in the WPF tree see the same standard pair of input events that WPF itself would have triggered if it were handling the key press.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.Web.WebView2.Wpf.WebView2.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyUp">
      <MemberSignature Language="C#" Value="protected override void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPreviewKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Web.WebView2.Wpf.WebView2.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPreviewKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="F#" Value="override this.OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="webView2.OnPreviewKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>
            See <see cref="M:Microsoft.Web.WebView2.Wpf.WebView2.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnWindowPositionChanged">
      <MemberSignature Language="C#" Value="protected override void OnWindowPositionChanged (System.Windows.Rect rcBoundingBox);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnWindowPositionChanged(valuetype System.Windows.Rect rcBoundingBox) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Web.WebView2.Wpf.WebView2.OnWindowPositionChanged(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnWindowPositionChanged (rcBoundingBox As Rect)" />
      <MemberSignature Language="F#" Value="override this.OnWindowPositionChanged : System.Windows.Rect -&gt; unit" Usage="webView2.OnWindowPositionChanged rcBoundingBox" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rcBoundingBox" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rcBoundingBox">To be added.</param>
        <summary>
            This is overridden from <see cref="T:System.Windows.Interop.HwndHost" /> and called when our control's location has changed.
            The HwndHost takes care of updating the HWND we created.
            What we need to do is move our CoreWebView2 to match the new location.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reload">
      <MemberSignature Language="C#" Value="public void Reload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reload() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Web.WebView2.Wpf.WebView2.Reload" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reload ()" />
      <MemberSignature Language="F#" Value="member this.Reload : unit -&gt; unit" Usage="webView2.Reload " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Reloads the current page.
            Equivalent to calling <see cref="M:Microsoft.Web.WebView2.Core.CoreWebView2.Reload" />.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.Web.WebView2.Core.CoreWebView2.Reload" />
        <exception cref="T:System.InvalidOperationException">Thrown if the calling thread isn't the thread which created this object (usually the UI thread).  See <see cref="M:System.Windows.Threading.DispatcherObject.VerifyAccess" /> for more info.</exception>
        <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="M:Microsoft.Web.WebView2.Wpf.WebView2.Dispose(System.Boolean)" /> has already been called on the control.</exception>
        <altmember cref="M:System.Windows.Threading.DispatcherObject.VerifyAccess" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public Uri Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Source" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Web.WebView2.Wpf.WebView2.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As Uri" />
      <MemberSignature Language="F#" Value="member this.Source : Uri with get, set" Usage="Microsoft.Web.WebView2.Wpf.WebView2.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Common")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Common")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The top-level <see cref="T:System.Uri" /> which the WebView is currently displaying (or will display once initialization of its <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2" /> is finished).
            Generally speaking, getting this property is equivalent to getting the <see cref="P:Microsoft.Web.WebView2.Core.CoreWebView2.Source" /> property and setting this property (to a different value) is equivalent to calling the <see cref="M:Microsoft.Web.WebView2.Core.CoreWebView2.Navigate(System.String)" /> method.
            </summary>
        <value>To be added.</value>
        <remarks>
            Getting this property before the <see cref="T:Microsoft.Web.WebView2.Core.CoreWebView2" /> has been initialized will retrieve the last Uri which was set to it, or null (the default) if none has been.
            Setting this property before the <see cref="T:Microsoft.Web.WebView2.Core.CoreWebView2" /> has been initialized will cause initialization to start in the background (if not already in progress), after which the <see cref="T:Microsoft.Web.WebView2.Wpf.WebView2" /> will navigate to the specified <see cref="T:System.Uri" />.
            This property can never be set back to null or to a relative <see cref="T:System.Uri" />.
            See the <see cref="T:Microsoft.Web.WebView2.Wpf.WebView2" /> class documentation for an initialization overview.
            </remarks>
        <altmember cref="T:Microsoft.Web.WebView2.Wpf.WebView2" />
        <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="M:Microsoft.Web.WebView2.Wpf.WebView2.Dispose(System.Boolean)" /> has already been called on the control.</exception>
        <exception cref="T:System.NotImplementedException">Thrown if the property is set to <c>null</c>.</exception>
        <exception cref="T:System.ArgumentException">Thrown if the property is set to a relative <see cref="T:System.Uri" /> (i.e. a <see cref="T:System.Uri" /> whose <see cref="P:System.Uri.IsAbsoluteUri" /> property is <c>false</c>).</exception>
      </Docs>
    </Member>
    <Member MemberName="SourceChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs&gt; SourceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs&gt; SourceChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Web.WebView2.Wpf.WebView2.SourceChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event SourceChanged As EventHandler(Of CoreWebView2SourceChangedEventArgs) " />
      <MemberSignature Language="F#" Value="member this.SourceChanged : EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs&gt; " Usage="member this.SourceChanged : System.EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A wrapper around the <see cref="E:Microsoft.Web.WebView2.Core.CoreWebView2.SourceChanged" />.
            The only difference between this event and <see cref="E:Microsoft.Web.WebView2.Core.CoreWebView2.SourceChanged" /> is the first parameter that's passed to handlers.
            Handlers of this event will receive the <see cref="T:Microsoft.Web.WebView2.Wpf.WebView2" /> control, whereas handlers of <see cref="E:Microsoft.Web.WebView2.Core.CoreWebView2.SourceChanged" /> will receive the <see cref="T:Microsoft.Web.WebView2.Core.CoreWebView2" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <see cref="E:Microsoft.Web.WebView2.Core.CoreWebView2.SourceChanged" />
      </Docs>
    </Member>
    <Member MemberName="SourceProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SourceProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SourceProperty" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Web.WebView2.Wpf.WebView2.SourceProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SourceProperty As DependencyProperty " />
      <MemberSignature Language="F#" Value=" staticval mutable SourceProperty : System.Windows.DependencyProperty" Usage="Microsoft.Web.WebView2.Wpf.WebView2.SourceProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The WPF <see cref="T:System.Windows.DependencyProperty" /> which backs the <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.Source" /> property.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Web.WebView2.Wpf.WebView2.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="webView2.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Stops all navigations and pending resource fetches.
            Equivalent to calling <see cref="M:Microsoft.Web.WebView2.Core.CoreWebView2.Stop" />.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.Web.WebView2.Core.CoreWebView2.Stop" />
        <exception cref="T:System.InvalidOperationException">Thrown if the calling thread isn't the thread which created this object (usually the UI thread).  See <see cref="M:System.Windows.Threading.DispatcherObject.VerifyAccess" /> for more info.</exception>
        <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="M:Microsoft.Web.WebView2.Wpf.WebView2.Dispose(System.Boolean)" /> has already been called on the control.</exception>
        <altmember cref="M:System.Windows.Threading.DispatcherObject.VerifyAccess" />
      </Docs>
    </Member>
    <Member MemberName="TabIntoCore">
      <MemberSignature Language="C#" Value="protected override bool TabIntoCore (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool TabIntoCore(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Web.WebView2.Wpf.WebView2.TabIntoCore(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TabIntoCore (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="F#" Value="override this.TabIntoCore : System.Windows.Input.TraversalRequest -&gt; bool" Usage="webView2.TabIntoCore request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">Information about how the focus is moving.</param>
        <summary>
            This is overridden from <see cref="T:System.Windows.Interop.HwndHost" /> and is called to inform us that tabbing has caused the focus to move into our control/window.
            Since WPF can't manage the transition of focus to a non-WPF HWND, it delegates the transition to us here.
            So our job is just to place the focus in our external HWND.
            </summary>
        <returns>
          <c>true</c> to indicate that we handled the navigation, or <c>false</c> to indicate that we didn't.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WebMessageReceived">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs&gt; WebMessageReceived;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs&gt; WebMessageReceived" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Web.WebView2.Wpf.WebView2.WebMessageReceived" />
      <MemberSignature Language="VB.NET" Value="Public Event WebMessageReceived As EventHandler(Of CoreWebView2WebMessageReceivedEventArgs) " />
      <MemberSignature Language="F#" Value="member this.WebMessageReceived : EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs&gt; " Usage="member this.WebMessageReceived : System.EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A wrapper around the <see cref="E:Microsoft.Web.WebView2.Core.CoreWebView2.WebMessageReceived" />.
            The only difference between this event and <see cref="E:Microsoft.Web.WebView2.Core.CoreWebView2.WebMessageReceived" /> is the first parameter that's passed to handlers.
            Handlers of this event will receive the <see cref="T:Microsoft.Web.WebView2.Wpf.WebView2" /> control, whereas handlers of <see cref="E:Microsoft.Web.WebView2.Core.CoreWebView2.WebMessageReceived" /> will receive the <see cref="T:Microsoft.Web.WebView2.Core.CoreWebView2" /> instance.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:Microsoft.Web.WebView2.Core.CoreWebView2.WebMessageReceived" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override IntPtr WndProc (IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance native int WndProc(native int hwnd, int32 msg, native int wParam, native int lParam, bool&amp; handled) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Web.WebView2.Wpf.WebView2.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function WndProc (hwnd As IntPtr, msg As Integer, wParam As IntPtr, lParam As IntPtr, ByRef handled As Boolean) As IntPtr" />
      <MemberSignature Language="F#" Value="override this.WndProc : nativeint * int * nativeint * nativeint * bool -&gt; nativeint" Usage="webView2.WndProc (hwnd, msg, wParam, lParam, handled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" Index="0" FrameworkAlternate="WebView2-dotnet-0.9.538-prerelease;WebView2-dotnet-0.9.579-prerelease;WebView2-dotnet-0.9.628-prerelease;WebView2-dotnet-1.0.674-prerelease;WebView2-dotnet-1.0.664.37;WebView2-dotnet-1.0.721-prerelease" />
        <Parameter Name="msg" Type="System.Int32" Index="1" FrameworkAlternate="WebView2-dotnet-0.9.538-prerelease;WebView2-dotnet-0.9.579-prerelease;WebView2-dotnet-0.9.628-prerelease;WebView2-dotnet-1.0.674-prerelease;WebView2-dotnet-1.0.664.37;WebView2-dotnet-1.0.721-prerelease" />
        <Parameter Name="wParam" Type="System.IntPtr" Index="2" FrameworkAlternate="WebView2-dotnet-0.9.538-prerelease;WebView2-dotnet-0.9.579-prerelease;WebView2-dotnet-0.9.628-prerelease;WebView2-dotnet-1.0.674-prerelease;WebView2-dotnet-1.0.664.37;WebView2-dotnet-1.0.721-prerelease" />
        <Parameter Name="lParam" Type="System.IntPtr" Index="3" FrameworkAlternate="WebView2-dotnet-0.9.538-prerelease;WebView2-dotnet-0.9.579-prerelease;WebView2-dotnet-0.9.628-prerelease;WebView2-dotnet-1.0.674-prerelease;WebView2-dotnet-1.0.664.37;WebView2-dotnet-1.0.721-prerelease" />
        <Parameter Name="handled" Type="System.Boolean" RefType="ref" Index="4" FrameworkAlternate="WebView2-dotnet-0.9.538-prerelease;WebView2-dotnet-0.9.579-prerelease;WebView2-dotnet-0.9.628-prerelease;WebView2-dotnet-1.0.674-prerelease;WebView2-dotnet-1.0.664.37;WebView2-dotnet-1.0.721-prerelease" />
      </Parameters>
      <Docs>
        <param name="hwnd">Window receiving the message (should always match our <see cref="P:System.Windows.Interop.HwndHost.Handle" />).</param>
        <param name="msg">Indicates the message being received.  See Win32 documentation for WM_* constant values.</param>
        <param name="wParam">The "wParam" data being provided with the message.  Meaning varies by message.</param>
        <param name="lParam">The "lParam" data being provided with the message.  Meaning varies by message.</param>
        <param name="handled">If true then the message will not be forwarded to any (more) <see cref="E:System.Windows.Interop.HwndHost.MessageHook" /> handlers.</param>
        <summary>
            This is overridden from <see cref="T:System.Windows.Interop.HwndHost" /> and is called to provide us with Win32 messages that are sent to our hwnd.
            </summary>
        <returns>Return value varies by message.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Interop.HwndHost.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)" />
      </Docs>
    </Member>
    <Member MemberName="ZoomFactor">
      <MemberSignature Language="C#" Value="public double ZoomFactor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ZoomFactor" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Web.WebView2.Wpf.WebView2.ZoomFactor" />
      <MemberSignature Language="VB.NET" Value="Public Property ZoomFactor As Double" />
      <MemberSignature Language="F#" Value="member this.ZoomFactor : double with get, set" Usage="Microsoft.Web.WebView2.Wpf.WebView2.ZoomFactor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="WebView2-dotnet-0.9.579-prerelease;WebView2-dotnet-0.9.628-prerelease;WebView2-dotnet-1.0.664.37;WebView2-dotnet-1.0.674-prerelease;WebView2-dotnet-1.0.721-prerelease">
          <AttributeName Language="C#">[System.ComponentModel.Category("Common")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Common")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The zoom factor for the WebView.
            This property directly exposes <see cref="P:Microsoft.Web.WebView2.Core.CoreWebView2Controller.ZoomFactor" />, see its documentation for more info.
            Getting this property before the <see cref="T:Microsoft.Web.WebView2.Core.CoreWebView2" /> has been initialized will retrieve the last value which was set to it, or <c>1.0</c> (the default) if none has been.
            The most recent value set to this property before the CoreWebView2 has been initialized will be set on it after initialization.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:Microsoft.Web.WebView2.Core.CoreWebView2Controller.ZoomFactor" />
      </Docs>
    </Member>
    <Member MemberName="ZoomFactorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;EventArgs&gt; ZoomFactorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.EventArgs&gt; ZoomFactorChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Web.WebView2.Wpf.WebView2.ZoomFactorChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event ZoomFactorChanged As EventHandler(Of EventArgs) " />
      <MemberSignature Language="F#" Value="member this.ZoomFactorChanged : EventHandler&lt;EventArgs&gt; " Usage="member this.ZoomFactorChanged : System.EventHandler&lt;System.EventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.EventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The event is raised when the <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.ZoomFactor" /> property changes.
            This event directly exposes <see cref="E:Microsoft.Web.WebView2.Core.CoreWebView2Controller.ZoomFactorChanged" />.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:Microsoft.Web.WebView2.Core.CoreWebView2Controller.ZoomFactorChanged" />
        <altmember cref="P:Microsoft.Web.WebView2.Wpf.WebView2.ZoomFactor" />
      </Docs>
    </Member>
    <Member MemberName="ZoomFactorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ZoomFactorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ZoomFactorProperty" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Web.WebView2.Wpf.WebView2.ZoomFactorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ZoomFactorProperty As DependencyProperty " />
      <MemberSignature Language="F#" Value=" staticval mutable ZoomFactorProperty : System.Windows.DependencyProperty" Usage="Microsoft.Web.WebView2.Wpf.WebView2.ZoomFactorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Web.WebView2.Wpf</AssemblyName>
        <AssemblyVersion>0.9.628.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.664.37</AssemblyVersion>
        <AssemblyVersion>1.0.674.0</AssemblyVersion>
        <AssemblyVersion>1.0.721.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The WPF <see cref="T:System.Windows.DependencyProperty" /> which backs the <see cref="P:Microsoft.Web.WebView2.Wpf.WebView2.ZoomFactor" /> property.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
